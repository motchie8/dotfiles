snippet args "Initialize argument parser"
import argparse
parser = argparse.ArgumentParser()
parser.add_argument(
	"--${1:key}",
	type=${2:type},
)
args = parser.parse_args()
endsnippet

snippet arg "Add argument parser"
parser.add_argument(
	"--${1:key}",
	type=${2:type},
)
endsnippet

snippet def "Definition with Google Style Docstring"
def ${1:func}(${2:arg1}: ${3:type}) -> ${4:type}:
	"""description

	Args:
		$2 ($3): description

	Returns:
		$4: description

	Examples:
		>>> $1($2=...)
		"value"
	"""
endsnippet

snippet defn "Definition with Numpy Style Docstring"
def ${1:func}(${2:arg1}: ${3:type}) -> ${4:type}:
	"""description

	Parameters
	-------
	$2 : $3
		description

	Returns
	-------
	$4
		description

	Examples
	------
	>>> $1($2=...)
	"value"
	"""
endsnippet

snippet assert "Assert Dict Equals"
unittest.TestCase().assertDictEqual(${1:expected}, ${2:actual})
endsnippet

snippet assert "Assert List Equals"
unittest.TestCase().assertListEqual(${1:expected}, ${2:actual})
endsnippet

snippet unionfind "UnionFind"
from dataclasses import dataclass, field
from typing import List
@dataclass
class UnionFind:
	node_size: int
	parent_indices: List[int] = field(init=False)

	def __post_init__(self) -> None:
		self.parent_indices = [-1] * self.node_size

	def root(self, idx: int) -> int:
		if self.parent_indices[idx] < 0:
			return idx
		root_idx = self.root(idx=self.parent_indices[idx])
		self.parent_indices[idx] = root_idx
		return root_idx

	def size(self, idx: int) -> int:
		root_idx = self.root(idx=idx)
		group_size = abs(self.parent_indices[root_idx])
		return group_size

	def merge(self, idx_a: int, idx_b: int) -> None:
		a_root = self.root(idx=idx_a)
		b_root = self.root(idx=idx_b)
		if a_root == b_root >= 0:
			return
		if self.parent_indices[a_root] > self.parent_indices[b_root]:
			a_root, b_root = b_root, a_root
		self.parent_indices[a_root] += self.parent_indices[b_root]
		self.parent_indices[b_root] = a_root

	def issame(self, idx_a: int, idx_b: int) -> bool:
		a_root = self.root(idx=idx_a)
		b_root = self.root(idx=idx_b)
		return a_root == b_root
endsnippet

snippet binary_search "Binary Search to get index or None"
from typing import List, Optional

def binary_search(sorted_array: List[int], value: int, left: Optional[int]=None, right: Optional[int]=None) -> Optional[int]:
	if left is None:
		left = 0
	if right is None:
		right = len(sorted_array)
	pivot = left + int((right - left) / 2)
	if sorted_array[pivot] == value:
		return pivot
	elif right - left == 1:
		return None
	elif sorted_array[pivot] > value:
		return binary_search(sorted_array=sorted_array, value=value, left=left, right=pivot)
	else:
		return binary_search(sorted_array=sorted_array, value=value, left=pivot+1, right=right)
endsnippet

snippet binary_search "Binary Search to get lower bound index"
from typing import List

def binary_search(sorted_array: List[int], value: int) -> int:
	left = 0
	if sorted_array[left] >= value:
		return left
	right = len(sorted_array) - 1
	if sorted_array[right] < value:
		raise ValueError(f"given value {value} is greater than all elements of given sorted_array")
	while right - left != 1:
		pivot = left + int((right - left) / 2)
		if sorted_array[pivot] >= value:
			right = pivot
		else:
			left = pivot
	return right
endsnippet

snippet spark "Initialize Spark Session"
from pyspark.sql import SparkSession

spark = (SparkSession
    .builder
    .master("local")
    .appName("MyApp")
    .getOrCreate()
)
endsnippet

snippet dummy_input "Dummy input function for programing contest"
from collections import deque
from pathlib import Path
input_queue = deque()

def input(n: int = 1) -> str:
	if len(input_queue) == 0:
		test_input_path = Path(__file__).parent / 'test' / f'sample-{n}.in'
		lines = test_input_path.read_text().split('\n')
		for l in lines:
			input_queue.append(l)
	return input_queue.popleft()
endsnippet
