{
  "files.autoSave": "afterDelay",
  //-----------------------------------------------------------------------------------------------------------
  // vscodeのデフォルトの設定
  //-----------------------------------------------------------------------------------------------------------
  //----------------------------------------------------------
  // vscodeのeditorの設定
  //----------------------------------------------------------
  "editor.wordWrap": "on", // コードの一行が長くなるための可読性向上
  "editor.minimap.enabled": false, // ミニマップはいらない
  "editor.insertSpaces": true, // tab キーを押すとスペースが挿入されます。
  "editor.tabSize": 4, // tabをデフォルトで2スペースにする
  "editor.fontSize": 13,
  "editor.renderWhitespace": "boundary", // エディターで空白文字を表示する方法を制御します。'none'、'boundary' および 'all' が使用可能です。'boundary' オプションでは、単語間の単一スペースは表示されません。
  "editor.formatOnSave": true, // 時間のかかるフォーマットだとバグが出るらしいが試しにtrue
  "breadcrumbs.enabled": true, //エディターで開くパンくずの設定
  //----------------------------------------------------------
  // vscodeの検索系
  //----------------------------------------------------------
  // 検索除外対象のディレクトリ
  "search.exclude": {
    "**/bower_components": true,
    "**/vendor": true,
    "**/env": true,
    "tags": true,
    "**/.svn": true,
    "**/.git": true,
    "**/.DS_Store": true
  },
  //----------------------------------------------------------
  // vscodeのfileの設定
  //----------------------------------------------------------
  "files.associations": {
    "*.sql": "sql",
    "*.vue": "vue"
  },
  "files.autoGuessEncoding": true, // 有効な場合、ファイルを開くときに文字セット エンコードを推測します。言語ごとに構成することも可能
  "files.trimFinalNewlines": true, // 有効にすると、ファイルの保存時に最終行以降の新しい行をトリミングします。
  "files.trimTrailingWhitespace": true, // 有効にすると、ファイルの保存時に末尾の空白をトリミングします。
  // ファイル監視から除外するファイル
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true,
    "**/.svn/**": true,
  },
  //----------------------------------------------------------
  // vscodeのバージョン管理系
  //----------------------------------------------------------
  // ソース管理プロバイダーのセクションを常に表示するかどうか。
  "scm.alwaysShowProviders": true,
  //----------------------------------------------------------
  // vscodeの作業環境の設定(おもにタブの設定をvimと近づけるために設定)
  //----------------------------------------------------------
  // エディターのラベルの書式を制御します。例としてこの設定を変更することでファイルの場所を理解しやすくなります:
  // - short: 'parent'
  // - medium: 'workspace/src/parent'
  // - long: '/home/user/workspace/src/parent'
  // - default: '.../parent', 　別タブで、同じタイトルを共有する場合や、相対的なワークスペース パス タブが無効になっている場合
  "workbench.editor.labelFormat": "short",
  // 任意の表示グループが開かれた場合に、そこにエディターを表示するかどうかを制御します。無効にした場合、エディターは現在のアクティブなエディター グループに優先して開かれます。有効にした場合は、現在のアクティブなエディター グループにもう一度開くのではなく、既に開いているエディターが表示されます。特定のグループ内や現在アクティブなグループの横に強制的にエディターを開いた場合などに、この設定が無視される場合もあることにご注意ください。
  "workbench.editor.revealIfOpen": true,
  "workbench.editor.showIcons": false, // 開いているエディターをアイコンで表示するかどうかを制御します。これには、アイコンのテーマを有効にする必要もあります。
  "workbench.editor.highlightModifiedTabs": true, // 編集中のタブをハイライト
  "workbench.editor.tabSizing": "shrink", // エディターのタブの大きさを制御します。常に完全なエディター ラベルを表示するのに足りるタブの大きさを維持するには 'fit' を設定します。すべてのタブを一度に表示するには利用可能なスペースが足りない場合に、タブを縮小可能にするには 'shrink' を設定します。
  "workbench.editor.tabCloseButton": "off", // エディター タブの閉じるボタンの位置を制御するか、[off] に設定した場合に無効にします。
  // todo エディターグループにアクティブなエディターが一つしか存在できない
  // 前のセッションからエディターが復元されていない場合に、起動時に表示するかどうかを制御します。'none' を選択するとエディターなしで開始します。'welcomepage' を選択するとウェルカム ページを開きます (既定)。'newuntitledfile' を選択すると新しい無題のファイルを開きます (空のワークスペースを開いているときのみ)。
  "workbench.startupEditor": "none",
  // エディターを開く場所を制御します。'left' または 'right' を選択すると現在アクティブになっているエディターの左または右にエディターを開きます。'first' または 'last' を選択すると現在アクティブになっているエディターとは別個にエディターを開きます。
  "workbench.editor.openPositioning": "first", // アクティビティバーでよけいなスペースを取られるのでfalse
  "workbench.list.automaticKeyboardNavigation": false, // サイドバーのツリー検索でデフォルトの挙動をoffにする
  "explorer.openEditors.visible": 0, // [開いているエディター] ウィンドウに表示するエディターの数。
  //----------------------------------------------------------
  //ワンセット
  "workbench.editor.showTabs": true, //タブで見えるようにしないと何が開いているのかわからない
  "workbench.editor.enablePreview": true,
  "workbench.editor.enablePreviewFromQuickOpen": true,
  // { "key": "cmd+w", "command": "workbench.action.closeeditorsingroup" }
  // { "key": "ctrl+tab", "command": "workbench.action.openpreviouseditorfromhistory" },
  // { "key": "ctrl+tab", "command": "workbench.action.quickopennavigatenext", "when": "inquickopen" },
  //----------------------------------------------------------
  //----------------------------------------------------------
  // vscodeのdebugの設定
  //----------------------------------------------------------
  // デバッグ中にエディターの行内に変数値を表示します
  "debug.inlineValues": true,
  //----------------------------------------------------------
  // vscodeのwindowの設定
  //----------------------------------------------------------
  "window.zoomLevel": 1,
  //----------------------------------------------------------
  // vscodeのterminalの設定
  //----------------------------------------------------------
  "terminal.integrated.copyOnSelection": true, // 設定した場合、ターミナルで選択しているテキストはクリップボードにコピーされます。
  "terminal.integrated.fontSize": 13, // ターミナルのフォントサイズ
  //----------------------------------------------------------
  // vscode vimの設定
  //----------------------------------------------------------
  "vim.useSystemClipboard": true, // systemのclipboardを使用します
  "vim.hlsearch": true, // hlsearchは必要だと思う
  "vim.easymotion": true, // 検索をするときに見やすいモッサりすることなければこのまま
  "vim.visualstar": true, // wordを* or + で検索するでしょ?
  "vim.useCtrlKeys": true,
  "vim.cmdLineInitialColon": true,
  "vim.ignorecase": true, // ignore case in search patterns.
  "vim.incsearch": true, // show where a / search matches as you type it.
  "vim.sneak": true, // enable the sneak plugin for vim.
  "vim.insertModeKeyBindings": [
    {
      "before": [
        "j",
        "j"
      ],
      "after": [
        "<Esc>"
      ]
    }
  ],
  "vim.normalModeKeyBindings": [
    {
      "before": [
        "L"
      ],
      "after": [
        "$"
      ]
    },
    {
      "before": [
        "H"
      ],
      "after": [
        "^"
      ]
    },
    {
      "before": [
        "<Space>",
        "c"
      ],
      "commands": [
        "workbench.action.terminal.new"
      ]
    },
    {
      "before": [
        "s",
        "h"
      ],
      "commands": [
        "workbench.action.navigateEditorGroups"
      ]
    },
    {
      "before": [
        "g",
        "i"
      ],
      "commands": [
        "editor.action.goToImplementation"
      ]
    },
    {
      "before": [
        "g",
        "d"
      ],
      "commands": [
        "editor.action.goToDeclaration"
      ]
    },
    {
      "before": [
        "<Space>",
        "T"
      ],
      "commands": [
        "workbench.action.focusSideBar"
      ]
    },
    {
      "before": [
        "<Space>",
        "t"
      ],
      "commands": [
        "workbench.action.toggleSidebarVisibility"
        //"workbench.action.focusSideBar"
      ]
    },
    {
      "before": [
        "s",
        "j"
      ],
      "commands": [
        "workbench.action.terminal.focus"
      ]
    },
    {
      "before": [
        "s",
        "k"
      ],
      "commands": [
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    {
      "before": [
        "s",
        "k"
      ],
      "commands": [
        "workbench.files.action.focusOpenEditorsView"
      ]
    },
    {
      "before": [
        "s",
        "l"
      ],
      "commands": [
        "workbench.action.navigateEditorGroups"
      ]
    }
  ],
  "vim.visualModeKeyBindings": [
    {
      "before": [
        "L"
      ],
      "after": [
        "$"
      ]
    },
    {
      "before": [
        "H"
      ],
      "after": [
        "^"
      ]
    }
  ],
  //----------------------------------------------------------
  // vscode gitの設定
  //----------------------------------------------------------
  "git.autofetch": true,
  "python.jediEnabled": false,
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },
  "security.workspace.trust.untrustedFiles": "open",
  //----------------------------------------------------------
  // vscode-neovimの設定
  //----------------------------------------------------------
  "vscode-neovim.useWSL": true,
  "vscode-neovim.neovimExecutablePaths.linux": "/usr/bin/nvim",
  "vscode-neovim.neovimInitVimPaths.linux": "/home/motchie8/.dotfiles/.vimrc",
  "terminal.integrated.defaultProfile.windows": "Ubuntu-20.04 (WSL)",
  "terminal.integrated.enablePersistentSessions": false,
  "vscode-neovim.logOutputToConsole": true,
  "workbench.colorTheme": "Iceberg",
}