### AWS Resource snippets
snippet AWS::AccessAnalyzer::Analyzer
  {
    "Type" : "AWS::AccessAnalyzer::Analyzer",
    "Properties" : {
        "AnalyzerName" : String,
        "ArchiveRules" :  ArchiveRule, ... ,
        "Tags" :  Tag, ... ,
        "Type" : String
      }
  }


snippet AWS::AmazonMQ::Broker
  {
    "Type" : "AWS::AmazonMQ::Broker",
    "Properties" : {
        "AutoMinorVersionUpgrade" : Boolean,
        "BrokerName" : String,
        "Configuration" : ConfigurationId,
        "DeploymentMode" : String,
        "EncryptionOptions" : EncryptionOptions,
        "EngineType" : String,
        "EngineVersion" : String,
        "HostInstanceType" : String,
        "Logs" : LogList,
        "MaintenanceWindowStartTime" : MaintenanceWindow,
        "PubliclyAccessible" : Boolean,
        "SecurityGroups" :  String, ... ,
        "SubnetIds" :  String, ... ,
        "Tags" :  TagsEntry, ... ,
        "Users" :  User, ... 
      }
  }


snippet AWS::AmazonMQ::Configuration
  {
    "Type" : "AWS::AmazonMQ::Configuration",
    "Properties" : {
        "Data" : String,
        "Description" : String,
        "EngineType" : String,
        "EngineVersion" : String,
        "Name" : String,
        "Tags" :  TagsEntry, ... 
      }
  }


snippet AWS::AmazonMQ::ConfigurationAssociation
  {
    "Type" : "AWS::AmazonMQ::ConfigurationAssociation",
    "Properties" : {
        "Broker" : String,
        "Configuration" : ConfigurationId
      }
  }


snippet AWS::Amplify::App
  {
    "Type" : "AWS::Amplify::App",
    "Properties" : {
        "AccessToken" : String,
        "AutoBranchCreationConfig" : AutoBranchCreationConfig,
        "BasicAuthConfig" : BasicAuthConfig,
        "BuildSpec" : String,
        "CustomRules" :  CustomRule, ... ,
        "Description" : String,
        "EnvironmentVariables" :  EnvironmentVariable, ... ,
        "IAMServiceRole" : String,
        "Name" : String,
        "OauthToken" : String,
        "Repository" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Amplify::Branch
  {
    "Type" : "AWS::Amplify::Branch",
    "Properties" : {
        "AppId" : String,
        "BasicAuthConfig" : BasicAuthConfig,
        "BranchName" : String,
        "BuildSpec" : String,
        "Description" : String,
        "EnableAutoBuild" : Boolean,
        "EnablePullRequestPreview" : Boolean,
        "EnvironmentVariables" :  EnvironmentVariable, ... ,
        "PullRequestEnvironmentName" : String,
        "Stage" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Amplify::Domain
  {
    "Type" : "AWS::Amplify::Domain",
    "Properties" : {
        "AppId" : String,
        "DomainName" : String,
        "SubDomainSettings" :  SubDomainSetting, ... 
      }
  }


snippet AWS::ApiGateway::Account
  {
    "Type" : "AWS::ApiGateway::Account",
    "Properties" : {
        "CloudWatchRoleArn" : String
      }
  }


snippet AWS::ApiGateway::ApiKey
  {
    "Type" : "AWS::ApiGateway::ApiKey",
    "Properties" : {
        "CustomerId" : String,
        "Description" : String,
        "Enabled" : Boolean,
        "GenerateDistinctId" : Boolean,
        "Name" : String,
        "StageKeys" :  StageKey, ... ,
        "Tags" :  Tag, ... ,
        "Value" : String
      }
  }


snippet AWS::ApiGateway::Authorizer
  {
    "Type" : "AWS::ApiGateway::Authorizer",
    "Properties" : {
        "AuthType" : String,
        "AuthorizerCredentials" : String,
        "AuthorizerResultTtlInSeconds" : Integer,
        "AuthorizerUri" : String,
        "IdentitySource" : String,
        "IdentityValidationExpression" : String,
        "Name" : String,
        "ProviderARNs" :  String, ... ,
        "RestApiId" : String,
        "Type" : String
      }
  }


snippet AWS::ApiGateway::BasePathMapping
  {
    "Type" : "AWS::ApiGateway::BasePathMapping",
    "Properties" : {
        "BasePath" : String,
        "DomainName" : String,
        "RestApiId" : String,
        "Stage" : String
      }
  }


snippet AWS::ApiGateway::ClientCertificate
  {
    "Type" : "AWS::ApiGateway::ClientCertificate",
    "Properties" : {
        "Description" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::ApiGateway::Deployment
  {
    "Type" : "AWS::ApiGateway::Deployment",
    "Properties" : {
        "DeploymentCanarySettings" : DeploymentCanarySettings,
        "Description" : String,
        "RestApiId" : String,
        "StageDescription" : StageDescription,
        "StageName" : String
      }
  }


snippet AWS::ApiGateway::DocumentationPart
  {
    "Type" : "AWS::ApiGateway::DocumentationPart",
    "Properties" : {
        "Location" : Location,
        "Properties" : String,
        "RestApiId" : String
      }
  }


snippet AWS::ApiGateway::DocumentationVersion
  {
    "Type" : "AWS::ApiGateway::DocumentationVersion",
    "Properties" : {
        "Description" : String,
        "DocumentationVersion" : String,
        "RestApiId" : String
      }
  }


snippet AWS::ApiGateway::DomainName
  {
    "Type" : "AWS::ApiGateway::DomainName",
    "Properties" : {
        "CertificateArn" : String,
        "DomainName" : String,
        "EndpointConfiguration" : EndpointConfiguration,
        "RegionalCertificateArn" : String,
        "SecurityPolicy" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::ApiGateway::GatewayResponse
  {
    "Type" : "AWS::ApiGateway::GatewayResponse",
    "Properties" : {
        "ResponseParameters" : {Key : Value, ...},
        "ResponseTemplates" : {Key : Value, ...},
        "ResponseType" : String,
        "RestApiId" : String,
        "StatusCode" : String
      }
  }


snippet AWS::ApiGateway::Method
  {
    "Type" : "AWS::ApiGateway::Method",
    "Properties" : {
        "ApiKeyRequired" : Boolean,
        "AuthorizationScopes" :  String, ... ,
        "AuthorizationType" : String,
        "AuthorizerId" : String,
        "HttpMethod" : String,
        "Integration" : Integration,
        "MethodResponses" :  MethodResponse, ... ,
        "OperationName" : String,
        "RequestModels" : {Key : Value, ...},
        "RequestParameters" : {Key : Value, ...},
        "RequestValidatorId" : String,
        "ResourceId" : String,
        "RestApiId" : String
      }
  }


snippet AWS::ApiGateway::Model
  {
    "Type" : "AWS::ApiGateway::Model",
    "Properties" : {
        "ContentType" : String,
        "Description" : String,
        "Name" : String,
        "RestApiId" : String,
        "Schema" : Json
      }
  }


snippet AWS::ApiGateway::RequestValidator
  {
    "Type" : "AWS::ApiGateway::RequestValidator",
    "Properties" : {
        "Name" : String,
        "RestApiId" : String,
        "ValidateRequestBody" : Boolean,
        "ValidateRequestParameters" : Boolean
      }
  }


snippet AWS::ApiGateway::Resource
  {
    "Type" : "AWS::ApiGateway::Resource",
    "Properties" : {
        "ParentId" : String,
        "PathPart" : String,
        "RestApiId" : String
      }
  }


snippet AWS::ApiGateway::RestApi
  {
    "Type" : "AWS::ApiGateway::RestApi",
    "Properties" : {
        "ApiKeySourceType" : String,
        "BinaryMediaTypes" :  String, ... ,
        "Body" : Json,
        "BodyS3Location" : S3Location,
        "CloneFrom" : String,
        "Description" : String,
        "EndpointConfiguration" : EndpointConfiguration,
        "FailOnWarnings" : Boolean,
        "MinimumCompressionSize" : Integer,
        "Name" : String,
        "Parameters" : {Key : Value, ...},
        "Policy" : Json,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::ApiGateway::Stage
  {
    "Type" : "AWS::ApiGateway::Stage",
    "Properties" : {
        "AccessLogSetting" : AccessLogSetting,
        "CacheClusterEnabled" : Boolean,
        "CacheClusterSize" : String,
        "CanarySetting" : CanarySetting,
        "ClientCertificateId" : String,
        "DeploymentId" : String,
        "Description" : String,
        "DocumentationVersion" : String,
        "MethodSettings" :  MethodSetting, ... ,
        "RestApiId" : String,
        "StageName" : String,
        "Tags" :  Tag, ... ,
        "TracingEnabled" : Boolean,
        "Variables" : {Key : Value, ...}
      }
  }


snippet AWS::ApiGateway::UsagePlan
  {
    "Type" : "AWS::ApiGateway::UsagePlan",
    "Properties" : {
        "ApiStages" :  ApiStage, ... ,
        "Description" : String,
        "Quota" : QuotaSettings,
        "Tags" :  Tag, ... ,
        "Throttle" : ThrottleSettings,
        "UsagePlanName" : String
      }
  }


snippet AWS::ApiGateway::UsagePlanKey
  {
    "Type" : "AWS::ApiGateway::UsagePlanKey",
    "Properties" : {
        "KeyId" : String,
        "KeyType" : String,
        "UsagePlanId" : String
      }
  }


snippet AWS::ApiGateway::VpcLink
  {
    "Type" : "AWS::ApiGateway::VpcLink",
    "Properties" : {
        "Description" : String,
        "Name" : String,
        "TargetArns" :  String, ... 
      }
  }


snippet AWS::ApiGatewayV2::Api
  {
    "Type" : "AWS::ApiGatewayV2::Api",
    "Properties" : {
        "ApiKeySelectionExpression" : String,
        "Description" : String,
        "DisableSchemaValidation" : Boolean,
        "Name" : String,
        "ProtocolType" : String,
        "RouteSelectionExpression" : String,
        "Version" : String
      }
  }


snippet AWS::ApiGatewayV2::ApiMapping
  {
    "Type" : "AWS::ApiGatewayV2::ApiMapping",
    "Properties" : {
        "ApiId" : String,
        "ApiMappingKey" : String,
        "DomainName" : String,
        "Stage" : String
      }
  }


snippet AWS::ApiGatewayV2::Authorizer
  {
    "Type" : "AWS::ApiGatewayV2::Authorizer",
    "Properties" : {
        "ApiId" : String,
        "AuthorizerCredentialsArn" : String,
        "AuthorizerResultTtlInSeconds" : Integer,
        "AuthorizerType" : String,
        "AuthorizerUri" : String,
        "IdentitySource" :  String, ... ,
        "IdentityValidationExpression" : String,
        "Name" : String
      }
  }


snippet AWS::ApiGatewayV2::Deployment
  {
    "Type" : "AWS::ApiGatewayV2::Deployment",
    "Properties" : {
        "ApiId" : String,
        "Description" : String,
        "StageName" : String
      }
  }


snippet AWS::ApiGatewayV2::DomainName
  {
    "Type" : "AWS::ApiGatewayV2::DomainName",
    "Properties" : {
        "DomainName" : String,
        "DomainNameConfigurations" :  DomainNameConfiguration, ... 
      }
  }


snippet AWS::ApiGatewayV2::Integration
  {
    "Type" : "AWS::ApiGatewayV2::Integration",
    "Properties" : {
        "ApiId" : String,
        "ConnectionType" : String,
        "ContentHandlingStrategy" : String,
        "CredentialsArn" : String,
        "Description" : String,
        "IntegrationMethod" : String,
        "IntegrationType" : String,
        "IntegrationUri" : String,
        "PassthroughBehavior" : String,
        "RequestParameters" : Json,
        "RequestTemplates" : Json,
        "TemplateSelectionExpression" : String,
        "TimeoutInMillis" : Integer
      }
  }


snippet AWS::ApiGatewayV2::IntegrationResponse
  {
    "Type" : "AWS::ApiGatewayV2::IntegrationResponse",
    "Properties" : {
        "ApiId" : String,
        "ContentHandlingStrategy" : String,
        "IntegrationId" : String,
        "IntegrationResponseKey" : String,
        "ResponseParameters" : Json,
        "ResponseTemplates" : Json,
        "TemplateSelectionExpression" : String
      }
  }


snippet AWS::ApiGatewayV2::Model
  {
    "Type" : "AWS::ApiGatewayV2::Model",
    "Properties" : {
        "ApiId" : String,
        "ContentType" : String,
        "Description" : String,
        "Name" : String,
        "Schema" : Json
      }
  }


snippet AWS::ApiGatewayV2::Route
  {
    "Type" : "AWS::ApiGatewayV2::Route",
    "Properties" : {
        "ApiId" : String,
        "ApiKeyRequired" : Boolean,
        "AuthorizationScopes" :  String, ... ,
        "AuthorizationType" : String,
        "AuthorizerId" : String,
        "ModelSelectionExpression" : String,
        "OperationName" : String,
        "RequestModels" : Json,
        "RequestParameters" : Json,
        "RouteKey" : String,
        "RouteResponseSelectionExpression" : String,
        "Target" : String
      }
  }


snippet AWS::ApiGatewayV2::RouteResponse
  {
    "Type" : "AWS::ApiGatewayV2::RouteResponse",
    "Properties" : {
        "ApiId" : String,
        "ModelSelectionExpression" : String,
        "ResponseModels" : Json,
        "ResponseParameters" : Json,
        "RouteId" : String,
        "RouteResponseKey" : String
      }
  }


snippet AWS::ApiGatewayV2::Stage
  {
    "Type" : "AWS::ApiGatewayV2::Stage",
    "Properties" : {
        "AccessLogSettings" : AccessLogSettings,
        "ApiId" : String,
        "ClientCertificateId" : String,
        "DefaultRouteSettings" : RouteSettings,
        "DeploymentId" : String,
        "Description" : String,
        "RouteSettings" : Json,
        "StageName" : String,
        "StageVariables" : Json
      }
  }


snippet AWS::ApplicationAutoScaling::ScalableTarget
  {
    "Type" : "AWS::ApplicationAutoScaling::ScalableTarget",
    "Properties" : {
        "MaxCapacity" : Integer,
        "MinCapacity" : Integer,
        "ResourceId" : String,
        "RoleARN" : String,
        "ScalableDimension" : String,
        "ScheduledActions" :  ScheduledAction, ... ,
        "ServiceNamespace" : String,
        "SuspendedState" : SuspendedState
      }
  }


snippet AWS::ApplicationAutoScaling::ScalingPolicy
  {
    "Type" : "AWS::ApplicationAutoScaling::ScalingPolicy",
    "Properties" : {
        "PolicyName" : String,
        "PolicyType" : String,
        "ResourceId" : String,
        "ScalableDimension" : String,
        "ScalingTargetId" : String,
        "ServiceNamespace" : String,
        "StepScalingPolicyConfiguration" : StepScalingPolicyConfiguration,
        "TargetTrackingScalingPolicyConfiguration" : TargetTrackingScalingPolicyConfiguration
      }
  }


snippet AWS::AppMesh::Mesh
  {
    "Type" : "AWS::AppMesh::Mesh",
    "Properties" : {
        "MeshName" : String,
        "Spec" : MeshSpec,
        "Tags" :  TagRef, ... 
      }
  }


snippet AWS::AppMesh::Route
  {
    "Type" : "AWS::AppMesh::Route",
    "Properties" : {
        "MeshName" : String,
        "RouteName" : String,
        "Spec" : RouteSpec,
        "Tags" :  TagRef, ... ,
        "VirtualRouterName" : String
      }
  }


snippet AWS::AppMesh::VirtualNode
  {
    "Type" : "AWS::AppMesh::VirtualNode",
    "Properties" : {
        "MeshName" : String,
        "Spec" : VirtualNodeSpec,
        "Tags" :  TagRef, ... ,
        "VirtualNodeName" : String
      }
  }


snippet AWS::AppMesh::VirtualRouter
  {
    "Type" : "AWS::AppMesh::VirtualRouter",
    "Properties" : {
        "MeshName" : String,
        "Spec" : VirtualRouterSpec,
        "Tags" :  TagRef, ... ,
        "VirtualRouterName" : String
      }
  }


snippet AWS::AppMesh::VirtualService
  {
    "Type" : "AWS::AppMesh::VirtualService",
    "Properties" : {
        "MeshName" : String,
        "Spec" : VirtualServiceSpec,
        "Tags" :  TagRef, ... ,
        "VirtualServiceName" : String
      }
  }


snippet AWS::AppStream::DirectoryConfig
  {
    "Type" : "AWS::AppStream::DirectoryConfig",
    "Properties" : {
        "DirectoryName" : String,
        "OrganizationalUnitDistinguishedNames" :  String, ... ,
        "ServiceAccountCredentials" : ServiceAccountCredentials
      }
  }


snippet AWS::AppStream::Fleet
  {
    "Type" : "AWS::AppStream::Fleet",
    "Properties" : {
        "ComputeCapacity" : ComputeCapacity,
        "Description" : String,
        "DisconnectTimeoutInSeconds" : Integer,
        "DisplayName" : String,
        "DomainJoinInfo" : DomainJoinInfo,
        "EnableDefaultInternetAccess" : Boolean,
        "FleetType" : String,
        "IdleDisconnectTimeoutInSeconds" : Integer,
        "ImageArn" : String,
        "ImageName" : String,
        "InstanceType" : String,
        "MaxUserDurationInSeconds" : Integer,
        "Name" : String,
        "Tags" :  Tag, ... ,
        "VpcConfig" : VpcConfig
      }
  }


snippet AWS::AppStream::ImageBuilder
  {
    "Type" : "AWS::AppStream::ImageBuilder",
    "Properties" : {
        "AccessEndpoints" :  AccessEndpoint, ... ,
        "AppstreamAgentVersion" : String,
        "Description" : String,
        "DisplayName" : String,
        "DomainJoinInfo" : DomainJoinInfo,
        "EnableDefaultInternetAccess" : Boolean,
        "ImageArn" : String,
        "ImageName" : String,
        "InstanceType" : String,
        "Name" : String,
        "Tags" :  Tag, ... ,
        "VpcConfig" : VpcConfig
      }
  }


snippet AWS::AppStream::Stack
  {
    "Type" : "AWS::AppStream::Stack",
    "Properties" : {
        "AccessEndpoints" :  AccessEndpoint, ... ,
        "ApplicationSettings" : ApplicationSettings,
        "AttributesToDelete" :  String, ... ,
        "DeleteStorageConnectors" : Boolean,
        "Description" : String,
        "DisplayName" : String,
        "EmbedHostDomains" :  String, ... ,
        "FeedbackURL" : String,
        "Name" : String,
        "RedirectURL" : String,
        "StorageConnectors" :  StorageConnector, ... ,
        "Tags" :  Tag, ... ,
        "UserSettings" :  UserSetting, ... 
      }
  }


snippet AWS::AppStream::StackFleetAssociation
  {
    "Type" : "AWS::AppStream::StackFleetAssociation",
    "Properties" : {
        "FleetName" : String,
        "StackName" : String
      }
  }


snippet AWS::AppStream::StackUserAssociation
  {
    "Type" : "AWS::AppStream::StackUserAssociation",
    "Properties" : {
        "AuthenticationType" : String,
        "SendEmailNotification" : Boolean,
        "StackName" : String,
        "UserName" : String
      }
  }


snippet AWS::AppStream::User
  {
    "Type" : "AWS::AppStream::User",
    "Properties" : {
        "AuthenticationType" : String,
        "FirstName" : String,
        "LastName" : String,
        "MessageAction" : String,
        "UserName" : String
      }
  }


snippet AWS::AppSync::ApiKey
  {
    "Type" : "AWS::AppSync::ApiKey",
    "Properties" : {
        "ApiId" : String,
        "Description" : String,
        "Expires" : Double
      }
  }


snippet AWS::AppSync::DataSource
  {
    "Type" : "AWS::AppSync::DataSource",
    "Properties" : {
        "ApiId" : String,
        "Description" : String,
        "DynamoDBConfig" : DynamoDBConfig,
        "ElasticsearchConfig" : ElasticsearchConfig,
        "HttpConfig" : HttpConfig,
        "LambdaConfig" : LambdaConfig,
        "Name" : String,
        "RelationalDatabaseConfig" : RelationalDatabaseConfig,
        "ServiceRoleArn" : String,
        "Type" : String
      }
  }


snippet AWS::AppSync::FunctionConfiguration
  {
    "Type" : "AWS::AppSync::FunctionConfiguration",
    "Properties" : {
        "ApiId" : String,
        "DataSourceName" : String,
        "Description" : String,
        "FunctionVersion" : String,
        "Name" : String,
        "RequestMappingTemplate" : String,
        "RequestMappingTemplateS3Location" : String,
        "ResponseMappingTemplate" : String,
        "ResponseMappingTemplateS3Location" : String
      }
  }


snippet AWS::AppSync::GraphQLApi
  {
    "Type" : "AWS::AppSync::GraphQLApi",
    "Properties" : {
        "AdditionalAuthenticationProviders" : AdditionalAuthenticationProviders,
        "AuthenticationType" : String,
        "LogConfig" : LogConfig,
        "Name" : String,
        "OpenIDConnectConfig" : OpenIDConnectConfig,
        "Tags" : Tags,
        "UserPoolConfig" : UserPoolConfig
      }
  }


snippet AWS::AppSync::GraphQLSchema
  {
    "Type" : "AWS::AppSync::GraphQLSchema",
    "Properties" : {
        "ApiId" : String,
        "Definition" : String,
        "DefinitionS3Location" : String
      }
  }


snippet AWS::AppSync::Resolver
  {
    "Type" : "AWS::AppSync::Resolver",
    "Properties" : {
        "ApiId" : String,
        "DataSourceName" : String,
        "FieldName" : String,
        "Kind" : String,
        "PipelineConfig" : PipelineConfig,
        "RequestMappingTemplate" : String,
        "RequestMappingTemplateS3Location" : String,
        "ResponseMappingTemplate" : String,
        "ResponseMappingTemplateS3Location" : String,
        "TypeName" : String
      }
  }


snippet AWS::AutoScaling::LifecycleHook
  {
    "Type" : "AWS::AutoScaling::LifecycleHook",
    "Properties" : {
        "AutoScalingGroupName" : String,
        "DefaultResult" : String,
        "HeartbeatTimeout" : Integer,
        "LifecycleHookName" : String,
        "LifecycleTransition" : String,
        "NotificationMetadata" : String,
        "NotificationTargetARN" : String,
        "RoleARN" : String
      }
  }


snippet AWS::AutoScaling::ScheduledAction
  {
    "Type" : "AWS::AutoScaling::ScheduledAction",
    "Properties" : {
        "AutoScalingGroupName" : String,
        "DesiredCapacity" : Integer,
        "EndTime" : String,
        "MaxSize" : Integer,
        "MinSize" : Integer,
        "Recurrence" : String,
        "StartTime" : String
      }
  }


snippet Alexa::ASK::Skill
  {
    "Type" : "Alexa::ASK::Skill",
    "Properties" : {
        "AuthenticationConfiguration" : AuthenticationConfiguration,
        "SkillPackage" : SkillPackage,
        "VendorId" : String
      }
  }


snippet AWS::Athena::NamedQuery
  {
    "Type" : "AWS::Athena::NamedQuery",
    "Properties" : {
        "Database" : String,
        "Description" : String,
        "Name" : String,
        "QueryString" : String
      }
  }


snippet AWS::CloudFormation::Authentication
  {
    "Type" : "AWS::CloudFormation::Authentication" {
      "String" : {
        "accessKeyId" : String,
        "buckets" :  String, ... ,
        "password" : String,
        "secretKey" : String,
        "type" : String,
        "uris" :  String, ... ,
        "username" : String,
        "roleName" : String
      }
    }
  }


snippet AWS::AutoScalingPlans::ScalingPlan
  {
    "Type" : "AWS::AutoScalingPlans::ScalingPlan",
    "Properties" : {
        "ApplicationSource" : ApplicationSource,
        "ScalingInstructions" :  ScalingInstruction, ... 
      }
  }


snippet AWS::Backup::BackupPlan
  {
    "Type" : "AWS::Backup::BackupPlan",
    "Properties" : {
        "BackupPlan" : BackupPlanResourceType,
        "BackupPlanTags" : Json
      }
  }


snippet AWS::Backup::BackupSelection
  {
    "Type" : "AWS::Backup::BackupSelection",
    "Properties" : {
        "BackupPlanId" : String,
        "BackupSelection" : BackupSelectionResourceType
      }
  }


snippet AWS::Backup::BackupVault
  {
    "Type" : "AWS::Backup::BackupVault",
    "Properties" : {
        "AccessPolicy" : Json,
        "BackupVaultName" : String,
        "BackupVaultTags" : Json,
        "EncryptionKeyArn" : String,
        "Notifications" : NotificationObjectType
      }
  }


snippet AWS::Batch::ComputeEnvironment
  {
    "Type" : "AWS::Batch::ComputeEnvironment",
    "Properties" : {
        "ComputeEnvironmentName" : String,
        "ComputeResources" : ComputeResources,
        "ServiceRole" : String,
        "State" : String,
        "Type" : String
      }
  }


snippet AWS::Batch::JobDefinition
  {
    "Type" : "AWS::Batch::JobDefinition",
    "Properties" : {
        "ContainerProperties" : ContainerProperties,
        "JobDefinitionName" : String,
        "NodeProperties" : NodeProperties,
        "Parameters" : Json,
        "RetryStrategy" : RetryStrategy,
        "Timeout" : Timeout,
        "Type" : String
      }
  }


snippet AWS::Batch::JobQueue
  {
    "Type" : "AWS::Batch::JobQueue",
    "Properties" : {
        "ComputeEnvironmentOrder" :  ComputeEnvironmentOrder, ... ,
        "JobQueueName" : String,
        "Priority" : Integer,
        "State" : String
      }
  }


snippet AWS::Budgets::Budget
  {
    "Type" : "AWS::Budgets::Budget",
    "Properties" : {
        "Budget" : BudgetData,
        "NotificationsWithSubscribers" :  NotificationWithSubscribers, ... 
      }
  }


snippet AWS::CertificateManager::Certificate
  {
    "Type" : "AWS::CertificateManager::Certificate",
    "Properties" : {
        "DomainName" : String,
        "DomainValidationOptions" :  DomainValidationOption, ... ,
        "SubjectAlternativeNames" :  String, ... ,
        "Tags" :  Tag, ... ,
        "ValidationMethod" : String
      }
  }


snippet AWS::CloudFormation::CustomResource
  {
    "Type" : "AWS::CloudFormation::CustomResource",
    "Properties" : {
        "ServiceToken" : String
      }
  }


snippet AWS::Cloud9::EnvironmentEC2
  {
    "Type" : "AWS::Cloud9::EnvironmentEC2",
    "Properties" : {
        "AutomaticStopTimeMinutes" : Integer,
        "Description" : String,
        "InstanceType" : String,
        "Name" : String,
        "OwnerArn" : String,
        "Repositories" :  Repository, ... ,
        "SubnetId" : String
      }
  }


snippet AWS::CloudFormation::Interface
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" :  ParameterGroup, ... ,
      "ParameterLabels" : ParameterLabel
    }
  }


snippet AWS::CloudFormation::Macro
  {
    "Type" : "AWS::CloudFormation::Macro",
    "Properties" : {
        "Description" : String,
        "FunctionName" : String,
        "LogGroupName" : String,
        "LogRoleARN" : String,
        "Name" : String
      }
  }


snippet AWS::CloudFront::CloudFrontOriginAccessIdentity
  {
    "Type" : "AWS::CloudFront::CloudFrontOriginAccessIdentity",
    "Properties" : {
        "CloudFrontOriginAccessIdentityConfig" : CloudFrontOriginAccessIdentityConfig
      }
  }


snippet AWS::CloudFront::Distribution
  {
    "Type" : "AWS::CloudFront::Distribution",
    "Properties" : {
        "DistributionConfig" : DistributionConfig,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::CloudFront::StreamingDistribution
  {
    "Type" : "AWS::CloudFront::StreamingDistribution",
    "Properties" : {
        "StreamingDistributionConfig" : StreamingDistributionConfig,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::CloudTrail::Trail
  {
    "Type" : "AWS::CloudTrail::Trail",
    "Properties" : {
        "CloudWatchLogsLogGroupArn" : String,
        "CloudWatchLogsRoleArn" : String,
        "EnableLogFileValidation" : Boolean,
        "EventSelectors" :  EventSelector, ... ,
        "IncludeGlobalServiceEvents" : Boolean,
        "IsLogging" : Boolean,
        "IsMultiRegionTrail" : Boolean,
        "KMSKeyId" : String,
        "S3BucketName" : String,
        "S3KeyPrefix" : String,
        "SnsTopicName" : String,
        "Tags" :  Tag, ... ,
        "TrailName" : String
      }
  }


snippet AWS::CloudWatch::AnomalyDetector
  {
    "Type" : "AWS::CloudWatch::AnomalyDetector",
    "Properties" : {
        "Configuration" : Configuration,
        "Dimensions" :  Dimension, ... ,
        "MetricName" : String,
        "Namespace" : String,
        "Stat" : String
      }
  }


snippet AWS::CloudWatch::Dashboard
  {
    "Type" : "AWS::CloudWatch::Dashboard",
    "Properties" : {
        "DashboardBody" : String,
        "DashboardName" : String
      }
  }


snippet AWS::CodeBuild::Project
  {
    "Type" : "AWS::CodeBuild::Project",
    "Properties" : {
        "Artifacts" : Artifacts,
        "BadgeEnabled" : Boolean,
        "Cache" : ProjectCache,
        "Description" : String,
        "EncryptionKey" : String,
        "Environment" : Environment,
        "LogsConfig" : LogsConfig,
        "Name" : String,
        "QueuedTimeoutInMinutes" : Integer,
        "SecondaryArtifacts" :  Artifacts, ... ,
        "SecondarySourceVersions" :  ProjectSourceVersion, ... ,
        "SecondarySources" :  Source, ... ,
        "ServiceRole" : String,
        "Source" : Source,
        "SourceVersion" : String,
        "Tags" :  Tag, ... ,
        "TimeoutInMinutes" : Integer,
        "Triggers" : ProjectTriggers,
        "VpcConfig" : VpcConfig
      }
  }


snippet AWS::CodeBuild::SourceCredential
  {
    "Type" : "AWS::CodeBuild::SourceCredential",
    "Properties" : {
        "AuthType" : String,
        "ServerType" : String,
        "Token" : String,
        "Username" : String
      }
  }


snippet AWS::CodeCommit::Repository
  {
    "Type" : "AWS::CodeCommit::Repository",
    "Properties" : {
        "Code" : Code,
        "RepositoryDescription" : String,
        "RepositoryName" : String,
        "Tags" :  Tag, ... ,
        "Triggers" :  RepositoryTrigger, ... 
      }
  }


snippet AWS::CodeDeploy::Application
  {
    "Type" : "AWS::CodeDeploy::Application",
    "Properties" : {
        "ApplicationName" : String,
        "ComputePlatform" : String
      }
  }


snippet AWS::CodeDeploy::DeploymentConfig
  {
    "Type" : "AWS::CodeDeploy::DeploymentConfig",
    "Properties" : {
        "DeploymentConfigName" : String,
        "MinimumHealthyHosts" : MinimumHealthyHosts
      }
  }


snippet AWS::CodeDeploy::DeploymentGroup
  {
    "Type" : "AWS::CodeDeploy::DeploymentGroup",
    "Properties" : {
        "AlarmConfiguration" : AlarmConfiguration,
        "ApplicationName" : String,
        "AutoRollbackConfiguration" : AutoRollbackConfiguration,
        "AutoScalingGroups" :  String, ... ,
        "Deployment" : Deployment,
        "DeploymentConfigName" : String,
        "DeploymentGroupName" : String,
        "DeploymentStyle" : DeploymentStyle,
        "Ec2TagFilters" :  EC2TagFilter, ... ,
        "Ec2TagSet" : EC2TagSet,
        "LoadBalancerInfo" : LoadBalancerInfo,
        "OnPremisesInstanceTagFilters" :  TagFilter, ... ,
        "OnPremisesTagSet" : OnPremisesTagSet,
        "ServiceRoleArn" : String,
        "TriggerConfigurations" :  TriggerConfig, ... 
      }
  }


snippet AWS::CodePipeline::CustomActionType
  {
    "Type" : "AWS::CodePipeline::CustomActionType",
    "Properties" : {
        "Category" : String,
        "ConfigurationProperties" :  ConfigurationProperties, ... ,
        "InputArtifactDetails" : ArtifactDetails,
        "OutputArtifactDetails" : ArtifactDetails,
        "Provider" : String,
        "Settings" : Settings,
        "Tags" :  Tag, ... ,
        "Version" : String
      }
  }


snippet AWS::CodePipeline::Pipeline
  {
    "Type" : "AWS::CodePipeline::Pipeline",
    "Properties" : {
        "ArtifactStore" : ArtifactStore,
        "ArtifactStores" :  ArtifactStoreMap, ... ,
        "DisableInboundStageTransitions" :  StageTransition, ... ,
        "Name" : String,
        "RestartExecutionOnUpdate" : Boolean,
        "RoleArn" : String,
        "Stages" :  StageDeclaration, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::CodePipeline::Webhook
  {
    "Type" : "AWS::CodePipeline::Webhook",
    "Properties" : {
        "Authentication" : String,
        "AuthenticationConfiguration" : WebhookAuthConfiguration,
        "Filters" :  WebhookFilterRule, ... ,
        "Name" : String,
        "RegisterWithThirdParty" : Boolean,
        "TargetAction" : String,
        "TargetPipeline" : String,
        "TargetPipelineVersion" : Integer
      }
  }


snippet AWS::CodeStar::GitHubRepository
  {
    "Type" : "AWS::CodeStar::GitHubRepository",
    "Properties" : {
        "Code" : Code,
        "EnableIssues" : Boolean,
        "IsPrivate" : Boolean,
        "RepositoryAccessToken" : String,
        "RepositoryDescription" : String,
        "RepositoryName" : String,
        "RepositoryOwner" : String
      }
  }


snippet AWS::CodeStarNotifications::NotificationRule
  {
    "Type" : "AWS::CodeStarNotifications::NotificationRule",
    "Properties" : {
        "DetailType" : String,
        "EventTypeIds" :  String, ... ,
        "Name" : String,
        "Resource" : String,
        "Status" : String,
        "Tags" : Json,
        "Targets" :  Target, ... 
      }
  }


snippet AWS::Cognito::IdentityPool
  {
    "Type" : "AWS::Cognito::IdentityPool",
    "Properties" : {
        "AllowUnauthenticatedIdentities" : Boolean,
        "CognitoEvents" : Json,
        "CognitoIdentityProviders" :  CognitoIdentityProvider, ... ,
        "CognitoStreams" : CognitoStreams,
        "DeveloperProviderName" : String,
        "IdentityPoolName" : String,
        "OpenIdConnectProviderARNs" :  String, ... ,
        "PushSync" : PushSync,
        "SamlProviderARNs" :  String, ... ,
        "SupportedLoginProviders" : Json
      }
  }


snippet AWS::Cognito::IdentityPoolRoleAttachment
  {
    "Type" : "AWS::Cognito::IdentityPoolRoleAttachment",
    "Properties" : {
        "IdentityPoolId" : String,
        "RoleMappings" : Json,
        "Roles" : Json
      }
  }


snippet AWS::Cognito::UserPool
  {
    "Type" : "AWS::Cognito::UserPool",
    "Properties" : {
        "AdminCreateUserConfig" : AdminCreateUserConfig,
        "AliasAttributes" :  String, ... ,
        "AutoVerifiedAttributes" :  String, ... ,
        "DeviceConfiguration" : DeviceConfiguration,
        "EmailConfiguration" : EmailConfiguration,
        "EmailVerificationMessage" : String,
        "EmailVerificationSubject" : String,
        "EnabledMfas" :  String, ... ,
        "LambdaConfig" : LambdaConfig,
        "MfaConfiguration" : String,
        "Policies" : Policies,
        "Schema" :  SchemaAttribute, ... ,
        "SmsAuthenticationMessage" : String,
        "SmsConfiguration" : SmsConfiguration,
        "SmsVerificationMessage" : String,
        "UsernameAttributes" :  String, ... ,
        "UserPoolAddOns" : UserPoolAddOns,
        "UserPoolName" : String,
        "UserPoolTags" : Json,
        "VerificationMessageTemplate" : VerificationMessageTemplate
      }
  }


snippet AWS::Cognito::UserPoolClient
  {
    "Type" : "AWS::Cognito::UserPoolClient",
    "Properties" : {
        "AllowedOAuthFlows" :  String, ... ,
        "AllowedOAuthFlowsUserPoolClient" : Boolean,
        "AllowedOAuthScopes" :  String, ... ,
        "AnalyticsConfiguration" : AnalyticsConfiguration,
        "CallbackURLs" :  String, ... ,
        "ClientName" : String,
        "DefaultRedirectURI" : String,
        "ExplicitAuthFlows" :  String, ... ,
        "GenerateSecret" : Boolean,
        "LogoutURLs" :  String, ... ,
        "ReadAttributes" :  String, ... ,
        "RefreshTokenValidity" : Double,
        "SupportedIdentityProviders" :  String, ... ,
        "UserPoolId" : String,
        "WriteAttributes" :  String, ... 
      }
  }


snippet AWS::Cognito::UserPoolDomain
  {
    "Type" : "AWS::Cognito::UserPoolDomain",
    "Properties" : {
        "CustomDomainConfig" : CustomDomainConfigType,
        "Domain" : String,
        "UserPoolId" : String
      }
  }


snippet AWS::Cognito::UserPoolGroup
  {
    "Type" : "AWS::Cognito::UserPoolGroup",
    "Properties" : {
        "Description" : String,
        "GroupName" : String,
        "Precedence" : Double,
        "RoleArn" : String,
        "UserPoolId" : String
      }
  }


snippet AWS::Cognito::UserPoolIdentityProvider
  {
    "Type" : "AWS::Cognito::UserPoolIdentityProvider",
    "Properties" : {
        "AttributeMapping" : Json,
        "IdpIdentifiers" :  String, ... ,
        "ProviderDetails" : Json,
        "ProviderName" : String,
        "ProviderType" : String,
        "UserPoolId" : String
      }
  }


snippet AWS::Cognito::UserPoolResourceServer
  {
    "Type" : "AWS::Cognito::UserPoolResourceServer",
    "Properties" : {
        "Identifier" : String,
        "Name" : String,
        "Scopes" :  ResourceServerScopeType, ... ,
        "UserPoolId" : String
      }
  }


snippet AWS::Cognito::UserPoolRiskConfigurationAttachment
  {
    "Type" : "AWS::Cognito::UserPoolRiskConfigurationAttachment",
    "Properties" : {
        "AccountTakeoverRiskConfiguration" : AccountTakeoverRiskConfigurationType,
        "ClientId" : String,
        "CompromisedCredentialsRiskConfiguration" : CompromisedCredentialsRiskConfigurationType,
        "RiskExceptionConfiguration" : RiskExceptionConfigurationType,
        "UserPoolId" : String
      }
  }


snippet AWS::Cognito::UserPoolUICustomizationAttachment
  {
    "Type" : "AWS::Cognito::UserPoolUICustomizationAttachment",
    "Properties" : {
        "ClientId" : String,
        "CSS" : String,
        "UserPoolId" : String
      }
  }


snippet AWS::Cognito::UserPoolUser
  {
    "Type" : "AWS::Cognito::UserPoolUser",
    "Properties" : {
        "DesiredDeliveryMediums" :  String, ... ,
        "ForceAliasCreation" : Boolean,
        "MessageAction" : String,
        "UserAttributes" :  AttributeType, ... ,
        "UserPoolId" : String,
        "Username" : String,
        "ValidationData" :  AttributeType, ... 
      }
  }


snippet AWS::Cognito::UserPoolUserToGroupAttachment
  {
    "Type" : "AWS::Cognito::UserPoolUserToGroupAttachment",
    "Properties" : {
        "GroupName" : String,
        "UserPoolId" : String,
        "Username" : String
      }
  }


snippet AWS::Config::AggregationAuthorization
  {
    "Type" : "AWS::Config::AggregationAuthorization",
    "Properties" : {
        "AuthorizedAccountId" : String,
        "AuthorizedAwsRegion" : String
      }
  }


snippet AWS::Config::ConfigRule
  {
    "Type" : "AWS::Config::ConfigRule",
    "Properties" : {
        "ConfigRuleName" : String,
        "Description" : String,
        "InputParameters" : Json,
        "MaximumExecutionFrequency" : String,
        "Scope" : Scope,
        "Source" : Source
      }
  }


snippet AWS::Config::ConfigurationAggregator
  {
    "Type" : "AWS::Config::ConfigurationAggregator",
    "Properties" : {
        "AccountAggregationSources" :  AccountAggregationSource, ... ,
        "ConfigurationAggregatorName" : String,
        "OrganizationAggregationSource" : OrganizationAggregationSource
      }
  }


snippet AWS::Config::ConfigurationRecorder
  {
    "Type" : "AWS::Config::ConfigurationRecorder",
    "Properties" : {
        "Name" : String,
        "RecordingGroup" : RecordingGroup,
        "RoleARN" : String
      }
  }


snippet AWS::Config::DeliveryChannel
  {
    "Type" : "AWS::Config::DeliveryChannel",
    "Properties" : {
        "ConfigSnapshotDeliveryProperties" : ConfigSnapshotDeliveryProperties,
        "Name" : String,
        "S3BucketName" : String,
        "S3KeyPrefix" : String,
        "SnsTopicARN" : String
      }
  }


snippet AWS::Config::OrganizationConfigRule
  {
    "Type" : "AWS::Config::OrganizationConfigRule",
    "Properties" : {
        "ExcludedAccounts" :  String, ... ,
        "OrganizationConfigRuleName" : String,
        "OrganizationCustomRuleMetadata" : OrganizationCustomRuleMetadata,
        "OrganizationManagedRuleMetadata" : OrganizationManagedRuleMetadata
      }
  }


snippet AWS::Config::RemediationConfiguration
  {
    "Type" : "AWS::Config::RemediationConfiguration",
    "Properties" : {
        "Automatic" : Boolean,
        "ConfigRuleName" : String,
        "ExecutionControls" : ExecutionControls,
        "MaximumAutomaticAttempts" : Integer,
        "Parameters" : Json,
        "ResourceType" : String,
        "RetryAttemptSeconds" : Integer,
        "TargetId" : String,
        "TargetType" : String,
        "TargetVersion" : String
      }
  }


snippet AWS::DataPipeline::Pipeline
  {
    "Type" : "AWS::DataPipeline::Pipeline",
    "Properties" : {
        "Activate" : Boolean,
        "Description" : String,
        "Name" : String,
        "ParameterObjects" :  ParameterObject, ... ,
        "ParameterValues" :  ParameterValue, ... ,
        "PipelineObjects" :  PipelineObject, ... ,
        "PipelineTags" :  PipelineTag, ... 
      }
  }


snippet AWS::DAX::Cluster
  {
    "Type" : "AWS::DAX::Cluster",
    "Properties" : {
        "AvailabilityZones" :  String, ... ,
        "ClusterName" : String,
        "Description" : String,
        "IAMRoleARN" : String,
        "NodeType" : String,
        "NotificationTopicARN" : String,
        "ParameterGroupName" : String,
        "PreferredMaintenanceWindow" : String,
        "ReplicationFactor" : Integer,
        "SSESpecification" : SSESpecification,
        "SecurityGroupIds" :  String, ... ,
        "SubnetGroupName" : String,
        "Tags" : Json
      }
  }


snippet AWS::DAX::ParameterGroup
  {
    "Type" : "AWS::DAX::ParameterGroup",
    "Properties" : {
        "Description" : String,
        "ParameterGroupName" : String,
        "ParameterNameValues" : Json
      }
  }


snippet AWS::DAX::SubnetGroup
  {
    "Type" : "AWS::DAX::SubnetGroup",
    "Properties" : {
        "Description" : String,
        "SubnetGroupName" : String,
        "SubnetIds" :  String, ... 
      }
  }


snippet AWS::DirectoryService::MicrosoftAD
  {
    "Type" : "AWS::DirectoryService::MicrosoftAD",
    "Properties" : {
        "CreateAlias" : Boolean,
        "Edition" : String,
        "EnableSso" : Boolean,
        "Name" : String,
        "Password" : String,
        "ShortName" : String,
        "VpcSettings" : VpcSettings
      }
  }


snippet AWS::DirectoryService::SimpleAD
  {
    "Type" : "AWS::DirectoryService::SimpleAD",
    "Properties" : {
        "CreateAlias" : Boolean,
        "Description" : String,
        "EnableSso" : Boolean,
        "Name" : String,
        "Password" : String,
        "ShortName" : String,
        "Size" : String,
        "VpcSettings" : VpcSettings
      }
  }


snippet AWS::DLM::LifecyclePolicy
  {
    "Type" : "AWS::DLM::LifecyclePolicy",
    "Properties" : {
        "Description" : String,
        "ExecutionRoleArn" : String,
        "PolicyDetails" : PolicyDetails,
        "State" : String
      }
  }


snippet AWS::DMS::Certificate
  {
    "Type" : "AWS::DMS::Certificate",
    "Properties" : {
        "CertificateIdentifier" : String,
        "CertificatePem" : String,
        "CertificateWallet" : String
      }
  }


snippet AWS::DMS::Endpoint
  {
    "Type" : "AWS::DMS::Endpoint",
    "Properties" : {
        "CertificateArn" : String,
        "DatabaseName" : String,
        "DynamoDbSettings" : DynamoDbSettings,
        "ElasticsearchSettings" : ElasticsearchSettings,
        "EndpointIdentifier" : String,
        "EndpointType" : String,
        "EngineName" : String,
        "ExtraConnectionAttributes" : String,
        "KinesisSettings" : KinesisSettings,
        "KmsKeyId" : String,
        "MongoDbSettings" : MongoDbSettings,
        "Password" : String,
        "Port" : Integer,
        "S3Settings" : S3Settings,
        "ServerName" : String,
        "SslMode" : String,
        "Tags" :  Tag, ... ,
        "Username" : String
      }
  }


snippet AWS::DMS::EventSubscription
  {
    "Type" : "AWS::DMS::EventSubscription",
    "Properties" : {
        "Enabled" : Boolean,
        "EventCategories" :  String, ... ,
        "SnsTopicArn" : String,
        "SourceIds" :  String, ... ,
        "SourceType" : String,
        "SubscriptionName" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::DMS::ReplicationInstance
  {
    "Type" : "AWS::DMS::ReplicationInstance",
    "Properties" : {
        "AllocatedStorage" : Integer,
        "AllowMajorVersionUpgrade" : Boolean,
        "AutoMinorVersionUpgrade" : Boolean,
        "AvailabilityZone" : String,
        "EngineVersion" : String,
        "KmsKeyId" : String,
        "MultiAZ" : Boolean,
        "PreferredMaintenanceWindow" : String,
        "PubliclyAccessible" : Boolean,
        "ReplicationInstanceClass" : String,
        "ReplicationInstanceIdentifier" : String,
        "ReplicationSubnetGroupIdentifier" : String,
        "Tags" :  Tag, ... ,
        "VpcSecurityGroupIds" :  String, ... 
      }
  }


snippet AWS::DMS::ReplicationSubnetGroup
  {
    "Type" : "AWS::DMS::ReplicationSubnetGroup",
    "Properties" : {
        "ReplicationSubnetGroupDescription" : String,
        "ReplicationSubnetGroupIdentifier" : String,
        "SubnetIds" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::DMS::ReplicationTask
  {
    "Type" : "AWS::DMS::ReplicationTask",
    "Properties" : {
        "CdcStartPosition" : String,
        "CdcStartTime" : Double,
        "CdcStopPosition" : String,
        "MigrationType" : String,
        "ReplicationInstanceArn" : String,
        "ReplicationTaskIdentifier" : String,
        "ReplicationTaskSettings" : String,
        "SourceEndpointArn" : String,
        "TableMappings" : String,
        "Tags" :  Tag, ... ,
        "TargetEndpointArn" : String
      }
  }


snippet AWS::DocDB::DBCluster
  {
    "Type" : "AWS::DocDB::DBCluster",
    "Properties" : {
        "AvailabilityZones" :  String, ... ,
        "BackupRetentionPeriod" : Integer,
        "DBClusterIdentifier" : String,
        "DBClusterParameterGroupName" : String,
        "DBSubnetGroupName" : String,
        "EnableCloudwatchLogsExports" :  String, ... ,
        "EngineVersion" : String,
        "KmsKeyId" : String,
        "MasterUsername" : String,
        "MasterUserPassword" : String,
        "Port" : Integer,
        "PreferredBackupWindow" : String,
        "PreferredMaintenanceWindow" : String,
        "SnapshotIdentifier" : String,
        "StorageEncrypted" : Boolean,
        "Tags" :  Tag, ... ,
        "VpcSecurityGroupIds" :  String, ... 
      }
  }


snippet AWS::DocDB::DBClusterParameterGroup
  {
    "Type" : "AWS::DocDB::DBClusterParameterGroup",
    "Properties" : {
        "Description" : String,
        "Family" : String,
        "Name" : String,
        "Parameters" : Json,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::DocDB::DBInstance
  {
    "Type" : "AWS::DocDB::DBInstance",
    "Properties" : {
        "AutoMinorVersionUpgrade" : Boolean,
        "AvailabilityZone" : String,
        "DBClusterIdentifier" : String,
        "DBInstanceClass" : String,
        "DBInstanceIdentifier" : String,
        "PreferredMaintenanceWindow" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::DocDB::DBSubnetGroup
  {
    "Type" : "AWS::DocDB::DBSubnetGroup",
    "Properties" : {
        "DBSubnetGroupDescription" : String,
        "DBSubnetGroupName" : String,
        "SubnetIds" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::DynamoDB::Table
  {
    "Type" : "AWS::DynamoDB::Table",
    "Properties" : {
        "AttributeDefinitions" :  AttributeDefinition, ... ,
        "BillingMode" : String,
        "GlobalSecondaryIndexes" :  GlobalSecondaryIndex, ... ,
        "KeySchema" :  KeySchema, ... ,
        "LocalSecondaryIndexes" :  LocalSecondaryIndex, ... ,
        "PointInTimeRecoverySpecification" : PointInTimeRecoverySpecification,
        "ProvisionedThroughput" : ProvisionedThroughput,
        "SSESpecification" : SSESpecification,
        "StreamSpecification" : StreamSpecification,
        "TableName" : String,
        "Tags" :  Tag, ... ,
        "TimeToLiveSpecification" : TimeToLiveSpecification
      }
  }


snippet AWS::EC2::CapacityReservation
  {
    "Type" : "AWS::EC2::CapacityReservation",
    "Properties" : {
        "AvailabilityZone" : String,
        "EbsOptimized" : Boolean,
        "EndDate" : String,
        "EndDateType" : String,
        "EphemeralStorage" : Boolean,
        "InstanceCount" : Integer,
        "InstanceMatchCriteria" : String,
        "InstancePlatform" : String,
        "InstanceType" : String,
        "TagSpecifications" :  TagSpecification, ... ,
        "Tenancy" : String
      }
  }


snippet AWS::EC2::ClientVpnAuthorizationRule
  {
    "Type" : "AWS::EC2::ClientVpnAuthorizationRule",
    "Properties" : {
        "AccessGroupId" : String,
        "AuthorizeAllGroups" : Boolean,
        "ClientVpnEndpointId" : String,
        "Description" : String,
        "TargetNetworkCidr" : String
      }
  }


snippet AWS::EC2::ClientVpnEndpoint
  {
    "Type" : "AWS::EC2::ClientVpnEndpoint",
    "Properties" : {
        "AuthenticationOptions" :  ClientAuthenticationRequest, ... ,
        "ClientCidrBlock" : String,
        "ConnectionLogOptions" : ConnectionLogOptions,
        "Description" : String,
        "DnsServers" :  String, ... ,
        "ServerCertificateArn" : String,
        "TagSpecifications" :  TagSpecification, ... ,
        "TransportProtocol" : String
      }
  }


snippet AWS::EC2::ClientVpnRoute
  {
    "Type" : "AWS::EC2::ClientVpnRoute",
    "Properties" : {
        "ClientVpnEndpointId" : String,
        "Description" : String,
        "DestinationCidrBlock" : String,
        "TargetVpcSubnetId" : String
      }
  }


snippet AWS::EC2::ClientVpnTargetNetworkAssociation
  {
    "Type" : "AWS::EC2::ClientVpnTargetNetworkAssociation",
    "Properties" : {
        "ClientVpnEndpointId" : String,
        "SubnetId" : String
      }
  }


snippet AWS::EC2::CustomerGateway
  {
    "Type" : "AWS::EC2::CustomerGateway",
    "Properties" : {
        "BgpAsn" : Integer,
        "IpAddress" : String,
        "Tags" :  Tag, ... ,
        "Type" : String
      }
  }


snippet AWS::EC2::DHCPOptions
  {
    "Type" : "AWS::EC2::DHCPOptions",
    "Properties" : {
        "DomainName" : String,
        "DomainNameServers" :  String, ... ,
        "NetbiosNameServers" :  String, ... ,
        "NetbiosNodeType" : Integer,
        "NtpServers" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::EC2::EC2Fleet
  {
    "Type" : "AWS::EC2::EC2Fleet",
    "Properties" : {
        "ExcessCapacityTerminationPolicy" : String,
        "LaunchTemplateConfigs" :  FleetLaunchTemplateConfigRequest, ... ,
        "OnDemandOptions" : OnDemandOptionsRequest,
        "ReplaceUnhealthyInstances" : Boolean,
        "SpotOptions" : SpotOptionsRequest,
        "TagSpecifications" :  TagSpecification, ... ,
        "TargetCapacitySpecification" : TargetCapacitySpecificationRequest,
        "TerminateInstancesWithExpiration" : Boolean,
        "Type" : String,
        "ValidFrom" : String,
        "ValidUntil" : String
      }
  }


snippet AWS::EC2::EgressOnlyInternetGateway
  {
    "Type" : "AWS::EC2::EgressOnlyInternetGateway",
    "Properties" : {
        "VpcId" : String
      }
  }


snippet AWS::EC2::FlowLog
  {
    "Type" : "AWS::EC2::FlowLog",
    "Properties" : {
        "DeliverLogsPermissionArn" : String,
        "LogDestination" : String,
        "LogDestinationType" : String,
        "LogGroupName" : String,
        "ResourceId" : String,
        "ResourceType" : String,
        "TrafficType" : String
      }
  }


snippet AWS::EC2::Host
  {
    "Type" : "AWS::EC2::Host",
    "Properties" : {
        "AutoPlacement" : String,
        "AvailabilityZone" : String,
        "HostRecovery" : String,
        "InstanceType" : String
      }
  }


snippet AWS::EC2::InternetGateway
  {
    "Type" : "AWS::EC2::InternetGateway",
    "Properties" : {
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::EC2::LaunchTemplate
  {
    "Type" : "AWS::EC2::LaunchTemplate",
    "Properties" : {
        "LaunchTemplateData" : LaunchTemplateData,
        "LaunchTemplateName" : String
      }
  }


snippet AWS::EC2::NatGateway
  {
    "Type" : "AWS::EC2::NatGateway",
    "Properties" : {
        "AllocationId" : String,
        "SubnetId" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::EC2::NetworkAclEntry
  {
    "Type" : "AWS::EC2::NetworkAclEntry",
    "Properties" : {
        "CidrBlock" : String,
        "Egress" : Boolean,
        "Icmp" : Icmp,
        "Ipv6CidrBlock" : String,
        "NetworkAclId" : String,
        "PortRange" : PortRange,
        "Protocol" : Integer,
        "RuleAction" : String,
        "RuleNumber" : Integer
      }
  }


snippet AWS::EC2::NetworkAcl
  {
    "Type" : "AWS::EC2::NetworkAcl",
    "Properties" : {
        "Tags" :  Tag, ... ,
        "VpcId" : String
      }
  }


snippet AWS::EC2::NetworkInterfaceAttachment
  {
    "Type" : "AWS::EC2::NetworkInterfaceAttachment",
    "Properties" : {
        "DeleteOnTermination" : Boolean,
        "DeviceIndex" : String,
        "InstanceId" : String,
        "NetworkInterfaceId" : String
      }
  }


snippet AWS::EC2::NetworkInterface
  {
    "Type" : "AWS::EC2::NetworkInterface",
    "Properties" : {
        "Description" : String,
        "GroupSet" :  String, ... ,
        "InterfaceType" : String,
        "Ipv6AddressCount" : Integer,
        "Ipv6Addresses" : InstanceIpv6Address,
        "PrivateIpAddress" : String,
        "PrivateIpAddresses" :  PrivateIpAddressSpecification, ... ,
        "SecondaryPrivateIpAddressCount" : Integer,
        "SourceDestCheck" : Boolean,
        "SubnetId" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::EC2::NetworkInterfacePermission
  {
    "Type" : "AWS::EC2::NetworkInterfacePermission",
    "Properties" : {
        "AwsAccountId" : String,
        "NetworkInterfaceId" : String,
        "Permission" : String
      }
  }


snippet AWS::EC2::PlacementGroup
  {
    "Type" : "AWS::EC2::PlacementGroup",
    "Properties" : {
        "Strategy" : String
      }
  }


snippet AWS::EC2::RouteTable
  {
    "Type" : "AWS::EC2::RouteTable",
    "Properties" : {
        "Tags" :  Tag, ... ,
        "VpcId" : String
      }
  }


snippet AWS::EC2::Route
  {
    "Type" : "AWS::EC2::Route",
    "Properties" : {
        "DestinationCidrBlock" : String,
        "DestinationIpv6CidrBlock" : String,
        "EgressOnlyInternetGatewayId" : String,
        "GatewayId" : String,
        "InstanceId" : String,
        "NatGatewayId" : String,
        "NetworkInterfaceId" : String,
        "RouteTableId" : String,
        "TransitGatewayId" : String,
        "VpcPeeringConnectionId" : String
      }
  }


snippet AWS::EC2::SecurityGroupEgress
  {
    "Type" : "AWS::EC2::SecurityGroupEgress",
    "Properties" : {
        "CidrIp" : String,
        "CidrIpv6" : String,
        "Description" : String,
        "DestinationPrefixListId" : String,
        "DestinationSecurityGroupId" : String,
        "FromPort" : Integer,
        "GroupId" : String,
        "IpProtocol" : String,
        "ToPort" : Integer
      }
  }


snippet AWS::EC2::SpotFleet
  {
    "Type" : "AWS::EC2::SpotFleet",
    "Properties" : {
        "SpotFleetRequestConfigData" : SpotFleetRequestConfigData
      }
  }


snippet AWS::EC2::SubnetNetworkAclAssociation
  {
    "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
    "Properties" : {
        "NetworkAclId" : String,
        "SubnetId" : String
      }
  }


snippet AWS::EC2::SubnetRouteTableAssociation
  {
    "Type" : "AWS::EC2::SubnetRouteTableAssociation",
    "Properties" : {
        "RouteTableId" : String,
        "SubnetId" : String
      }
  }


snippet AWS::EC2::Subnet
  {
    "Type" : "AWS::EC2::Subnet",
    "Properties" : {
        "AssignIpv6AddressOnCreation" : Boolean,
        "AvailabilityZone" : String,
        "CidrBlock" : String,
        "Ipv6CidrBlock" : String,
        "MapPublicIpOnLaunch" : Boolean,
        "Tags" :  Tag, ... ,
        "VpcId" : String
      }
  }


snippet AWS::EC2::SubnetCidrBlock
  {
    "Type" : "AWS::EC2::SubnetCidrBlock",
    "Properties" : {
        "Ipv6CidrBlock" : String,
        "SubnetId" : String
      }
  }


snippet AWS::EC2::TrafficMirrorFilter
  {
    "Type" : "AWS::EC2::TrafficMirrorFilter",
    "Properties" : {
        "Description" : String,
        "NetworkServices" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::EC2::TrafficMirrorFilterRule
  {
    "Type" : "AWS::EC2::TrafficMirrorFilterRule",
    "Properties" : {
        "Description" : String,
        "DestinationCidrBlock" : String,
        "DestinationPortRange" : TrafficMirrorPortRangeRequest,
        "Protocol" : Integer,
        "RuleAction" : String,
        "RuleNumber" : Integer,
        "SourceCidrBlock" : String,
        "SourcePortRange" : TrafficMirrorPortRangeRequest,
        "TrafficDirection" : String,
        "TrafficMirrorFilterId" : String
      }
  }


snippet AWS::EC2::TrafficMirrorSession
  {
    "Type" : "AWS::EC2::TrafficMirrorSession",
    "Properties" : {
        "Description" : String,
        "NetworkInterfaceId" : String,
        "PacketLength" : Integer,
        "SessionNumber" : Integer,
        "Tags" :  Tag, ... ,
        "TrafficMirrorFilterId" : String,
        "TrafficMirrorTargetId" : String,
        "VirtualNetworkId" : Integer
      }
  }


snippet AWS::EC2::TrafficMirrorTarget
  {
    "Type" : "AWS::EC2::TrafficMirrorTarget",
    "Properties" : {
        "Description" : String,
        "NetworkInterfaceId" : String,
        "NetworkLoadBalancerArn" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::EC2::TransitGateway
  {
    "Type" : "AWS::EC2::TransitGateway",
    "Properties" : {
        "AmazonSideAsn" : Integer,
        "AutoAcceptSharedAttachments" : String,
        "DefaultRouteTableAssociation" : String,
        "DefaultRouteTablePropagation" : String,
        "Description" : String,
        "DnsSupport" : String,
        "Tags" :  Tag, ... ,
        "VpnEcmpSupport" : String
      }
  }


snippet AWS::EC2::TransitGatewayAttachment
  {
    "Type" : "AWS::EC2::TransitGatewayAttachment",
    "Properties" : {
        "SubnetIds" :  String, ... ,
        "Tags" :  Tag, ... ,
        "TransitGatewayId" : String,
        "VpcId" : String
      }
  }


snippet AWS::EC2::TransitGatewayRoute
  {
    "Type" : "AWS::EC2::TransitGatewayRoute",
    "Properties" : {
        "Blackhole" : Boolean,
        "DestinationCidrBlock" : String,
        "TransitGatewayAttachmentId" : String,
        "TransitGatewayRouteTableId" : String
      }
  }


snippet AWS::EC2::TransitGatewayRouteTable
  {
    "Type" : "AWS::EC2::TransitGatewayRouteTable",
    "Properties" : {
        "Tags" :  Tag, ... ,
        "TransitGatewayId" : String
      }
  }


snippet AWS::EC2::TransitGatewayRouteTableAssociation
  {
    "Type" : "AWS::EC2::TransitGatewayRouteTableAssociation",
    "Properties" : {
        "TransitGatewayAttachmentId" : String,
        "TransitGatewayRouteTableId" : String
      }
  }


snippet AWS::EC2::TransitGatewayRouteTablePropagation
  {
    "Type" : "AWS::EC2::TransitGatewayRouteTablePropagation",
    "Properties" : {
        "TransitGatewayAttachmentId" : String,
        "TransitGatewayRouteTableId" : String
      }
  }


snippet AWS::EC2::VPCDHCPOptionsAssociation
  {
    "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
    "Properties" : {
        "DhcpOptionsId" : String,
        "VpcId" : String
      }
  }


snippet AWS::EC2::VPCGatewayAttachment
  {
    "Type" : "AWS::EC2::VPCGatewayAttachment",
    "Properties" : {
        "InternetGatewayId" : String,
        "VpcId" : String,
        "VpnGatewayId" : String
      }
  }


snippet AWS::EC2::VPC
  {
    "Type" : "AWS::EC2::VPC",
    "Properties" : {
        "CidrBlock" : String,
        "EnableDnsHostnames" : Boolean,
        "EnableDnsSupport" : Boolean,
        "InstanceTenancy" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::EC2::VPCCidrBlock
  {
    "Type" : "AWS::EC2::VPCCidrBlock",
    "Properties" : {
        "AmazonProvidedIpv6CidrBlock" : Boolean,
        "CidrBlock" : String,
        "VpcId" : String
      }
  }


snippet AWS::EC2::VPCEndpoint
  {
    "Type" : "AWS::EC2::VPCEndpoint",
    "Properties" : {
        "PolicyDocument" : Json,
        "PrivateDnsEnabled" : Boolean,
        "RouteTableIds" :  String, ... ,
        "SecurityGroupIds" :  String, ... ,
        "ServiceName" : String,
        "SubnetIds" :  String, ... ,
        "VpcEndpointType" : String,
        "VpcId" : String
      }
  }


snippet AWS::EC2::VPCEndpointConnectionNotification
  {
    "Type" : "AWS::EC2::VPCEndpointConnectionNotification",
    "Properties" : {
        "ConnectionEvents" :  String, ... ,
        "ConnectionNotificationArn" : String,
        "ServiceId" : String,
        "VPCEndpointId" : String
      }
  }


snippet AWS::EC2::VPCEndpointService
  {
    "Type" : "AWS::EC2::VPCEndpointService",
    "Properties" : {
        "AcceptanceRequired" : Boolean,
        "NetworkLoadBalancerArns" :  String, ... 
      }
  }


snippet AWS::EC2::VPCEndpointServicePermissions
  {
    "Type" : "AWS::EC2::VPCEndpointServicePermissions",
    "Properties" : {
        "AllowedPrincipals" :  String, ... ,
        "ServiceId" : String
      }
  }


snippet AWS::EC2::VPCPeeringConnection
  {
    "Type" : "AWS::EC2::VPCPeeringConnection",
    "Properties" : {
        "PeerOwnerId" : String,
        "PeerRegion" : String,
        "PeerRoleArn" : String,
        "PeerVpcId" : String,
        "Tags" :  Tag, ... ,
        "VpcId" : String
      }
  }


snippet AWS::EC2::VPNConnectionRoute
  {
    "Type" : "AWS::EC2::VPNConnectionRoute",
    "Properties" : {
        "DestinationCidrBlock" : String,
        "VpnConnectionId" : String
      }
  }


snippet AWS::EC2::VPNConnection
  {
    "Type" : "AWS::EC2::VPNConnection",
    "Properties" : {
        "CustomerGatewayId" : String,
        "StaticRoutesOnly" : Boolean,
        "Tags" :  Tag, ... ,
        "TransitGatewayId" : String,
        "Type" : String,
        "VpnGatewayId" : String,
        "VpnTunnelOptionsSpecifications" :  VpnTunnelOptionsSpecification, ... 
      }
  }


snippet AWS::EC2::VPNGateway
  {
    "Type" : "AWS::EC2::VPNGateway",
    "Properties" : {
        "AmazonSideAsn" : Long,
        "Tags" :  Tag, ... ,
        "Type" : String
      }
  }


snippet AWS::EC2::VPNGatewayRoutePropagation
  {
    "Type" : "AWS::EC2::VPNGatewayRoutePropagation",
    "Properties" : {
        "RouteTableIds" :  String, ... ,
        "VpnGatewayId" : String
      }
  }


snippet AWS::ECR::Repository
  {
    "Type" : "AWS::ECR::Repository",
    "Properties" : {
        "LifecyclePolicy" : LifecyclePolicy,
        "RepositoryName" : String,
        "RepositoryPolicyText" : Json,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::ECS::Cluster
  {
    "Type" : "AWS::ECS::Cluster",
    "Properties" : {
        "ClusterName" : String
      }
  }


snippet AWS::ECS::Service
  {
    "Type" : "AWS::ECS::Service",
    "Properties" : {
        "Cluster" : String,
        "DeploymentConfiguration" : DeploymentConfiguration,
        "DesiredCount" : Integer,
        "HealthCheckGracePeriodSeconds" : Integer,
        "LaunchType" : String,
        "LoadBalancers" :  LoadBalancer, ... ,
        "NetworkConfiguration" : NetworkConfiguration,
        "PlacementConstraints" :  PlacementConstraint, ... ,
        "PlacementStrategies" :  PlacementStrategy, ... ,
        "PlatformVersion" : String,
        "Role" : String,
        "SchedulingStrategy" : String,
        "ServiceName" : String,
        "ServiceRegistries" :  ServiceRegistry, ... ,
        "TaskDefinition" : String
      }
  }


snippet AWS::ECS::TaskDefinition
  {
    "Type" : "AWS::ECS::TaskDefinition",
    "Properties" : {
        "ContainerDefinitions" :  ContainerDefinition, ... ,
        "Cpu" : String,
        "ExecutionRoleArn" : String,
        "Family" : String,
        "InferenceAccelerators" :  InferenceAccelerator, ... ,
        "IpcMode" : String,
        "Memory" : String,
        "NetworkMode" : String,
        "PidMode" : String,
        "PlacementConstraints" :  TaskDefinitionPlacementConstraint, ... ,
        "ProxyConfiguration" : ProxyConfiguration,
        "RequiresCompatibilities" :  String, ... ,
        "Tags" :  Tag, ... ,
        "TaskRoleArn" : String,
        "Volumes" :  Volume, ... 
      }
  }


snippet AWS::EFS::FileSystem
  {
    "Type" : "AWS::EFS::FileSystem",
    "Properties" : {
        "Encrypted" : Boolean,
        "FileSystemTags" :  ElasticFileSystemTag, ... ,
        "KmsKeyId" : String,
        "PerformanceMode" : String,
        "ProvisionedThroughputInMibps" : Double,
        "ThroughputMode" : String
      }
  }


snippet AWS::EFS::MountTarget
  {
    "Type" : "AWS::EFS::MountTarget",
    "Properties" : {
        "FileSystemId" : String,
        "IpAddress" : String,
        "SecurityGroups" :  String, ... ,
        "SubnetId" : String
      }
  }


snippet AWS::EKS::Cluster
  {
    "Type" : "AWS::EKS::Cluster",
    "Properties" : {
        "Name" : String,
        "ResourcesVpcConfig" : ResourcesVpcConfig,
        "RoleArn" : String,
        "Version" : String
      }
  }


snippet AWS::ElastiCache::ReplicationGroup
  {
    "Type" : "AWS::ElastiCache::ReplicationGroup",
    "Properties" : {
        "AtRestEncryptionEnabled" : Boolean,
        "AuthToken" : String,
        "AutomaticFailoverEnabled" : Boolean,
        "AutoMinorVersionUpgrade" : Boolean,
        "CacheNodeType" : String,
        "CacheParameterGroupName" : String,
        "CacheSecurityGroupNames" :  String, ... ,
        "CacheSubnetGroupName" : String,
        "Engine" : String,
        "EngineVersion" : String,
        "KmsKeyId" : String,
        "NodeGroupConfiguration" :  NodeGroupConfiguration, ... ,
        "NotificationTopicArn" : String,
        "NumCacheClusters" : Integer,
        "NumNodeGroups" : Integer,
        "Port" : Integer,
        "PreferredCacheClusterAZs" :  String, ... ,
        "PreferredMaintenanceWindow" : String,
        "PrimaryClusterId" : String,
        "ReplicasPerNodeGroup" : Integer,
        "ReplicationGroupDescription" : String,
        "ReplicationGroupId" : String,
        "SecurityGroupIds" :  String, ... ,
        "SnapshotArns" :  String, ... ,
        "SnapshotName" : String,
        "SnapshotRetentionLimit" : Integer,
        "SnapshottingClusterId" : String,
        "SnapshotWindow" : String,
        "Tags" :  Tag, ... ,
        "TransitEncryptionEnabled" : Boolean
      }
  }


snippet AWS::ElasticBeanstalk::ConfigurationTemplate
  {
    "Type" : "AWS::ElasticBeanstalk::ConfigurationTemplate",
    "Properties" : {
        "ApplicationName" : String,
        "Description" : String,
        "EnvironmentId" : String,
        "OptionSettings" :  ConfigurationOptionSetting, ... ,
        "PlatformArn" : String,
        "SolutionStackName" : String,
        "SourceConfiguration" : SourceConfiguration
      }
  }


snippet AWS::ElasticLoadBalancingV2::Listener
  {
    "Type" : "AWS::ElasticLoadBalancingV2::Listener",
    "Properties" : {
        "Certificates" :  Certificate, ... ,
        "DefaultActions" :  Action, ... ,
        "LoadBalancerArn" : String,
        "Port" : Integer,
        "Protocol" : String,
        "SslPolicy" : String
      }
  }


snippet AWS::ElasticLoadBalancingV2::ListenerCertificate
  {
    "Type" : "AWS::ElasticLoadBalancingV2::ListenerCertificate",
    "Properties" : {
        "Certificates" :  Certificate, ... ,
        "ListenerArn" : String
      }
  }


snippet AWS::ElasticLoadBalancingV2::ListenerRule
  {
    "Type" : "AWS::ElasticLoadBalancingV2::ListenerRule",
    "Properties" : {
        "Actions" :  Action, ... ,
        "Conditions" :  RuleCondition, ... ,
        "ListenerArn" : String,
        "Priority" : Integer
      }
  }


snippet AWS::ElasticLoadBalancingV2::LoadBalancer
  {
    "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
    "Properties" : {
        "IpAddressType" : String,
        "LoadBalancerAttributes" :  LoadBalancerAttribute, ... ,
        "Name" : String,
        "Scheme" : String,
        "SecurityGroups" :  String, ... ,
        "SubnetMappings" :  SubnetMapping, ... ,
        "Subnets" :  String, ... ,
        "Tags" :  Tag, ... ,
        "Type" : String
      }
  }


snippet AWS::ElasticLoadBalancingV2::TargetGroup
  {
    "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
    "Properties" : {
        "HealthCheckEnabled" : Boolean,
        "HealthCheckIntervalSeconds" : Integer,
        "HealthCheckPath" : String,
        "HealthCheckPort" : String,
        "HealthCheckProtocol" : String,
        "HealthCheckTimeoutSeconds" : Integer,
        "HealthyThresholdCount" : Integer,
        "Matcher" : Matcher,
        "Name" : String,
        "Port" : Integer,
        "Protocol" : String,
        "Tags" :  Tag, ... ,
        "TargetGroupAttributes" :  TargetGroupAttribute, ... ,
        "TargetType" : String,
        "Targets" :  TargetDescription, ... ,
        "UnhealthyThresholdCount" : Integer,
        "VpcId" : String
      }
  }


snippet AWS::EMR::Cluster
  {
    "Type" : "AWS::EMR::Cluster",
    "Properties" : {
        "AdditionalInfo" : Json,
        "Applications" :  Application, ... ,
        "AutoScalingRole" : String,
        "BootstrapActions" :  BootstrapActionConfig, ... ,
        "Configurations" :  Configuration, ... ,
        "CustomAmiId" : String,
        "EbsRootVolumeSize" : Integer,
        "Instances" : JobFlowInstancesConfig,
        "JobFlowRole" : String,
        "KerberosAttributes" : KerberosAttributes,
        "LogUri" : String,
        "Name" : String,
        "ReleaseLabel" : String,
        "ScaleDownBehavior" : String,
        "SecurityConfiguration" : String,
        "ServiceRole" : String,
        "Steps" :  StepConfig, ... ,
        "Tags" :  Tag, ... ,
        "VisibleToAllUsers" : Boolean
      }
  }


snippet AWS::EMR::InstanceFleetConfig
  {
    "Type" : "AWS::EMR::InstanceFleetConfig",
    "Properties" : {
        "ClusterId" : String,
        "InstanceFleetType" : String,
        "InstanceTypeConfigs" :  InstanceTypeConfig, ... ,
        "LaunchSpecifications" : InstanceFleetProvisioningSpecifications,
        "Name" : String,
        "TargetOnDemandCapacity" : Integer,
        "TargetSpotCapacity" : Integer
      }
  }


snippet AWS::Elasticsearch::Domain
  {
    "Type" : "AWS::Elasticsearch::Domain",
    "Properties" : {
        "AccessPolicies" : Json,
        "AdvancedOptions" : {Key : Value, ...},
        "DomainName" : String,
        "EBSOptions" : EBSOptions,
        "ElasticsearchClusterConfig" : ElasticsearchClusterConfig,
        "ElasticsearchVersion" : String,
        "EncryptionAtRestOptions" : EncryptionAtRestOptions,
        "LogPublishingOptions" : {Key : Value, ...},
        "NodeToNodeEncryptionOptions" : NodeToNodeEncryptionOptions,
        "SnapshotOptions" : SnapshotOptions,
        "Tags" :  Tag, ... ,
        "VPCOptions" : VPCOptions
      }
  }


snippet AWS::EMR::InstanceGroupConfig
  {
    "Type" : "AWS::EMR::InstanceGroupConfig",
    "Properties" : {
        "AutoScalingPolicy" : AutoScalingPolicy,
        "BidPrice" : String,
        "Configurations" :  Configuration, ... ,
        "EbsConfiguration" : EbsConfiguration,
        "InstanceCount" : Integer,
        "InstanceRole" : String,
        "InstanceType" : String,
        "JobFlowId" : String,
        "Market" : String,
        "Name" : String
      }
  }


snippet AWS::EMR::SecurityConfiguration
  {
    "Type" : "AWS::EMR::SecurityConfiguration",
    "Properties" : {
        "Name" : String,
        "SecurityConfiguration" : Json
      }
  }


snippet AWS::EMR::Step
  {
    "Type" : "AWS::EMR::Step",
    "Properties" : {
        "ActionOnFailure" : String,
        "HadoopJarStep" : HadoopJarStepConfig,
        "JobFlowId" : String,
        "Name" : String
      }
  }


snippet AWS::Events::EventBus
  {
    "Type" : "AWS::Events::EventBus",
    "Properties" : {
        "EventSourceName" : String,
        "Name" : String
      }
  }


snippet AWS::Events::EventBusPolicy
  {
    "Type" : "AWS::Events::EventBusPolicy",
    "Properties" : {
        "Action" : String,
        "Condition" : Condition,
        "Principal" : String,
        "StatementId" : String
      }
  }


snippet AWS::Events::Rule
  {
    "Type" : "AWS::Events::Rule",
    "Properties" : {
        "Description" : String,
        "EventPattern" : Json,
        "Name" : String,
        "RoleArn" : String,
        "ScheduleExpression" : String,
        "State" : String,
        "Targets" :  Target, ... 
      }
  }


snippet AWS::EventSchemas::Discoverer
  {
    "Type" : "AWS::EventSchemas::Discoverer",
    "Properties" : {
        "Description" : String,
        "SourceArn" : String,
        "Tags" :  TagsEntry, ... 
      }
  }


snippet AWS::EventSchemas::Registry
  {
    "Type" : "AWS::EventSchemas::Registry",
    "Properties" : {
        "Description" : String,
        "RegistryName" : String,
        "Tags" :  TagsEntry, ... 
      }
  }


snippet AWS::EventSchemas::Schema
  {
    "Type" : "AWS::EventSchemas::Schema",
    "Properties" : {
        "Content" : String,
        "Description" : String,
        "RegistryName" : String,
        "SchemaName" : String,
        "Tags" :  TagsEntry, ... ,
        "Type" : String
      }
  }


snippet AWS::FSx::FileSystem
  {
    "Type" : "AWS::FSx::FileSystem",
    "Properties" : {
        "BackupId" : String,
        "FileSystemType" : String,
        "KmsKeyId" : String,
        "LustreConfiguration" : LustreConfiguration,
        "SecurityGroupIds" :  String, ... ,
        "StorageCapacity" : Integer,
        "SubnetIds" :  String, ... ,
        "Tags" :  Tag, ... ,
        "WindowsConfiguration" : WindowsConfiguration
      }
  }


snippet AWS::GameLift::Alias
  {
    "Type" : "AWS::GameLift::Alias",
    "Properties" : {
        "Description" : String,
        "Name" : String,
        "RoutingStrategy" : RoutingStrategy
      }
  }


snippet AWS::GameLift::Build
  {
    "Type" : "AWS::GameLift::Build",
    "Properties" : {
        "Name" : String,
        "StorageLocation" : S3Location,
        "Version" : String
      }
  }


snippet AWS::GameLift::Fleet
  {
    "Type" : "AWS::GameLift::Fleet",
    "Properties" : {
        "BuildId" : String,
        "Description" : String,
        "DesiredEC2Instances" : Integer,
        "EC2InboundPermissions" :  IpPermission, ... ,
        "EC2InstanceType" : String,
        "LogPaths" :  String, ... ,
        "MaxSize" : Integer,
        "MinSize" : Integer,
        "Name" : String,
        "ServerLaunchParameters" : String,
        "ServerLaunchPath" : String
      }
  }


snippet AWS::Glue::Classifier
  {
    "Type" : "AWS::Glue::Classifier",
    "Properties" : {
        "CsvClassifier" : CsvClassifier,
        "GrokClassifier" : GrokClassifier,
        "JsonClassifier" : JsonClassifier,
        "XMLClassifier" : XMLClassifier
      }
  }


snippet AWS::Glue::Connection
  {
    "Type" : "AWS::Glue::Connection",
    "Properties" : {
        "CatalogId" : String,
        "ConnectionInput" : ConnectionInput
      }
  }


snippet AWS::Glue::Crawler
  {
    "Type" : "AWS::Glue::Crawler",
    "Properties" : {
        "Classifiers" :  String, ... ,
        "Configuration" : String,
        "CrawlerSecurityConfiguration" : String,
        "DatabaseName" : String,
        "Description" : String,
        "Name" : String,
        "Role" : String,
        "Schedule" : Schedule,
        "SchemaChangePolicy" : SchemaChangePolicy,
        "TablePrefix" : String,
        "Tags" : Json,
        "Targets" : Targets
      }
  }


snippet AWS::Glue::Database
  {
    "Type" : "AWS::Glue::Database",
    "Properties" : {
        "CatalogId" : String,
        "DatabaseInput" : DatabaseInput
      }
  }


snippet AWS::Glue::DataCatalogEncryptionSettings
  {
    "Type" : "AWS::Glue::DataCatalogEncryptionSettings",
    "Properties" : {
        "CatalogId" : String,
        "DataCatalogEncryptionSettings" : DataCatalogEncryptionSettings
      }
  }


snippet AWS::Glue::DevEndpoint
  {
    "Type" : "AWS::Glue::DevEndpoint",
    "Properties" : {
        "Arguments" : Json,
        "EndpointName" : String,
        "ExtraJarsS3Path" : String,
        "ExtraPythonLibsS3Path" : String,
        "GlueVersion" : String,
        "NumberOfNodes" : Integer,
        "NumberOfWorkers" : Integer,
        "PublicKey" : String,
        "RoleArn" : String,
        "SecurityConfiguration" : String,
        "SecurityGroupIds" :  String, ... ,
        "SubnetId" : String,
        "Tags" : Json,
        "WorkerType" : String
      }
  }


snippet AWS::Glue::Job
  {
    "Type" : "AWS::Glue::Job",
    "Properties" : {
        "AllocatedCapacity" : Double,
        "Command" : JobCommand,
        "Connections" : ConnectionsList,
        "DefaultArguments" : Json,
        "Description" : String,
        "ExecutionProperty" : ExecutionProperty,
        "GlueVersion" : String,
        "LogUri" : String,
        "MaxCapacity" : Double,
        "MaxRetries" : Double,
        "Name" : String,
        "NotificationProperty" : NotificationProperty,
        "NumberOfWorkers" : Integer,
        "Role" : String,
        "SecurityConfiguration" : String,
        "Tags" : Json,
        "Timeout" : Integer,
        "WorkerType" : String
      }
  }


snippet AWS::Glue::MLTransform
  {
    "Type" : "AWS::Glue::MLTransform",
    "Properties" : {
        "Description" : String,
        "InputRecordTables" : InputRecordTables,
        "MaxCapacity" : Double,
        "MaxRetries" : Integer,
        "Name" : String,
        "NumberOfWorkers" : Integer,
        "Role" : String,
        "Timeout" : Integer,
        "TransformParameters" : TransformParameters,
        "WorkerType" : String
      }
  }


snippet AWS::Glue::Partition
  {
    "Type" : "AWS::Glue::Partition",
    "Properties" : {
        "CatalogId" : String,
        "DatabaseName" : String,
        "PartitionInput" : PartitionInput,
        "TableName" : String
      }
  }


snippet AWS::Glue::SecurityConfiguration
  {
    "Type" : "AWS::Glue::SecurityConfiguration",
    "Properties" : {
        "EncryptionConfiguration" : EncryptionConfiguration,
        "Name" : String
      }
  }


snippet AWS::Glue::Table
  {
    "Type" : "AWS::Glue::Table",
    "Properties" : {
        "CatalogId" : String,
        "DatabaseName" : String,
        "TableInput" : TableInput
      }
  }


snippet AWS::Glue::Trigger
  {
    "Type" : "AWS::Glue::Trigger",
    "Properties" : {
        "Actions" :  Action, ... ,
        "Description" : String,
        "Name" : String,
        "Predicate" : Predicate,
        "Schedule" : String,
        "StartOnCreation" : Boolean,
        "Tags" : Json,
        "Type" : String,
        "WorkflowName" : String
      }
  }


snippet AWS::Glue::Workflow
  {
    "Type" : "AWS::Glue::Workflow",
    "Properties" : {
        "DefaultRunProperties" : Json,
        "Description" : String,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::ConnectorDefinition
  {
    "Type" : "AWS::Greengrass::ConnectorDefinition",
    "Properties" : {
        "InitialVersion" : ConnectorDefinitionVersion,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::ConnectorDefinitionVersion
  {
    "Type" : "AWS::Greengrass::ConnectorDefinitionVersion",
    "Properties" : {
        "ConnectorDefinitionId" : String,
        "Connectors" :  Connector, ... 
      }
  }


snippet AWS::Greengrass::CoreDefinition
  {
    "Type" : "AWS::Greengrass::CoreDefinition",
    "Properties" : {
        "InitialVersion" : CoreDefinitionVersion,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::CoreDefinitionVersion
  {
    "Type" : "AWS::Greengrass::CoreDefinitionVersion",
    "Properties" : {
        "CoreDefinitionId" : String,
        "Cores" :  Core, ... 
      }
  }


snippet AWS::Greengrass::DeviceDefinition
  {
    "Type" : "AWS::Greengrass::DeviceDefinition",
    "Properties" : {
        "InitialVersion" : DeviceDefinitionVersion,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::DeviceDefinitionVersion
  {
    "Type" : "AWS::Greengrass::DeviceDefinitionVersion",
    "Properties" : {
        "DeviceDefinitionId" : String,
        "Devices" :  Device, ... 
      }
  }


snippet AWS::Greengrass::FunctionDefinition
  {
    "Type" : "AWS::Greengrass::FunctionDefinition",
    "Properties" : {
        "InitialVersion" : FunctionDefinitionVersion,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::FunctionDefinitionVersion
  {
    "Type" : "AWS::Greengrass::FunctionDefinitionVersion",
    "Properties" : {
        "DefaultConfig" : DefaultConfig,
        "FunctionDefinitionId" : String,
        "Functions" :  Function, ... 
      }
  }


snippet AWS::Greengrass::Group
  {
    "Type" : "AWS::Greengrass::Group",
    "Properties" : {
        "InitialVersion" : GroupVersion,
        "Name" : String,
        "RoleArn" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::GroupVersion
  {
    "Type" : "AWS::Greengrass::GroupVersion",
    "Properties" : {
        "ConnectorDefinitionVersionArn" : String,
        "CoreDefinitionVersionArn" : String,
        "DeviceDefinitionVersionArn" : String,
        "FunctionDefinitionVersionArn" : String,
        "GroupId" : String,
        "LoggerDefinitionVersionArn" : String,
        "ResourceDefinitionVersionArn" : String,
        "SubscriptionDefinitionVersionArn" : String
      }
  }


snippet AWS::Greengrass::LoggerDefinition
  {
    "Type" : "AWS::Greengrass::LoggerDefinition",
    "Properties" : {
        "InitialVersion" : LoggerDefinitionVersion,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::LoggerDefinitionVersion
  {
    "Type" : "AWS::Greengrass::LoggerDefinitionVersion",
    "Properties" : {
        "LoggerDefinitionId" : String,
        "Loggers" :  Logger, ... 
      }
  }


snippet AWS::Greengrass::ResourceDefinition
  {
    "Type" : "AWS::Greengrass::ResourceDefinition",
    "Properties" : {
        "InitialVersion" : ResourceDefinitionVersion,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::ResourceDefinitionVersion
  {
    "Type" : "AWS::Greengrass::ResourceDefinitionVersion",
    "Properties" : {
        "ResourceDefinitionId" : String,
        "Resources" :  ResourceInstance, ... 
      }
  }


snippet AWS::Greengrass::SubscriptionDefinition
  {
    "Type" : "AWS::Greengrass::SubscriptionDefinition",
    "Properties" : {
        "InitialVersion" : SubscriptionDefinitionVersion,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Greengrass::SubscriptionDefinitionVersion
  {
    "Type" : "AWS::Greengrass::SubscriptionDefinitionVersion",
    "Properties" : {
        "SubscriptionDefinitionId" : String,
        "Subscriptions" :  Subscription, ... 
      }
  }


snippet AWS::GuardDuty::Detector
  {
    "Type" : "AWS::GuardDuty::Detector",
    "Properties" : {
        "Enable" : Boolean,
        "FindingPublishingFrequency" : String
      }
  }


snippet AWS::GuardDuty::Filter
  {
    "Type" : "AWS::GuardDuty::Filter",
    "Properties" : {
        "Action" : String,
        "Description" : String,
        "DetectorId" : String,
        "FindingCriteria" : FindingCriteria,
        "Name" : String,
        "Rank" : Integer
      }
  }


snippet AWS::GuardDuty::IPSet
  {
    "Type" : "AWS::GuardDuty::IPSet",
    "Properties" : {
        "Activate" : Boolean,
        "DetectorId" : String,
        "Format" : String,
        "Location" : String,
        "Name" : String
      }
  }


snippet AWS::GuardDuty::Master
  {
    "Type" : "AWS::GuardDuty::Master",
    "Properties" : {
        "DetectorId" : String,
        "InvitationId" : String,
        "MasterId" : String
      }
  }


snippet AWS::GuardDuty::Member
  {
    "Type" : "AWS::GuardDuty::Member",
    "Properties" : {
        "DetectorId" : String,
        "DisableEmailNotification" : Boolean,
        "Email" : String,
        "MemberId" : String,
        "Message" : String,
        "Status" : String
      }
  }


snippet AWS::GuardDuty::ThreatIntelSet
  {
    "Type" : "AWS::GuardDuty::ThreatIntelSet",
    "Properties" : {
        "Activate" : Boolean,
        "DetectorId" : String,
        "Format" : String,
        "Location" : String,
        "Name" : String
      }
  }


snippet AWS::IAM::InstanceProfile
  {
    "Type" : "AWS::IAM::InstanceProfile",
    "Properties" : {
        "InstanceProfileName" : String,
        "Path" : String,
        "Roles" :  String, ... 
      }
  }


snippet AWS::IAM::ManagedPolicy
  {
    "Type" : "AWS::IAM::ManagedPolicy",
    "Properties" : {
        "Description" : String,
        "Groups" :  String, ... ,
        "ManagedPolicyName" : String,
        "Path" : String,
        "PolicyDocument" : Json,
        "Roles" :  String, ... ,
        "Users" :  String, ... 
      }
  }


snippet AWS::IAM::Policy
  {
    "Type" : "AWS::IAM::Policy",
    "Properties" : {
        "Groups" :  String, ... ,
        "PolicyDocument" : Json,
        "PolicyName" : String,
        "Roles" :  String, ... ,
        "Users" :  String, ... 
      }
  }


snippet AWS::IAM::Role
  {
    "Type" : "AWS::IAM::Role",
    "Properties" : {
        "AssumeRolePolicyDocument" : Json,
        "Description" : String,
        "ManagedPolicyArns" :  String, ... ,
        "MaxSessionDuration" : Integer,
        "Path" : String,
        "PermissionsBoundary" : String,
        "Policies" :  Policy, ... ,
        "RoleName" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::IAM::ServiceLinkedRole
  {
    "Type" : "AWS::IAM::ServiceLinkedRole",
    "Properties" : {
        "AWSServiceName" : String,
        "CustomSuffix" : String,
        "Description" : String
      }
  }


snippet AWS::CloudFormation::Init
  "Resources": {
    "MyInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              :
            },
            "groups" : {
              :
            },
            "users" : {
              :
            },
            "sources" : {
              :
            },
            "files" : {
              :
            },
            "commands" : {
              :
            },
            "services" : {
              :
            }
          }
        }
      },
      "Properties": {
        :
      }
    }
  }


snippet AWS::Inspector::AssessmentTarget
  {
    "Type" : "AWS::Inspector::AssessmentTarget",
    "Properties" : {
        "AssessmentTargetName" : String,
        "ResourceGroupArn" : String
      }
  }


snippet AWS::Inspector::AssessmentTemplate
  {
    "Type" : "AWS::Inspector::AssessmentTemplate",
    "Properties" : {
        "AssessmentTargetArn" : String,
        "AssessmentTemplateName" : String,
        "DurationInSeconds" : Integer,
        "RulesPackageArns" :  String, ... ,
        "UserAttributesForFindings" :  Tag, ... 
      }
  }


snippet AWS::Inspector::ResourceGroup
  {
    "Type" : "AWS::Inspector::ResourceGroup",
    "Properties" : {
        "ResourceGroupTags" :  Tag, ... 
      }
  }


snippet AWS::IoT::Certificate
  {
    "Type" : "AWS::IoT::Certificate",
    "Properties" : {
        "CertificateSigningRequest" : String,
        "Status" : String
      }
  }


snippet AWS::IoT::Policy
  {
    "Type" : "AWS::IoT::Policy",
    "Properties" : {
        "PolicyDocument" : Json,
        "PolicyName" : String
      }
  }


snippet AWS::IoT::PolicyPrincipalAttachment
  {
    "Type" : "AWS::IoT::PolicyPrincipalAttachment",
    "Properties" : {
        "PolicyName" : String,
        "Principal" : String
      }
  }


snippet AWS::IoT::Thing
  {
    "Type" : "AWS::IoT::Thing",
    "Properties" : {
        "AttributePayload" : AttributePayload,
        "ThingName" : String
      }
  }


snippet AWS::IoT::ThingPrincipalAttachment
  {
    "Type" : "AWS::IoT::ThingPrincipalAttachment",
    "Properties" : {
        "Principal" : String,
        "ThingName" : String
      }
  }


snippet AWS::IoT::TopicRule
  {
    "Type" : "AWS::IoT::TopicRule",
    "Properties" : {
        "RuleName" : String,
        "TopicRulePayload" : TopicRulePayload
      }
  }


snippet AWS::IoT1Click::Device
  {
    "Type" : "AWS::IoT1Click::Device",
    "Properties" : {
        "DeviceId" : String,
        "Enabled" : Boolean
      }
  }


snippet AWS::IoT1Click::Placement
  {
    "Type" : "AWS::IoT1Click::Placement",
    "Properties" : {
        "AssociatedDevices" : Json,
        "Attributes" : Json,
        "PlacementName" : String,
        "ProjectName" : String
      }
  }


snippet AWS::IoT1Click::Project
  {
    "Type" : "AWS::IoT1Click::Project",
    "Properties" : {
        "Description" : String,
        "PlacementTemplate" : PlacementTemplate,
        "ProjectName" : String
      }
  }


snippet AWS::IoTAnalytics::Channel
  {
    "Type" : "AWS::IoTAnalytics::Channel",
    "Properties" : {
        "ChannelName" : String,
        "ChannelStorage" : ChannelStorage,
        "RetentionPeriod" : RetentionPeriod,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::IoTAnalytics::Dataset
  {
    "Type" : "AWS::IoTAnalytics::Dataset",
    "Properties" : {
        "Actions" :  Action, ... ,
        "ContentDeliveryRules" :  DatasetContentDeliveryRule, ... ,
        "DatasetName" : String,
        "RetentionPeriod" : RetentionPeriod,
        "Tags" :  Tag, ... ,
        "Triggers" :  Trigger, ... ,
        "VersioningConfiguration" : VersioningConfiguration
      }
  }


snippet AWS::IoTAnalytics::Datastore
  {
    "Type" : "AWS::IoTAnalytics::Datastore",
    "Properties" : {
        "DatastoreName" : String,
        "DatastoreStorage" : DatastoreStorage,
        "RetentionPeriod" : RetentionPeriod,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::IoTAnalytics::Pipeline
  {
    "Type" : "AWS::IoTAnalytics::Pipeline",
    "Properties" : {
        "PipelineActivities" :  Activity, ... ,
        "PipelineName" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::IoTEvents::DetectorModel
  {
    "Type" : "AWS::IoTEvents::DetectorModel",
    "Properties" : {
        "DetectorModelDefinition" : DetectorModelDefinition,
        "DetectorModelDescription" : String,
        "DetectorModelName" : String,
        "Key" : String,
        "RoleArn" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::IoTEvents::Input
  {
    "Type" : "AWS::IoTEvents::Input",
    "Properties" : {
        "InputDefinition" : InputDefinition,
        "InputDescription" : String,
        "InputName" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::IoTThingsGraph::FlowTemplate
  {
    "Type" : "AWS::IoTThingsGraph::FlowTemplate",
    "Properties" : {
        "CompatibleNamespaceVersion" : Double,
        "Definition" : DefinitionDocument
      }
  }


snippet AWS::Kinesis::Stream
  {
    "Type" : "AWS::Kinesis::Stream",
    "Properties" : {
        "Name" : String,
        "RetentionPeriodHours" : Integer,
        "ShardCount" : Integer,
        "StreamEncryption" : StreamEncryption,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Kinesis::StreamConsumer
  {
    "Type" : "AWS::Kinesis::StreamConsumer",
    "Properties" : {
        "ConsumerName" : String,
        "StreamARN" : String
      }
  }


snippet AWS::KinesisAnalytics::Application
  {
    "Type" : "AWS::KinesisAnalytics::Application",
    "Properties" : {
        "ApplicationCode" : String,
        "ApplicationDescription" : String,
        "ApplicationName" : String,
        "Inputs" :  Input, ... 
      }
  }


snippet AWS::KinesisAnalytics::ApplicationOutput
  {
    "Type" : "AWS::KinesisAnalytics::ApplicationOutput",
    "Properties" : {
        "ApplicationName" : String,
        "Output" : Output
      }
  }


snippet AWS::KinesisAnalytics::ApplicationReferenceDataSource
  {
    "Type" : "AWS::KinesisAnalytics::ApplicationReferenceDataSource",
    "Properties" : {
        "ApplicationName" : String,
        "ReferenceDataSource" : ReferenceDataSource
      }
  }


snippet AWS::KinesisAnalyticsV2::Application
  {
    "Type" : "AWS::KinesisAnalyticsV2::Application",
    "Properties" : {
        "ApplicationConfiguration" : ApplicationConfiguration,
        "ApplicationDescription" : String,
        "ApplicationName" : String,
        "RuntimeEnvironment" : String,
        "ServiceExecutionRole" : String
      }
  }


snippet AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption
  {
    "Type" : "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption",
    "Properties" : {
        "ApplicationName" : String,
        "CloudWatchLoggingOption" : CloudWatchLoggingOption
      }
  }


snippet AWS::KinesisAnalyticsV2::ApplicationOutput
  {
    "Type" : "AWS::KinesisAnalyticsV2::ApplicationOutput",
    "Properties" : {
        "ApplicationName" : String,
        "Output" : Output
      }
  }


snippet AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource
  {
    "Type" : "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource",
    "Properties" : {
        "ApplicationName" : String,
        "ReferenceDataSource" : ReferenceDataSource
      }
  }


snippet AWS::KinesisFirehose::DeliveryStream
  {
    "Type" : "AWS::KinesisFirehose::DeliveryStream",
    "Properties" : {
        "DeliveryStreamName" : String,
        "DeliveryStreamType" : String,
        "ElasticsearchDestinationConfiguration" : ElasticsearchDestinationConfiguration,
        "ExtendedS3DestinationConfiguration" : ExtendedS3DestinationConfiguration,
        "KinesisStreamSourceConfiguration" : KinesisStreamSourceConfiguration,
        "RedshiftDestinationConfiguration" : RedshiftDestinationConfiguration,
        "S3DestinationConfiguration" : S3DestinationConfiguration,
        "SplunkDestinationConfiguration" : SplunkDestinationConfiguration
      }
  }


snippet AWS::KMS::Alias
  {
    "Type" : "AWS::KMS::Alias",
    "Properties" : {
        "AliasName" : String,
        "TargetKeyId" : String
      }
  }


snippet AWS::KMS::Key
  {
    "Type" : "AWS::KMS::Key",
    "Properties" : {
        "Description" : String,
        "EnableKeyRotation" : Boolean,
        "Enabled" : Boolean,
        "KeyPolicy" : Json,
        "KeyUsage" : String,
        "PendingWindowInDays" : Integer,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::LakeFormation::DataLakeSettings
  {
    "Type" : "AWS::LakeFormation::DataLakeSettings",
    "Properties" : {
        "Admins" : Admins
      }
  }


snippet AWS::LakeFormation::Permissions
  {
    "Type" : "AWS::LakeFormation::Permissions",
    "Properties" : {
        "DataLakePrincipal" : DataLakePrincipal,
        "Permissions" :  String, ... ,
        "PermissionsWithGrantOption" :  String, ... ,
        "Resource" : Resource
      }
  }


snippet AWS::LakeFormation::Resource
  {
    "Type" : "AWS::LakeFormation::Resource",
    "Properties" : {
        "ResourceArn" : String,
        "RoleArn" : String,
        "UseServiceLinkedRole" : Boolean
      }
  }


snippet AWS::Lambda::Alias
  {
    "Type" : "AWS::Lambda::Alias",
    "Properties" : {
        "Description" : String,
        "FunctionName" : String,
        "FunctionVersion" : String,
        "Name" : String,
        "RoutingConfig" : AliasRoutingConfiguration
      }
  }


snippet AWS::Lambda::EventSourceMapping
  {
    "Type" : "AWS::Lambda::EventSourceMapping",
    "Properties" : {
        "BatchSize" : Integer,
        "Enabled" : Boolean,
        "EventSourceArn" : String,
        "FunctionName" : String,
        "MaximumBatchingWindowInSeconds" : Integer,
        "StartingPosition" : String
      }
  }


snippet AWS::Lambda::Function
  {
    "Type" : "AWS::Lambda::Function",
    "Properties" : {
        "Code" : Code,
        "DeadLetterConfig" : DeadLetterConfig,
        "Description" : String,
        "Environment" : Environment,
        "FunctionName" : String,
        "Handler" : String,
        "KmsKeyArn" : String,
        "Layers" :  String, ... ,
        "MemorySize" : Integer,
        "ReservedConcurrentExecutions" : Integer,
        "Role" : String,
        "Runtime" : String,
        "Tags" :  Tag, ... ,
        "Timeout" : Integer,
        "TracingConfig" : TracingConfig,
        "VpcConfig" : VpcConfig
      }
  }


snippet AWS::Lambda::LayerVersion
  {
    "Type" : "AWS::Lambda::LayerVersion",
    "Properties" : {
        "CompatibleRuntimes" :  String, ... ,
        "Content" : Content,
        "Description" : String,
        "LayerName" : String,
        "LicenseInfo" : String
      }
  }


snippet AWS::Lambda::LayerVersionPermission
  {
    "Type" : "AWS::Lambda::LayerVersionPermission",
    "Properties" : {
        "Action" : String,
        "LayerVersionArn" : String,
        "OrganizationId" : String,
        "Principal" : String
      }
  }


snippet AWS::Lambda::Permission
  {
    "Type" : "AWS::Lambda::Permission",
    "Properties" : {
        "Action" : String,
        "EventSourceToken" : String,
        "FunctionName" : String,
        "Principal" : String,
        "SourceAccount" : String,
        "SourceArn" : String
      }
  }


snippet AWS::Lambda::Version
  {
    "Type" : "AWS::Lambda::Version",
    "Properties" : {
        "CodeSha256" : String,
        "Description" : String,
        "FunctionName" : String
      }
  }


snippet AWS::Logs::Destination
  {
    "Type" : "AWS::Logs::Destination",
    "Properties" : {
        "DestinationName" : String,
        "DestinationPolicy" : String,
        "RoleArn" : String,
        "TargetArn" : String
      }
  }


snippet AWS::Logs::LogGroup
  {
    "Type" : "AWS::Logs::LogGroup",
    "Properties" : {
        "LogGroupName" : String,
        "RetentionInDays" : Integer
      }
  }


snippet AWS::Logs::LogStream
  {
    "Type" : "AWS::Logs::LogStream",
    "Properties" : {
        "LogGroupName" : String,
        "LogStreamName" : String
      }
  }


snippet AWS::Logs::MetricFilter
  {
    "Type" : "AWS::Logs::MetricFilter",
    "Properties" : {
        "FilterPattern" : String,
        "LogGroupName" : String,
        "MetricTransformations" :  MetricTransformation, ... 
      }
  }


snippet AWS::Logs::SubscriptionFilter
  {
    "Type" : "AWS::Logs::SubscriptionFilter",
    "Properties" : {
        "DestinationArn" : String,
        "FilterPattern" : String,
        "LogGroupName" : String,
        "RoleArn" : String
      }
  }


snippet AWS::ManagedBlockchain::Member
  {
    "Type" : "AWS::ManagedBlockchain::Member",
    "Properties" : {
        "InvitationId" : String,
        "MemberConfiguration" : MemberConfiguration,
        "NetworkConfiguration" : NetworkConfiguration,
        "NetworkId" : String
      }
  }


snippet AWS::ManagedBlockchain::Node
  {
    "Type" : "AWS::ManagedBlockchain::Node",
    "Properties" : {
        "MemberId" : String,
        "NetworkId" : String,
        "NodeConfiguration" : NodeConfiguration
      }
  }


snippet AWS::MediaConvert::JobTemplate
  {
    "Type" : "AWS::MediaConvert::JobTemplate",
    "Properties" : {
        "AccelerationSettings" : AccelerationSettings,
        "Category" : String,
        "Description" : String,
        "Name" : String,
        "Priority" : Integer,
        "Queue" : String,
        "SettingsJson" : Json,
        "StatusUpdateInterval" : String,
        "Tags" : Json
      }
  }


snippet AWS::MediaConvert::Preset
  {
    "Type" : "AWS::MediaConvert::Preset",
    "Properties" : {
        "Category" : String,
        "Description" : String,
        "Name" : String,
        "SettingsJson" : Json,
        "Tags" : Json
      }
  }


snippet AWS::MediaConvert::Queue
  {
    "Type" : "AWS::MediaConvert::Queue",
    "Properties" : {
        "Description" : String,
        "Name" : String,
        "PricingPlan" : String,
        "Status" : String,
        "Tags" : Json
      }
  }


snippet AWS::MediaLive::Channel
  {
    "Type" : "AWS::MediaLive::Channel",
    "Properties" : {
        "ChannelClass" : String,
        "Destinations" :  OutputDestination, ... ,
        "EncoderSettings" : Json,
        "InputAttachments" :  InputAttachment, ... ,
        "InputSpecification" : InputSpecification,
        "LogLevel" : String,
        "Name" : String,
        "RoleArn" : String,
        "Tags" : Json
      }
  }


snippet AWS::MediaLive::Input
  {
    "Type" : "AWS::MediaLive::Input",
    "Properties" : {
        "Destinations" :  InputDestinationRequest, ... ,
        "InputSecurityGroups" :  String, ... ,
        "MediaConnectFlows" :  MediaConnectFlowRequest, ... ,
        "Name" : String,
        "RoleArn" : String,
        "Sources" :  InputSourceRequest, ... ,
        "Tags" : Json,
        "Type" : String,
        "Vpc" : InputVpcRequest
      }
  }


snippet AWS::MediaLive::InputSecurityGroup
  {
    "Type" : "AWS::MediaLive::InputSecurityGroup",
    "Properties" : {
        "Tags" : Json,
        "WhitelistRules" :  InputWhitelistRuleCidr, ... 
      }
  }


snippet AWS::MediaStore::Container
  {
    "Type" : "AWS::MediaStore::Container",
    "Properties" : {
        "AccessLoggingEnabled" : Boolean,
        "ContainerName" : String,
        "CorsPolicy" :  CorsRule, ... ,
        "LifecyclePolicy" : String,
        "Policy" : String
      }
  }


snippet AWS::MSK::Cluster
  {
    "Type" : "AWS::MSK::Cluster",
    "Properties" : {
        "BrokerNodeGroupInfo" : BrokerNodeGroupInfo,
        "ClientAuthentication" : ClientAuthentication,
        "ClusterName" : String,
        "ConfigurationInfo" : ConfigurationInfo,
        "EncryptionInfo" : EncryptionInfo,
        "EnhancedMonitoring" : String,
        "KafkaVersion" : String,
        "NumberOfBrokerNodes" : Integer,
        "Tags" : {Key : Value, ...}
      }
  }


snippet AWS::Neptune::DBCluster
  {
    "Type" : "AWS::Neptune::DBCluster",
    "Properties" : {
        "AvailabilityZones" :  String, ... ,
        "BackupRetentionPeriod" : Integer,
        "DBClusterIdentifier" : String,
        "DBClusterParameterGroupName" : String,
        "DBSubnetGroupName" : String,
        "EnableCloudwatchLogsExports" :  String, ... ,
        "IamAuthEnabled" : Boolean,
        "KmsKeyId" : String,
        "Port" : Integer,
        "PreferredBackupWindow" : String,
        "PreferredMaintenanceWindow" : String,
        "SnapshotIdentifier" : String,
        "StorageEncrypted" : Boolean,
        "Tags" :  Tag, ... ,
        "VpcSecurityGroupIds" :  String, ... 
      }
  }


snippet AWS::Neptune::DBClusterParameterGroup
  {
    "Type" : "AWS::Neptune::DBClusterParameterGroup",
    "Properties" : {
        "Description" : String,
        "Family" : String,
        "Name" : String,
        "Parameters" : Json,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Neptune::DBInstance
  {
    "Type" : "AWS::Neptune::DBInstance",
    "Properties" : {
        "AllowMajorVersionUpgrade" : Boolean,
        "AutoMinorVersionUpgrade" : Boolean,
        "AvailabilityZone" : String,
        "DBClusterIdentifier" : String,
        "DBInstanceClass" : String,
        "DBInstanceIdentifier" : String,
        "DBParameterGroupName" : String,
        "DBSnapshotIdentifier" : String,
        "DBSubnetGroupName" : String,
        "PreferredMaintenanceWindow" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Neptune::DBParameterGroup
  {
    "Type" : "AWS::Neptune::DBParameterGroup",
    "Properties" : {
        "Description" : String,
        "Family" : String,
        "Name" : String,
        "Parameters" : Json,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Neptune::DBSubnetGroup
  {
    "Type" : "AWS::Neptune::DBSubnetGroup",
    "Properties" : {
        "DBSubnetGroupDescription" : String,
        "DBSubnetGroupName" : String,
        "SubnetIds" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::OpsWorks::App
  {
    "Type" : "AWS::OpsWorks::App",
    "Properties" : {
        "AppSource" : Source,
        "Attributes" : {Key : Value, ...},
        "DataSources" :  DataSource, ... ,
        "Description" : String,
        "Domains" :  String, ... ,
        "EnableSsl" : Boolean,
        "Environment" :  EnvironmentVariable, ... ,
        "Name" : String,
        "Shortname" : String,
        "SslConfiguration" : SslConfiguration,
        "StackId" : String,
        "Type" : String
      }
  }


snippet AWS::OpsWorks::ElasticLoadBalancerAttachment
  {
    "Type" : "AWS::OpsWorks::ElasticLoadBalancerAttachment",
    "Properties" : {
        "ElasticLoadBalancerName" : String,
        "LayerId" : String
      }
  }


snippet AWS::OpsWorks::Instance
  {
    "Type" : "AWS::OpsWorks::Instance",
    "Properties" : {
        "AgentVersion" : String,
        "AmiId" : String,
        "Architecture" : String,
        "AutoScalingType" : String,
        "AvailabilityZone" : String,
        "BlockDeviceMappings" :  BlockDeviceMapping, ... ,
        "EbsOptimized" : Boolean,
        "ElasticIps" :  String, ... ,
        "Hostname" : String,
        "InstallUpdatesOnBoot" : Boolean,
        "InstanceType" : String,
        "LayerIds" :  String, ... ,
        "Os" : String,
        "RootDeviceType" : String,
        "SshKeyName" : String,
        "StackId" : String,
        "SubnetId" : String,
        "Tenancy" : String,
        "TimeBasedAutoScaling" : TimeBasedAutoScaling,
        "VirtualizationType" : String,
        "Volumes" :  String, ... 
      }
  }


snippet AWS::OpsWorks::Layer
  {
    "Type" : "AWS::OpsWorks::Layer",
    "Properties" : {
        "Attributes" : {Key : Value, ...},
        "AutoAssignElasticIps" : Boolean,
        "AutoAssignPublicIps" : Boolean,
        "CustomInstanceProfileArn" : String,
        "CustomJson" : Json,
        "CustomRecipes" : Recipes,
        "CustomSecurityGroupIds" :  String, ... ,
        "EnableAutoHealing" : Boolean,
        "InstallUpdatesOnBoot" : Boolean,
        "LifecycleEventConfiguration" : LifecycleEventConfiguration,
        "LoadBasedAutoScaling" : LoadBasedAutoScaling,
        "Name" : String,
        "Packages" :  String, ... ,
        "Shortname" : String,
        "StackId" : String,
        "Tags" :  Tag, ... ,
        "Type" : String,
        "UseEbsOptimizedInstances" : Boolean,
        "VolumeConfigurations" :  VolumeConfiguration, ... 
      }
  }


snippet AWS::OpsWorks::Stack
  {
    "Type" : "AWS::OpsWorks::Stack",
    "Properties" : {
        "AgentVersion" : String,
        "Attributes" : {Key : Value, ...},
        "ChefConfiguration" : ChefConfiguration,
        "CloneAppIds" :  String, ... ,
        "ClonePermissions" : Boolean,
        "ConfigurationManager" : StackConfigurationManager,
        "CustomCookbooksSource" : Source,
        "CustomJson" : Json,
        "DefaultAvailabilityZone" : String,
        "DefaultInstanceProfileArn" : String,
        "DefaultOs" : String,
        "DefaultRootDeviceType" : String,
        "DefaultSshKeyName" : String,
        "DefaultSubnetId" : String,
        "EcsClusterArn" : String,
        "ElasticIps" :  ElasticIp, ... ,
        "HostnameTheme" : String,
        "Name" : String,
        "RdsDbInstances" :  RdsDbInstance, ... ,
        "ServiceRoleArn" : String,
        "SourceStackId" : String,
        "Tags" :  Tag, ... ,
        "UseCustomCookbooks" : Boolean,
        "UseOpsworksSecurityGroups" : Boolean,
        "VpcId" : String
      }
  }


snippet AWS::OpsWorks::UserProfile
  {
    "Type" : "AWS::OpsWorks::UserProfile",
    "Properties" : {
        "AllowSelfManagement" : Boolean,
        "IamUserArn" : String,
        "SshPublicKey" : String,
        "SshUsername" : String
      }
  }


snippet AWS::OpsWorks::Volume
  {
    "Type" : "AWS::OpsWorks::Volume",
    "Properties" : {
        "Ec2VolumeId" : String,
        "MountPoint" : String,
        "Name" : String,
        "StackId" : String
      }
  }


snippet AWS::OpsWorksCM::Server
  {
    "Type" : "AWS::OpsWorksCM::Server",
    "Properties" : {
        "AssociatePublicIpAddress" : Boolean,
        "BackupId" : String,
        "BackupRetentionCount" : Integer,
        "DisableAutomatedBackup" : Boolean,
        "Engine" : String,
        "EngineAttributes" :  EngineAttribute, ... ,
        "EngineModel" : String,
        "EngineVersion" : String,
        "InstanceProfileArn" : String,
        "InstanceType" : String,
        "KeyPair" : String,
        "PreferredBackupWindow" : String,
        "PreferredMaintenanceWindow" : String,
        "SecurityGroupIds" :  String, ... ,
        "ServerName" : String,
        "ServiceRoleArn" : String,
        "SubnetIds" :  String, ... 
      }
  }


snippet AWS::Pinpoint::ADMChannel
  {
    "Type" : "AWS::Pinpoint::ADMChannel",
    "Properties" : {
        "ApplicationId" : String,
        "ClientId" : String,
        "ClientSecret" : String,
        "Enabled" : Boolean
      }
  }


snippet AWS::Pinpoint::APNSChannel
  {
    "Type" : "AWS::Pinpoint::APNSChannel",
    "Properties" : {
        "ApplicationId" : String,
        "BundleId" : String,
        "Certificate" : String,
        "DefaultAuthenticationMethod" : String,
        "Enabled" : Boolean,
        "PrivateKey" : String,
        "TeamId" : String,
        "TokenKey" : String,
        "TokenKeyId" : String
      }
  }


snippet AWS::Pinpoint::APNSSandboxChannel
  {
    "Type" : "AWS::Pinpoint::APNSSandboxChannel",
    "Properties" : {
        "ApplicationId" : String,
        "BundleId" : String,
        "Certificate" : String,
        "DefaultAuthenticationMethod" : String,
        "Enabled" : Boolean,
        "PrivateKey" : String,
        "TeamId" : String,
        "TokenKey" : String,
        "TokenKeyId" : String
      }
  }


snippet AWS::Pinpoint::APNSVoipChannel
  {
    "Type" : "AWS::Pinpoint::APNSVoipChannel",
    "Properties" : {
        "ApplicationId" : String,
        "BundleId" : String,
        "Certificate" : String,
        "DefaultAuthenticationMethod" : String,
        "Enabled" : Boolean,
        "PrivateKey" : String,
        "TeamId" : String,
        "TokenKey" : String,
        "TokenKeyId" : String
      }
  }


snippet AWS::Pinpoint::APNSVoipSandboxChannel
  {
    "Type" : "AWS::Pinpoint::APNSVoipSandboxChannel",
    "Properties" : {
        "ApplicationId" : String,
        "BundleId" : String,
        "Certificate" : String,
        "DefaultAuthenticationMethod" : String,
        "Enabled" : Boolean,
        "PrivateKey" : String,
        "TeamId" : String,
        "TokenKey" : String,
        "TokenKeyId" : String
      }
  }


snippet AWS::Pinpoint::App
  {
    "Type" : "AWS::Pinpoint::App",
    "Properties" : {
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::Pinpoint::ApplicationSettings
  {
    "Type" : "AWS::Pinpoint::ApplicationSettings",
    "Properties" : {
        "ApplicationId" : String,
        "CampaignHook" : CampaignHook,
        "CloudWatchMetricsEnabled" : Boolean,
        "Limits" : Limits,
        "QuietTime" : QuietTime
      }
  }


snippet AWS::Pinpoint::BaiduChannel
  {
    "Type" : "AWS::Pinpoint::BaiduChannel",
    "Properties" : {
        "ApiKey" : String,
        "ApplicationId" : String,
        "Enabled" : Boolean,
        "SecretKey" : String
      }
  }


snippet AWS::Pinpoint::Campaign
  {
    "Type" : "AWS::Pinpoint::Campaign",
    "Properties" : {
        "AdditionalTreatments" :  WriteTreatmentResource, ... ,
        "ApplicationId" : String,
        "CampaignHook" : CampaignHook,
        "Description" : String,
        "HoldoutPercent" : Integer,
        "IsPaused" : Boolean,
        "Limits" : Limits,
        "MessageConfiguration" : MessageConfiguration,
        "Name" : String,
        "Schedule" : Schedule,
        "SegmentId" : String,
        "SegmentVersion" : Integer,
        "Tags" : Json,
        "TreatmentDescription" : String,
        "TreatmentName" : String
      }
  }


snippet AWS::Pinpoint::EmailChannel
  {
    "Type" : "AWS::Pinpoint::EmailChannel",
    "Properties" : {
        "ApplicationId" : String,
        "ConfigurationSet" : String,
        "Enabled" : Boolean,
        "FromAddress" : String,
        "Identity" : String,
        "RoleArn" : String
      }
  }


snippet AWS::Pinpoint::EmailTemplate
  {
    "Type" : "AWS::Pinpoint::EmailTemplate",
    "Properties" : {
        "HtmlPart" : String,
        "Subject" : String,
        "Tags" : Json,
        "TemplateName" : String,
        "TextPart" : String
      }
  }


snippet AWS::Pinpoint::EventStream
  {
    "Type" : "AWS::Pinpoint::EventStream",
    "Properties" : {
        "ApplicationId" : String,
        "DestinationStreamArn" : String,
        "RoleArn" : String
      }
  }


snippet AWS::Pinpoint::GCMChannel
  {
    "Type" : "AWS::Pinpoint::GCMChannel",
    "Properties" : {
        "ApiKey" : String,
        "ApplicationId" : String,
        "Enabled" : Boolean
      }
  }


snippet AWS::Pinpoint::PushTemplate
  {
    "Type" : "AWS::Pinpoint::PushTemplate",
    "Properties" : {
        "ADM" : AndroidPushNotificationTemplate,
        "APNS" : APNSPushNotificationTemplate,
        "Baidu" : AndroidPushNotificationTemplate,
        "Default" : DefaultPushNotificationTemplate,
        "GCM" : AndroidPushNotificationTemplate,
        "Tags" : Json,
        "TemplateName" : String
      }
  }


snippet AWS::Pinpoint::Segment
  {
    "Type" : "AWS::Pinpoint::Segment",
    "Properties" : {
        "ApplicationId" : String,
        "Dimensions" : SegmentDimensions,
        "Name" : String,
        "SegmentGroups" : SegmentGroups,
        "Tags" : Json
      }
  }


snippet AWS::Pinpoint::SMSChannel
  {
    "Type" : "AWS::Pinpoint::SMSChannel",
    "Properties" : {
        "ApplicationId" : String,
        "Enabled" : Boolean,
        "SenderId" : String,
        "ShortCode" : String
      }
  }


snippet AWS::Pinpoint::SmsTemplate
  {
    "Type" : "AWS::Pinpoint::SmsTemplate",
    "Properties" : {
        "Body" : String,
        "Tags" : Json,
        "TemplateName" : String
      }
  }


snippet AWS::Pinpoint::VoiceChannel
  {
    "Type" : "AWS::Pinpoint::VoiceChannel",
    "Properties" : {
        "ApplicationId" : String,
        "Enabled" : Boolean
      }
  }


snippet AWS::PinpointEmail::ConfigurationSet
  {
    "Type" : "AWS::PinpointEmail::ConfigurationSet",
    "Properties" : {
        "DeliveryOptions" : DeliveryOptions,
        "Name" : String,
        "ReputationOptions" : ReputationOptions,
        "SendingOptions" : SendingOptions,
        "Tags" :  Tags, ... ,
        "TrackingOptions" : TrackingOptions
      }
  }


snippet AWS::PinpointEmail::ConfigurationSetEventDestination
  {
    "Type" : "AWS::PinpointEmail::ConfigurationSetEventDestination",
    "Properties" : {
        "ConfigurationSetName" : String,
        "EventDestination" : EventDestination,
        "EventDestinationName" : String
      }
  }


snippet AWS::PinpointEmail::DedicatedIpPool
  {
    "Type" : "AWS::PinpointEmail::DedicatedIpPool",
    "Properties" : {
        "PoolName" : String,
        "Tags" :  Tags, ... 
      }
  }


snippet AWS::PinpointEmail::Identity
  {
    "Type" : "AWS::PinpointEmail::Identity",
    "Properties" : {
        "DkimSigningEnabled" : Boolean,
        "FeedbackForwardingEnabled" : Boolean,
        "MailFromAttributes" : MailFromAttributes,
        "Name" : String,
        "Tags" :  Tags, ... 
      }
  }


snippet AWS::QLDB::Ledger
  {
    "Type" : "AWS::QLDB::Ledger",
    "Properties" : {
        "DeletionProtection" : Boolean,
        "Name" : String,
        "PermissionsMode" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::RAM::ResourceShare
  {
    "Type" : "AWS::RAM::ResourceShare",
    "Properties" : {
        "AllowExternalPrincipals" : Boolean,
        "Name" : String,
        "Principals" :  String, ... ,
        "ResourceArns" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::RDS::DBCluster
  {
    "Type" : "AWS::RDS::DBCluster",
    "Properties" : {
        "AssociatedRoles" :  DBClusterRole, ... ,
        "AvailabilityZones" :  String, ... ,
        "BacktrackWindow" : Long,
        "BackupRetentionPeriod" : Integer,
        "DatabaseName" : String,
        "DBClusterIdentifier" : String,
        "DBClusterParameterGroupName" : String,
        "DBSubnetGroupName" : String,
        "DeletionProtection" : Boolean,
        "EnableCloudwatchLogsExports" :  String, ... ,
        "EnableIAMDatabaseAuthentication" : Boolean,
        "Engine" : String,
        "EngineMode" : String,
        "EngineVersion" : String,
        "KmsKeyId" : String,
        "MasterUsername" : String,
        "MasterUserPassword" : String,
        "Port" : Integer,
        "PreferredBackupWindow" : String,
        "PreferredMaintenanceWindow" : String,
        "ReplicationSourceIdentifier" : String,
        "RestoreType" : String,
        "ScalingConfiguration" : ScalingConfiguration,
        "SnapshotIdentifier" : String,
        "SourceDBClusterIdentifier" : String,
        "SourceRegion" : String,
        "StorageEncrypted" : Boolean,
        "Tags" :  Tag, ... ,
        "UseLatestRestorableTime" : Boolean,
        "VpcSecurityGroupIds" :  String, ... 
      }
  }


snippet AWS::RDS::DBClusterParameterGroup
  {
    "Type" : "AWS::RDS::DBClusterParameterGroup",
    "Properties" : {
        "Description" : String,
        "Family" : String,
        "Parameters" : Json,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::RDS::DBSubnetGroup
  {
    "Type" : "AWS::RDS::DBSubnetGroup",
    "Properties" : {
        "DBSubnetGroupDescription" : String,
        "DBSubnetGroupName" : String,
        "SubnetIds" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::RDS::EventSubscription
  {
    "Type" : "AWS::RDS::EventSubscription",
    "Properties" : {
        "Enabled" : Boolean,
        "EventCategories" :  String, ... ,
        "SnsTopicArn" : String,
        "SourceIds" :  String, ... ,
        "SourceType" : String
      }
  }


snippet AWS::RDS::OptionGroup
  {
    "Type" : "AWS::RDS::OptionGroup",
    "Properties" : {
        "EngineName" : String,
        "MajorEngineVersion" : String,
        "OptionConfigurations" :  OptionConfiguration, ... ,
        "OptionGroupDescription" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::RDS::DBSecurityGroupIngress
  {
    "Type" : "AWS::RDS::DBSecurityGroupIngress",
    "Properties" : {
        "CIDRIP" : String,
        "DBSecurityGroupName" : String,
        "EC2SecurityGroupId" : String,
        "EC2SecurityGroupName" : String,
        "EC2SecurityGroupOwnerId" : String
      }
  }


snippet AWS::Redshift::Cluster
  {
    "Type" : "AWS::Redshift::Cluster",
    "Properties" : {
        "AllowVersionUpgrade" : Boolean,
        "AutomatedSnapshotRetentionPeriod" : Integer,
        "AvailabilityZone" : String,
        "ClusterIdentifier" : String,
        "ClusterParameterGroupName" : String,
        "ClusterSecurityGroups" :  String, ... ,
        "ClusterSubnetGroupName" : String,
        "ClusterType" : String,
        "ClusterVersion" : String,
        "DBName" : String,
        "ElasticIp" : String,
        "Encrypted" : Boolean,
        "HsmClientCertificateIdentifier" : String,
        "HsmConfigurationIdentifier" : String,
        "IamRoles" :  String, ... ,
        "KmsKeyId" : String,
        "LoggingProperties" : LoggingProperties,
        "MasterUserPassword" : String,
        "MasterUsername" : String,
        "NodeType" : String,
        "NumberOfNodes" : Integer,
        "OwnerAccount" : String,
        "Port" : Integer,
        "PreferredMaintenanceWindow" : String,
        "PubliclyAccessible" : Boolean,
        "SnapshotClusterIdentifier" : String,
        "SnapshotIdentifier" : String,
        "Tags" :  Tag, ... ,
        "VpcSecurityGroupIds" :  String, ... 
      }
  }


snippet AWS::Redshift::ClusterParameterGroup
  {
    "Type" : "AWS::Redshift::ClusterParameterGroup",
    "Properties" : {
        "Description" : String,
        "ParameterGroupFamily" : String,
        "Parameters" :  Parameter, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Redshift::ClusterSecurityGroup
  {
    "Type" : "AWS::Redshift::ClusterSecurityGroup",
    "Properties" : {
        "Description" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Redshift::ClusterSecurityGroupIngress
  {
    "Type" : "AWS::Redshift::ClusterSecurityGroupIngress",
    "Properties" : {
        "CIDRIP" : String,
        "ClusterSecurityGroupName" : String,
        "EC2SecurityGroupName" : String,
        "EC2SecurityGroupOwnerId" : String
      }
  }


snippet AWS::Redshift::ClusterSubnetGroup
  {
    "Type" : "AWS::Redshift::ClusterSubnetGroup",
    "Properties" : {
        "Description" : String,
        "SubnetIds" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::RoboMaker::Fleet
  {
    "Type" : "AWS::RoboMaker::Fleet",
    "Properties" : {
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::RoboMaker::Robot
  {
    "Type" : "AWS::RoboMaker::Robot",
    "Properties" : {
        "Architecture" : String,
        "Fleet" : String,
        "GreengrassGroupId" : String,
        "Name" : String,
        "Tags" : Json
      }
  }


snippet AWS::RoboMaker::RobotApplication
  {
    "Type" : "AWS::RoboMaker::RobotApplication",
    "Properties" : {
        "CurrentRevisionId" : String,
        "Name" : String,
        "RobotSoftwareSuite" : RobotSoftwareSuite,
        "Sources" :  SourceConfig, ... ,
        "Tags" : Json
      }
  }


snippet AWS::RoboMaker::RobotApplicationVersion
  {
    "Type" : "AWS::RoboMaker::RobotApplicationVersion",
    "Properties" : {
        "Application" : String,
        "CurrentRevisionId" : String
      }
  }


snippet AWS::RoboMaker::SimulationApplication
  {
    "Type" : "AWS::RoboMaker::SimulationApplication",
    "Properties" : {
        "CurrentRevisionId" : String,
        "Name" : String,
        "RenderingEngine" : RenderingEngine,
        "RobotSoftwareSuite" : RobotSoftwareSuite,
        "SimulationSoftwareSuite" : SimulationSoftwareSuite,
        "Sources" :  SourceConfig, ... ,
        "Tags" : Json
      }
  }


snippet AWS::RoboMaker::SimulationApplicationVersion
  {
    "Type" : "AWS::RoboMaker::SimulationApplicationVersion",
    "Properties" : {
        "Application" : String,
        "CurrentRevisionId" : String
      }
  }


snippet AWS::Route53::HealthCheck
  {
    "Type" : "AWS::Route53::HealthCheck",
    "Properties" : {
        "HealthCheckConfig" : HealthCheckConfig,
        "HealthCheckTags" :  HealthCheckTag, ... 
      }
  }


snippet AWS::Route53::HostedZone::VPC
  {
    "VPCId" : String,
    "VPCRegion" : String
  }


snippet AWS::Route53::HostedZone
  {
    "Type" : "AWS::Route53::HostedZone",
    "Properties" : {
        "HostedZoneConfig" : HostedZoneConfig,
        "HostedZoneTags" :  HostedZoneTag, ... ,
        "Name" : String,
        "QueryLoggingConfig" : QueryLoggingConfig,
        "VPCs" :  VPC, ... 
      }
  }


snippet AWS::Route53::RecordSetGroup
  {
    "Type" : "AWS::Route53::RecordSetGroup",
    "Properties" : {
        "Comment" : String,
        "HostedZoneId" : String,
        "HostedZoneName" : String,
        "RecordSets" :  RecordSet, ... 
      }
  }


snippet AWS::Route53Resolver::ResolverEndpoint
  {
    "Type" : "AWS::Route53Resolver::ResolverEndpoint",
    "Properties" : {
        "Direction" : String,
        "IpAddresses" :  IpAddressRequest, ... ,
        "Name" : String,
        "SecurityGroupIds" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Route53Resolver::ResolverRule
  {
    "Type" : "AWS::Route53Resolver::ResolverRule",
    "Properties" : {
        "DomainName" : String,
        "Name" : String,
        "ResolverEndpointId" : String,
        "RuleType" : String,
        "Tags" :  Tag, ... ,
        "TargetIps" :  TargetAddress, ... 
      }
  }


snippet AWS::Route53Resolver::ResolverRuleAssociation
  {
    "Type" : "AWS::Route53Resolver::ResolverRuleAssociation",
    "Properties" : {
        "Name" : String,
        "ResolverRuleId" : String,
        "VPCId" : String
      }
  }


snippet AWS::S3::AccessPoint
  {
    "Type" : "AWS::S3::AccessPoint",
    "Properties" : {
        "AccountId" : String,
        "Bucket" : String,
        "Name" : String,
        "Policy" : String,
        "PublicAccessBlockConfiguration" : PublicAccessBlockConfiguration,
        "VpcConfiguration" : VpcConfiguration
      }
  }


snippet AWS::SageMaker::CodeRepository
  {
    "Type" : "AWS::SageMaker::CodeRepository",
    "Properties" : {
        "CodeRepositoryName" : String,
        "GitConfig" : GitConfig
      }
  }


snippet AWS::SageMaker::Endpoint
  {
    "Type" : "AWS::SageMaker::Endpoint",
    "Properties" : {
        "EndpointConfigName" : String,
        "EndpointName" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::SageMaker::EndpointConfig
  {
    "Type" : "AWS::SageMaker::EndpointConfig",
    "Properties" : {
        "EndpointConfigName" : String,
        "KmsKeyId" : String,
        "ProductionVariants" :  ProductionVariant, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::SageMaker::Model
  {
    "Type" : "AWS::SageMaker::Model",
    "Properties" : {
        "Containers" :  ContainerDefinition, ... ,
        "ExecutionRoleArn" : String,
        "ModelName" : String,
        "PrimaryContainer" : ContainerDefinition,
        "Tags" :  Tag, ... ,
        "VpcConfig" : VpcConfig
      }
  }


snippet AWS::SageMaker::NotebookInstance
  {
    "Type" : "AWS::SageMaker::NotebookInstance",
    "Properties" : {
        "AcceleratorTypes" :  String, ... ,
        "AdditionalCodeRepositories" :  String, ... ,
        "DefaultCodeRepository" : String,
        "DirectInternetAccess" : String,
        "InstanceType" : String,
        "KmsKeyId" : String,
        "LifecycleConfigName" : String,
        "NotebookInstanceName" : String,
        "RoleArn" : String,
        "RootAccess" : String,
        "SecurityGroupIds" :  String, ... ,
        "SubnetId" : String,
        "Tags" :  Tag, ... ,
        "VolumeSizeInGB" : Integer
      }
  }


snippet AWS::SageMaker::NotebookInstanceLifecycleConfig
  {
    "Type" : "AWS::SageMaker::NotebookInstanceLifecycleConfig",
    "Properties" : {
        "NotebookInstanceLifecycleConfigName" : String,
        "OnCreate" :  NotebookInstanceLifecycleHook, ... ,
        "OnStart" :  NotebookInstanceLifecycleHook, ... 
      }
  }


snippet AWS::SageMaker::Workteam
  {
    "Type" : "AWS::SageMaker::Workteam",
    "Properties" : {
        "Description" : String,
        "MemberDefinitions" :  MemberDefinition, ... ,
        "NotificationConfiguration" : NotificationConfiguration,
        "Tags" :  Tag, ... ,
        "WorkteamName" : String
      }
  }


snippet AWS::SecretsManager::ResourcePolicy
  {
    "Type" : "AWS::SecretsManager::ResourcePolicy",
    "Properties" : {
        "ResourcePolicy" : Json,
        "SecretId" : String
      }
  }


snippet AWS::SecretsManager::RotationSchedule
  {
    "Type" : "AWS::SecretsManager::RotationSchedule",
    "Properties" : {
        "RotationLambdaARN" : String,
        "RotationRules" : RotationRules,
        "SecretId" : String
      }
  }


snippet AWS::SecretsManager::Secret
  {
    "Type" : "AWS::SecretsManager::Secret",
    "Properties" : {
        "Description" : String,
        "GenerateSecretString" : GenerateSecretString,
        "KmsKeyId" : String,
        "Name" : String,
        "SecretString" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::SecretsManager::SecretTargetAttachment
  {
    "Type" : "AWS::SecretsManager::SecretTargetAttachment",
    "Properties" : {
        "SecretId" : String,
        "TargetId" : String,
        "TargetType" : String
      }
  }


snippet AWS::SecurityHub::Hub
  {
    "Type" : "AWS::SecurityHub::Hub",
    "Properties" : {
        "Tags" : Json
      }
  }


snippet AWS::ServiceCatalog::AcceptedPortfolioShare
  {
    "Type" : "AWS::ServiceCatalog::AcceptedPortfolioShare",
    "Properties" : {
        "AcceptLanguage" : String,
        "PortfolioId" : String
      }
  }


snippet AWS::ServiceCatalog::CloudFormationProduct
  {
    "Type" : "AWS::ServiceCatalog::CloudFormationProduct",
    "Properties" : {
        "AcceptLanguage" : String,
        "Description" : String,
        "Distributor" : String,
        "Name" : String,
        "Owner" : String,
        "ProvisioningArtifactParameters" :  ProvisioningArtifactProperties, ... ,
        "SupportDescription" : String,
        "SupportEmail" : String,
        "SupportUrl" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::ServiceCatalog::CloudFormationProvisionedProduct
  {
    "Type" : "AWS::ServiceCatalog::CloudFormationProvisionedProduct",
    "Properties" : {
        "AcceptLanguage" : String,
        "NotificationArns" :  String, ... ,
        "PathId" : String,
        "ProductId" : String,
        "ProductName" : String,
        "ProvisionedProductName" : String,
        "ProvisioningArtifactId" : String,
        "ProvisioningArtifactName" : String,
        "ProvisioningParameters" :  ProvisioningParameter, ... ,
        "ProvisioningPreferences" : ProvisioningPreferences,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::ServiceCatalog::LaunchNotificationConstraint
  {
    "Type" : "AWS::ServiceCatalog::LaunchNotificationConstraint",
    "Properties" : {
        "AcceptLanguage" : String,
        "Description" : String,
        "NotificationArns" :  String, ... ,
        "PortfolioId" : String,
        "ProductId" : String
      }
  }


snippet AWS::ServiceCatalog::LaunchRoleConstraint
  {
    "Type" : "AWS::ServiceCatalog::LaunchRoleConstraint",
    "Properties" : {
        "AcceptLanguage" : String,
        "Description" : String,
        "PortfolioId" : String,
        "ProductId" : String,
        "RoleArn" : String
      }
  }


snippet AWS::ServiceCatalog::LaunchTemplateConstraint
  {
    "Type" : "AWS::ServiceCatalog::LaunchTemplateConstraint",
    "Properties" : {
        "AcceptLanguage" : String,
        "Description" : String,
        "PortfolioId" : String,
        "ProductId" : String,
        "Rules" : String
      }
  }


snippet AWS::ServiceCatalog::Portfolio
  {
    "Type" : "AWS::ServiceCatalog::Portfolio",
    "Properties" : {
        "AcceptLanguage" : String,
        "Description" : String,
        "DisplayName" : String,
        "ProviderName" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::ServiceCatalog::PortfolioPrincipalAssociation
  {
    "Type" : "AWS::ServiceCatalog::PortfolioPrincipalAssociation",
    "Properties" : {
        "AcceptLanguage" : String,
        "PortfolioId" : String,
        "PrincipalARN" : String,
        "PrincipalType" : String
      }
  }


snippet AWS::ServiceCatalog::PortfolioProductAssociation
  {
    "Type" : "AWS::ServiceCatalog::PortfolioProductAssociation",
    "Properties" : {
        "AcceptLanguage" : String,
        "PortfolioId" : String,
        "ProductId" : String,
        "SourcePortfolioId" : String
      }
  }


snippet AWS::ServiceCatalog::PortfolioShare
  {
    "Type" : "AWS::ServiceCatalog::PortfolioShare",
    "Properties" : {
        "AcceptLanguage" : String,
        "AccountId" : String,
        "PortfolioId" : String
      }
  }


snippet AWS::ServiceCatalog::ResourceUpdateConstraint
  {
    "Type" : "AWS::ServiceCatalog::ResourceUpdateConstraint",
    "Properties" : {
        "AcceptLanguage" : String,
        "Description" : String,
        "PortfolioId" : String,
        "ProductId" : String,
        "TagUpdateOnProvisionedProduct" : String
      }
  }


snippet AWS::ServiceCatalog::StackSetConstraint
  {
    "Type" : "AWS::ServiceCatalog::StackSetConstraint",
    "Properties" : {
        "AcceptLanguage" : String,
        "AccountList" :  String, ... ,
        "AdminRole" : String,
        "Description" : String,
        "ExecutionRole" : String,
        "PortfolioId" : String,
        "ProductId" : String,
        "RegionList" :  String, ... ,
        "StackInstanceControl" : String
      }
  }


snippet AWS::ServiceCatalog::TagOption
  {
    "Type" : "AWS::ServiceCatalog::TagOption",
    "Properties" : {
        "Active" : Boolean,
        "Key" : String,
        "Value" : String
      }
  }


snippet AWS::ServiceCatalog::TagOptionAssociation
  {
    "Type" : "AWS::ServiceCatalog::TagOptionAssociation",
    "Properties" : {
        "ResourceId" : String,
        "TagOptionId" : String
      }
  }


snippet AWS::ServiceDiscovery::HttpNamespace
  {
    "Type" : "AWS::ServiceDiscovery::HttpNamespace",
    "Properties" : {
        "Description" : String,
        "Name" : String
      }
  }


snippet AWS::ServiceDiscovery::Instance
  {
    "Type" : "AWS::ServiceDiscovery::Instance",
    "Properties" : {
        "InstanceAttributes" : {Key : Value, ...},
        "InstanceId" : String,
        "ServiceId" : String
      }
  }


snippet AWS::ServiceDiscovery::PrivateDnsNamespace
  {
    "Type" : "AWS::ServiceDiscovery::PrivateDnsNamespace",
    "Properties" : {
        "Description" : String,
        "Name" : String,
        "Vpc" : String
      }
  }


snippet AWS::ServiceDiscovery::PublicDnsNamespace
  {
    "Type" : "AWS::ServiceDiscovery::PublicDnsNamespace",
    "Properties" : {
        "Description" : String,
        "Name" : String
      }
  }


snippet AWS::ServiceDiscovery::Service
  {
    "Type" : "AWS::ServiceDiscovery::Service",
    "Properties" : {
        "Description" : String,
        "DnsConfig" : DnsConfig,
        "HealthCheckConfig" : HealthCheckConfig,
        "HealthCheckCustomConfig" : HealthCheckCustomConfig,
        "Name" : String,
        "NamespaceId" : String
      }
  }


snippet AWS::SES::ConfigurationSet
  {
    "Type" : "AWS::SES::ConfigurationSet",
    "Properties" : {
        "Name" : String
      }
  }


snippet AWS::SES::ConfigurationSetEventDestination
  {
    "Type" : "AWS::SES::ConfigurationSetEventDestination",
    "Properties" : {
        "ConfigurationSetName" : String,
        "EventDestination" : EventDestination
      }
  }


snippet AWS::SES::ReceiptFilter
  {
    "Type" : "AWS::SES::ReceiptFilter",
    "Properties" : {
        "Filter" : Filter
      }
  }


snippet AWS::SES::ReceiptRule
  {
    "Type" : "AWS::SES::ReceiptRule",
    "Properties" : {
        "After" : String,
        "Rule" : Rule,
        "RuleSetName" : String
      }
  }


snippet AWS::SES::ReceiptRuleSet
  {
    "Type" : "AWS::SES::ReceiptRuleSet",
    "Properties" : {
        "RuleSetName" : String
      }
  }


snippet AWS::SES::Template
  {
    "Type" : "AWS::SES::Template",
    "Properties" : {
        "Template" : Template
      }
  }


snippet AWS::SNS::Subscription
  {
    "Type" : "AWS::SNS::Subscription",
    "Properties" : {
        "DeliveryPolicy" : Json,
        "Endpoint" : String,
        "FilterPolicy" : Json,
        "Protocol" : String,
        "RawMessageDelivery" : Boolean,
        "Region" : String,
        "TopicArn" : String
      }
  }


snippet AWS::SSM::Association
  {
    "Type" : "AWS::SSM::Association",
    "Properties" : {
        "AssociationName" : String,
        "DocumentVersion" : String,
        "InstanceId" : String,
        "Name" : String,
        "OutputLocation" : InstanceAssociationOutputLocation,
        "Parameters" : {Key : Value, ...},
        "ScheduleExpression" : String,
        "Targets" :  Target, ... 
      }
  }


snippet AWS::SSM::Document
  {
    "Type" : "AWS::SSM::Document",
    "Properties" : {
        "Content" : Json,
        "DocumentType" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::SSM::MaintenanceWindow
  {
    "Type" : "AWS::SSM::MaintenanceWindow",
    "Properties" : {
        "AllowUnassociatedTargets" : Boolean,
        "Cutoff" : Integer,
        "Description" : String,
        "Duration" : Integer,
        "EndDate" : String,
        "Name" : String,
        "Schedule" : String,
        "ScheduleTimezone" : String,
        "StartDate" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::SSM::MaintenanceWindowTarget
  {
    "Type" : "AWS::SSM::MaintenanceWindowTarget",
    "Properties" : {
        "Description" : String,
        "Name" : String,
        "OwnerInformation" : String,
        "ResourceType" : String,
        "Targets" :  Targets, ... ,
        "WindowId" : String
      }
  }


snippet AWS::SSM::MaintenanceWindowTask
  {
    "Type" : "AWS::SSM::MaintenanceWindowTask",
    "Properties" : {
        "Description" : String,
        "LoggingInfo" : LoggingInfo,
        "MaxConcurrency" : String,
        "MaxErrors" : String,
        "Name" : String,
        "Priority" : Integer,
        "ServiceRoleArn" : String,
        "Targets" :  Target, ... ,
        "TaskArn" : String,
        "TaskInvocationParameters" : TaskInvocationParameters,
        "TaskParameters" : Json,
        "TaskType" : String,
        "WindowId" : String
      }
  }


snippet AWS::SSM::Parameter
  {
    "Type" : "AWS::SSM::Parameter",
    "Properties" : {
        "AllowedPattern" : String,
        "Description" : String,
        "Name" : String,
        "Policies" : String,
        "Tags" : Json,
        "Tier" : String,
        "Type" : String,
        "Value" : String
      }
  }


snippet AWS::SSM::PatchBaseline
  {
    "Type" : "AWS::SSM::PatchBaseline",
    "Properties" : {
        "ApprovalRules" : RuleGroup,
        "ApprovedPatches" :  String, ... ,
        "ApprovedPatchesComplianceLevel" : String,
        "ApprovedPatchesEnableNonSecurity" : Boolean,
        "Description" : String,
        "GlobalFilters" : PatchFilterGroup,
        "Name" : String,
        "OperatingSystem" : String,
        "PatchGroups" :  String, ... ,
        "RejectedPatches" :  String, ... ,
        "RejectedPatchesAction" : String,
        "Sources" :  PatchSource, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::SSM::ResourceDataSync
  {
    "Type" : "AWS::SSM::ResourceDataSync",
    "Properties" : {
        "BucketName" : String,
        "BucketPrefix" : String,
        "BucketRegion" : String,
        "KMSKeyArn" : String,
        "SyncFormat" : String,
        "SyncName" : String
      }
  }


snippet AWS::StepFunctions::Activity
  {
    "Type" : "AWS::StepFunctions::Activity",
    "Properties" : {
        "Name" : String,
        "Tags" :  TagsEntry, ... 
      }
  }


snippet AWS::StepFunctions::StateMachine
  {
    "Type" : "AWS::StepFunctions::StateMachine",
    "Properties" : {
        "DefinitionString" : String,
        "RoleArn" : String,
        "StateMachineName" : String,
        "Tags" :  TagsEntry, ... 
      }
  }


snippet AWS::Transfer::Server
  {
    "Type" : "AWS::Transfer::Server",
    "Properties" : {
        "EndpointDetails" : EndpointDetails,
        "EndpointType" : String,
        "IdentityProviderDetails" : IdentityProviderDetails,
        "IdentityProviderType" : String,
        "LoggingRole" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet AWS::Transfer::User
  {
    "Type" : "AWS::Transfer::User",
    "Properties" : {
        "HomeDirectory" : String,
        "Policy" : String,
        "Role" : String,
        "ServerId" : String,
        "SshPublicKeys" :  SshPublicKey, ... ,
        "Tags" :  Tag, ... ,
        "UserName" : String
      }
  }


snippet AWS::WAF::ByteMatchSet
  {
    "Type" : "AWS::WAF::ByteMatchSet",
    "Properties" : {
        "ByteMatchTuples" :  ByteMatchTuple, ... ,
        "Name" : String
      }
  }


snippet AWS::WAF::IPSet
  {
    "Type" : "AWS::WAF::IPSet",
    "Properties" : {
        "IPSetDescriptors" :  IPSetDescriptor, ... ,
        "Name" : String
      }
  }


snippet AWS::WAF::Rule
  {
    "Type" : "AWS::WAF::Rule",
    "Properties" : {
        "MetricName" : String,
        "Name" : String,
        "Predicates" :  Predicate, ... 
      }
  }


snippet AWS::WAF::SizeConstraintSet
  {
    "Type" : "AWS::WAF::SizeConstraintSet",
    "Properties" : {
        "Name" : String,
        "SizeConstraints" :  SizeConstraint, ... 
      }
  }


snippet AWS::WAF::SqlInjectionMatchSet
  {
    "Type" : "AWS::WAF::SqlInjectionMatchSet",
    "Properties" : {
        "Name" : String,
        "SqlInjectionMatchTuples" :  SqlInjectionMatchTuple, ... 
      }
  }


snippet AWS::WAF::WebACL
  {
    "Type" : "AWS::WAF::WebACL",
    "Properties" : {
        "DefaultAction" : WafAction,
        "MetricName" : String,
        "Name" : String,
        "Rules" :  ActivatedRule, ... 
      }
  }


snippet AWS::WAF::XssMatchSet
  {
    "Type" : "AWS::WAF::XssMatchSet",
    "Properties" : {
        "Name" : String,
        "XssMatchTuples" :  XssMatchTuple, ... 
      }
  }


snippet AWS::WAFRegional::ByteMatchSet
  {
    "Type" : "AWS::WAFRegional::ByteMatchSet",
    "Properties" : {
        "ByteMatchTuples" :  ByteMatchTuple, ... ,
        "Name" : String
      }
  }


snippet AWS::WAFRegional::GeoMatchSet
  {
    "Type" : "AWS::WAFRegional::GeoMatchSet",
    "Properties" : {
        "GeoMatchConstraints" :  GeoMatchConstraint, ... ,
        "Name" : String
      }
  }


snippet AWS::WAFRegional::IPSet
  {
    "Type" : "AWS::WAFRegional::IPSet",
    "Properties" : {
        "IPSetDescriptors" :  IPSetDescriptor, ... ,
        "Name" : String
      }
  }


snippet AWS::WAFRegional::RateBasedRule
  {
    "Type" : "AWS::WAFRegional::RateBasedRule",
    "Properties" : {
        "MatchPredicates" :  Predicate, ... ,
        "MetricName" : String,
        "Name" : String,
        "RateKey" : String,
        "RateLimit" : Integer
      }
  }


snippet AWS::WAFRegional::RegexPatternSet
  {
    "Type" : "AWS::WAFRegional::RegexPatternSet",
    "Properties" : {
        "Name" : String,
        "RegexPatternStrings" :  String, ... 
      }
  }


snippet AWS::WAFRegional::Rule
  {
    "Type" : "AWS::WAFRegional::Rule",
    "Properties" : {
        "MetricName" : String,
        "Name" : String,
        "Predicates" :  Predicate, ... 
      }
  }


snippet AWS::WAFRegional::SizeConstraintSet
  {
    "Type" : "AWS::WAFRegional::SizeConstraintSet",
    "Properties" : {
        "Name" : String,
        "SizeConstraints" :  SizeConstraint, ... 
      }
  }


snippet AWS::WAFRegional::SqlInjectionMatchSet
  {
    "Type" : "AWS::WAFRegional::SqlInjectionMatchSet",
    "Properties" : {
        "Name" : String,
        "SqlInjectionMatchTuples" :  SqlInjectionMatchTuple, ... 
      }
  }


snippet AWS::WAFRegional::WebACL
  {
    "Type" : "AWS::WAFRegional::WebACL",
    "Properties" : {
        "DefaultAction" : Action,
        "MetricName" : String,
        "Name" : String,
        "Rules" :  Rule, ... 
      }
  }


snippet AWS::WAFRegional::WebACLAssociation
  {
    "Type" : "AWS::WAFRegional::WebACLAssociation",
    "Properties" : {
        "ResourceArn" : String,
        "WebACLId" : String
      }
  }


snippet AWS::WAFRegional::XssMatchSet
  {
    "Type" : "AWS::WAFRegional::XssMatchSet",
    "Properties" : {
        "Name" : String,
        "XssMatchTuples" :  XssMatchTuple, ... 
      }
  }


snippet AWS::WorkSpaces::Workspace
  {
    "Type" : "AWS::WorkSpaces::Workspace",
    "Properties" : {
        "BundleId" : String,
        "DirectoryId" : String,
        "RootVolumeEncryptionEnabled" : Boolean,
        "Tags" :  Tag, ... ,
        "UserName" : String,
        "UserVolumeEncryptionEnabled" : Boolean,
        "VolumeEncryptionKey" : String,
        "WorkspaceProperties" : WorkspaceProperties
      }
  }


### Resource Properties snippets
snippet ArchiveRule-accessanalyzer-analyzer-archiverule
  {
    "Filter" :  Filter, ... ,
    "RuleName" : String
  }


snippet Filter-accessanalyzer-analyzer-filter
  {
    "Contains" :  String, ... ,
    "Eq" :  String, ... ,
    "Exists" : Boolean,
    "Neq" :  String, ... ,
    "Property" : String
  }


snippet ConfigurationId-amazonmq-broker-configurationid
  {
    "Id" : String,
    "Revision" : Integer
  }


snippet EncryptionOptions-amazonmq-broker-encryptionoptions
  {
    "KmsKeyId" : String,
    "UseAwsOwnedKey" : Boolean
  }


snippet LogList-amazonmq-broker-loglist
  {
    "Audit" : Boolean,
    "General" : Boolean
  }


snippet MaintenanceWindow-amazonmq-broker-maintenancewindow
  {
    "DayOfWeek" : String,
    "TimeOfDay" : String,
    "TimeZone" : String
  }


snippet TagsEntry-amazonmq-broker-tagsentry
  {
    "Key" : String,
    "Value" : String
  }


snippet User-amazonmq-broker-user
  {
    "ConsoleAccess" : Boolean,
    "Groups" :  String, ... ,
    "Password" : String,
    "Username" : String
  }


snippet TagsEntry-amazonmq-configuration-tagsentry
  {
    "Key" : String,
    "Value" : String
  }


snippet ConfigurationId-amazonmq-configurationassociation-configurationid
  {
    "Id" : String,
    "Revision" : Integer
  }


snippet AutoBranchCreationConfig-amplify-app-autobranchcreationconfig
  {
    "AutoBranchCreationPatterns" :  String, ... ,
    "BasicAuthConfig" : BasicAuthConfig,
    "BuildSpec" : String,
    "EnableAutoBranchCreation" : Boolean,
    "EnableAutoBuild" : Boolean,
    "EnablePullRequestPreview" : Boolean,
    "EnvironmentVariables" :  EnvironmentVariable, ... ,
    "PullRequestEnvironmentName" : String,
    "Stage" : String
  }


snippet BasicAuthConfig-amplify-app-basicauthconfig
  {
    "EnableBasicAuth" : Boolean,
    "Password" : String,
    "Username" : String
  }


snippet CustomRule-amplify-app-customrule
  {
    "Condition" : String,
    "Source" : String,
    "Status" : String,
    "Target" : String
  }


snippet EnvironmentVariable-amplify-app-environmentvariable
  {
    "Name" : String,
    "Value" : String
  }


snippet BasicAuthConfig-amplify-branch-basicauthconfig
  {
    "EnableBasicAuth" : Boolean,
    "Password" : String,
    "Username" : String
  }


snippet EnvironmentVariable-amplify-branch-environmentvariable
  {
    "Name" : String,
    "Value" : String
  }


snippet SubDomainSetting-amplify-domain-subdomainsetting
  {
    "BranchName" : String,
    "Prefix" : String
  }


snippet StageKey-apigateway-apikey-stagekey
  {
    "RestApiId" : String,
    "StageName" : String
  }


snippet AccessLogSetting-apigateway-deployment-accesslogsetting
  {
    "DestinationArn" : String,
    "Format" : String
  }


snippet CanarySetting-apigateway-deployment-canarysetting
  {
    "PercentTraffic" : Double,
    "StageVariableOverrides" : {Key : Value, ...},
    "UseStageCache" : Boolean
  }


snippet DeploymentCanarySettings-apigateway-deployment-deploymentcanarysettings
  {
    "PercentTraffic" : Double,
    "StageVariableOverrides" : {Key : Value, ...},
    "UseStageCache" : Boolean
  }


snippet MethodSetting-apigateway-deployment-stagedescription-methodsetting
  {
    "CacheDataEncrypted" : Boolean,
    "CacheTtlInSeconds" : Integer,
    "CachingEnabled" : Boolean,
    "DataTraceEnabled" : Boolean,
    "HttpMethod" : String,
    "LoggingLevel" : String,
    "MetricsEnabled" : Boolean,
    "ResourcePath" : String,
    "ThrottlingBurstLimit" : Integer,
    "ThrottlingRateLimit" : Double
  }


snippet StageDescription-apigateway-deployment-stagedescription
  {
    "AccessLogSetting" : AccessLogSetting,
    "CacheClusterEnabled" : Boolean,
    "CacheClusterSize" : String,
    "CacheDataEncrypted" : Boolean,
    "CacheTtlInSeconds" : Integer,
    "CachingEnabled" : Boolean,
    "CanarySetting" : CanarySetting,
    "ClientCertificateId" : String,
    "DataTraceEnabled" : Boolean,
    "Description" : String,
    "DocumentationVersion" : String,
    "LoggingLevel" : String,
    "MethodSettings" :  MethodSetting, ... ,
    "MetricsEnabled" : Boolean,
    "Tags" :  Tag, ... ,
    "ThrottlingBurstLimit" : Integer,
    "ThrottlingRateLimit" : Double,
    "TracingEnabled" : Boolean,
    "Variables" : {Key : Value, ...}
  }


snippet Location-apigateway-documentationpart-location
  {
    "Method" : String,
    "Name" : String,
    "Path" : String,
    "StatusCode" : String,
    "Type" : String
  }


snippet EndpointConfiguration-apigateway-domainname-endpointconfiguration
  {
    "Types" :  String, ... 
  }


snippet EndpointConfiguration-apigateway-restapi-endpointconfiguration
  {
    "Types" :  String, ... 
  }


snippet S3Location-apigateway-restapi-s3location
  {
    "Bucket" : String,
    "ETag" : String,
    "Key" : String,
    "Version" : String
  }


snippet AccessLogSetting-apigateway-stage-accesslogsetting
  {
    "DestinationArn" : String,
    "Format" : String
  }


snippet CanarySetting-apigateway-stage-canarysetting
  {
    "DeploymentId" : String,
    "PercentTraffic" : Double,
    "StageVariableOverrides" : {Key : Value, ...},
    "UseStageCache" : Boolean
  }


snippet ApiStage-apigateway-usageplan-apistage
  {
    "ApiId" : String,
    "Stage" : String,
    "Throttle" : {Key : Value, ...}
  }


snippet QuotaSettings-apigateway-usageplan-quotasettings
  {
    "Limit" : Integer,
    "Offset" : Integer,
    "Period" : String
  }


snippet ThrottleSettings-apigateway-usageplan-throttlesettings
  {
    "BurstLimit" : Integer,
    "RateLimit" : Double
  }


snippet DomainNameConfiguration-apigatewayv2-domainname-domainnameconfiguration
  {
    "CertificateArn" : String,
    "CertificateName" : String,
    "EndpointType" : String
  }


snippet ParameterConstraints-apigatewayv2-route-parameterconstraints
  {
    "Required" : Boolean
  }


snippet ParameterConstraints-apigatewayv2-routeresponse-parameterconstraints
  {
    "Required" : Boolean
  }


snippet AccessLogSettings-apigatewayv2-stage-accesslogsettings
  {
    "DestinationArn" : String,
    "Format" : String
  }


snippet RouteSettings-apigatewayv2-stage-routesettings
  {
    "DataTraceEnabled" : Boolean,
    "DetailedMetricsEnabled" : Boolean,
    "LoggingLevel" : String,
    "ThrottlingBurstLimit" : Integer,
    "ThrottlingRateLimit" : Double
  }


snippet IntegrationResponse-apitgateway-method-integration-integrationresponse
  {
    "ContentHandling" : String,
    "ResponseParameters" : {Key : Value, ...},
    "ResponseTemplates" : {Key : Value, ...},
    "SelectionPattern" : String,
    "StatusCode" : String
  }


snippet Integration-apitgateway-method-integration
  {
    "CacheKeyParameters" :  String, ... ,
    "CacheNamespace" : String,
    "ConnectionId" : String,
    "ConnectionType" : String,
    "ContentHandling" : String,
    "Credentials" : String,
    "IntegrationHttpMethod" : String,
    "IntegrationResponses" :  IntegrationResponse, ... ,
    "PassthroughBehavior" : String,
    "RequestParameters" : {Key : Value, ...},
    "RequestTemplates" : {Key : Value, ...},
    "TimeoutInMillis" : Integer,
    "Type" : String,
    "Uri" : String
  }


snippet MethodResponse-apitgateway-method-methodresponse
  {
    "ResponseModels" : {Key : Value, ...},
    "ResponseParameters" : {Key : Value, ...},
    "StatusCode" : String
  }


snippet MethodSetting-apitgateway-stage-methodsetting
  {
    "CacheDataEncrypted" : Boolean,
    "CacheTtlInSeconds" : Integer,
    "CachingEnabled" : Boolean,
    "DataTraceEnabled" : Boolean,
    "HttpMethod" : String,
    "LoggingLevel" : String,
    "MetricsEnabled" : Boolean,
    "ResourcePath" : String,
    "ThrottlingBurstLimit" : Integer,
    "ThrottlingRateLimit" : Double
  }


snippet ScalableTargetAction-applicationautoscaling-scalabletarget-scalabletargetaction
  {
    "MaxCapacity" : Integer,
    "MinCapacity" : Integer
  }


snippet ScheduledAction-applicationautoscaling-scalabletarget-scheduledaction
  {
    "EndTime" : Timestamp,
    "ScalableTargetAction" : ScalableTargetAction,
    "Schedule" : String,
    "ScheduledActionName" : String,
    "StartTime" : Timestamp
  }


snippet SuspendedState-applicationautoscaling-scalabletarget-suspendedstate
  {
    "DynamicScalingInSuspended" : Boolean,
    "DynamicScalingOutSuspended" : Boolean,
    "ScheduledScalingSuspended" : Boolean
  }


snippet CustomizedMetricSpecification-applicationautoscaling-scalingpolicy-customizedmetricspecification
  {
    "Dimensions" :  MetricDimension, ... ,
    "MetricName" : String,
    "Namespace" : String,
    "Statistic" : String,
    "Unit" : String
  }


snippet MetricDimension-applicationautoscaling-scalingpolicy-metricdimension
  {
    "Name" : String,
    "Value" : String
  }


snippet PredefinedMetricSpecification-applicationautoscaling-scalingpolicy-predefinedmetricspecification
  {
    "PredefinedMetricType" : String,
    "ResourceLabel" : String
  }


snippet StepAdjustment-applicationautoscaling-scalingpolicy-stepscalingpolicyconfiguration-stepadjustment
  {
    "MetricIntervalLowerBound" : Double,
    "MetricIntervalUpperBound" : Double,
    "ScalingAdjustment" : Integer
  }


snippet StepScalingPolicyConfiguration-applicationautoscaling-scalingpolicy-stepscalingpolicyconfiguration
  {
    "AdjustmentType" : String,
    "Cooldown" : Integer,
    "MetricAggregationType" : String,
    "MinAdjustmentMagnitude" : Integer,
    "StepAdjustments" :  StepAdjustment, ... 
  }


snippet TargetTrackingScalingPolicyConfiguration-applicationautoscaling-scalingpolicy-targettrackingscalingpolicyconfiguration
  {
    "CustomizedMetricSpecification" : CustomizedMetricSpecification,
    "DisableScaleIn" : Boolean,
    "PredefinedMetricSpecification" : PredefinedMetricSpecification,
    "ScaleInCooldown" : Integer,
    "ScaleOutCooldown" : Integer,
    "TargetValue" : Double
  }


snippet EgressFilter-appmesh-mesh-egressfilter
  {
    "Type" : String
  }


snippet MeshSpec-appmesh-mesh-meshspec
  {
    "EgressFilter" : EgressFilter
  }


snippet TagRef-appmesh-mesh-tagref
  {
    "Key" : String,
    "Value" : String
  }


snippet Duration-appmesh-route-duration
  {
    "Unit" : String,
    "Value" : Integer
  }


snippet GrpcRetryPolicy-appmesh-route-grpcretrypolicy
  {
    "GrpcRetryEvents" :  String, ... ,
    "HttpRetryEvents" :  String, ... ,
    "MaxRetries" : Integer,
    "PerRetryTimeout" : Duration,
    "TcpRetryEvents" :  String, ... 
  }


snippet GrpcRoute-appmesh-route-grpcroute
  {
    "Action" : GrpcRouteAction,
    "Match" : GrpcRouteMatch,
    "RetryPolicy" : GrpcRetryPolicy
  }


snippet GrpcRouteAction-appmesh-route-grpcrouteaction
  {
    "WeightedTargets" :  WeightedTarget, ... 
  }


snippet GrpcRouteMatch-appmesh-route-grpcroutematch
  {
    "Metadata" :  GrpcRouteMetadata, ... ,
    "MethodName" : String,
    "ServiceName" : String
  }


snippet GrpcRouteMetadata-appmesh-route-grpcroutemetadata
  {
    "Invert" : Boolean,
    "Match" : GrpcRouteMetadataMatchMethod,
    "Name" : String
  }


snippet GrpcRouteMetadataMatchMethod-appmesh-route-grpcroutemetadatamatchmethod
  {
    "Exact" : String,
    "Prefix" : String,
    "Range" : MatchRange,
    "Regex" : String,
    "Suffix" : String
  }


snippet HeaderMatchMethod-appmesh-route-headermatchmethod
  {
    "Exact" : String,
    "Prefix" : String,
    "Range" : MatchRange,
    "Regex" : String,
    "Suffix" : String
  }


snippet HttpRetryPolicy-appmesh-route-httpretrypolicy
  {
    "HttpRetryEvents" :  String, ... ,
    "MaxRetries" : Integer,
    "PerRetryTimeout" : Duration,
    "TcpRetryEvents" :  String, ... 
  }


snippet HttpRoute-appmesh-route-httproute
  {
    "Action" : HttpRouteAction,
    "Match" : HttpRouteMatch,
    "RetryPolicy" : HttpRetryPolicy
  }


snippet HttpRouteAction-appmesh-route-httprouteaction
  {
    "WeightedTargets" :  WeightedTarget, ... 
  }


snippet HttpRouteHeader-appmesh-route-httprouteheader
  {
    "Invert" : Boolean,
    "Match" : HeaderMatchMethod,
    "Name" : String
  }


snippet HttpRouteMatch-appmesh-route-httproutematch
  {
    "Headers" :  HttpRouteHeader, ... ,
    "Method" : String,
    "Prefix" : String,
    "Scheme" : String
  }


snippet MatchRange-appmesh-route-matchrange
  {
    "End" : Integer,
    "Start" : Integer
  }


snippet RouteSpec-appmesh-route-routespec
  {
    "GrpcRoute" : GrpcRoute,
    "Http2Route" : HttpRoute,
    "HttpRoute" : HttpRoute,
    "Priority" : Integer,
    "TcpRoute" : TcpRoute
  }


snippet TagRef-appmesh-route-tagref
  {
    "Key" : String,
    "Value" : String
  }


snippet TcpRoute-appmesh-route-tcproute
  {
    "Action" : TcpRouteAction
  }


snippet TcpRouteAction-appmesh-route-tcprouteaction
  {
    "WeightedTargets" :  WeightedTarget, ... 
  }


snippet WeightedTarget-appmesh-route-weightedtarget
  {
    "VirtualNode" : String,
    "Weight" : Integer
  }


snippet AccessLog-appmesh-virtualnode-accesslog
  {
    "File" : FileAccessLog
  }


snippet AwsCloudMapInstanceAttribute-appmesh-virtualnode-awscloudmapinstanceattribute
  {
    "Key" : String,
    "Value" : String
  }


snippet AwsCloudMapServiceDiscovery-appmesh-virtualnode-awscloudmapservicediscovery
  {
    "Attributes" :  AwsCloudMapInstanceAttribute, ... ,
    "NamespaceName" : String,
    "ServiceName" : String
  }


snippet Backend-appmesh-virtualnode-backend
  {
    "VirtualService" : VirtualServiceBackend
  }


snippet DnsServiceDiscovery-appmesh-virtualnode-dnsservicediscovery
  {
    "Hostname" : String
  }


snippet FileAccessLog-appmesh-virtualnode-fileaccesslog
  {
    "Path" : String
  }


snippet HealthCheck-appmesh-virtualnode-healthcheck
  {
    "HealthyThreshold" : Integer,
    "IntervalMillis" : Integer,
    "Path" : String,
    "Port" : Integer,
    "Protocol" : String,
    "TimeoutMillis" : Integer,
    "UnhealthyThreshold" : Integer
  }


snippet Listener-appmesh-virtualnode-listener
  {
    "HealthCheck" : HealthCheck,
    "PortMapping" : PortMapping
  }


snippet Logging-appmesh-virtualnode-logging
  {
    "AccessLog" : AccessLog
  }


snippet PortMapping-appmesh-virtualnode-portmapping
  {
    "Port" : Integer,
    "Protocol" : String
  }


snippet ServiceDiscovery-appmesh-virtualnode-servicediscovery
  {
    "AWSCloudMap" : AwsCloudMapServiceDiscovery,
    "DNS" : DnsServiceDiscovery
  }


snippet TagRef-appmesh-virtualnode-tagref
  {
    "Key" : String,
    "Value" : String
  }


snippet VirtualNodeSpec-appmesh-virtualnode-virtualnodespec
  {
    "Backends" :  Backend, ... ,
    "Listeners" :  Listener, ... ,
    "Logging" : Logging,
    "ServiceDiscovery" : ServiceDiscovery
  }


snippet VirtualServiceBackend-appmesh-virtualnode-virtualservicebackend
  {
    "VirtualServiceName" : String
  }


snippet PortMapping-appmesh-virtualrouter-portmapping
  {
    "Port" : Integer,
    "Protocol" : String
  }


snippet TagRef-appmesh-virtualrouter-tagref
  {
    "Key" : String,
    "Value" : String
  }


snippet VirtualRouterListener-appmesh-virtualrouter-virtualrouterlistener
  {
    "PortMapping" : PortMapping
  }


snippet VirtualRouterSpec-appmesh-virtualrouter-virtualrouterspec
  {
    "Listeners" :  VirtualRouterListener, ... 
  }


snippet TagRef-appmesh-virtualservice-tagref
  {
    "Key" : String,
    "Value" : String
  }


snippet VirtualNodeServiceProvider-appmesh-virtualservice-virtualnodeserviceprovider
  {
    "VirtualNodeName" : String
  }


snippet VirtualRouterServiceProvider-appmesh-virtualservice-virtualrouterserviceprovider
  {
    "VirtualRouterName" : String
  }


snippet VirtualServiceProvider-appmesh-virtualservice-virtualserviceprovider
  {
    "VirtualNode" : VirtualNodeServiceProvider,
    "VirtualRouter" : VirtualRouterServiceProvider
  }


snippet VirtualServiceSpec-appmesh-virtualservice-virtualservicespec
  {
    "Provider" : VirtualServiceProvider
  }


snippet ServiceAccountCredentials-appstream-directoryconfig-serviceaccountcredentials
  {
    "AccountName" : String,
    "AccountPassword" : String
  }


snippet ComputeCapacity-appstream-fleet-computecapacity
  {
    "DesiredInstances" : Integer
  }


snippet DomainJoinInfo-appstream-fleet-domainjoininfo
  {
    "DirectoryName" : String,
    "OrganizationalUnitDistinguishedName" : String
  }


snippet VpcConfig-appstream-fleet-vpcconfig
  {
    "SecurityGroupIds" :  String, ... ,
    "SubnetIds" :  String, ... 
  }


snippet AccessEndpoint-appstream-imagebuilder-accessendpoint
  {
    "EndpointType" : String,
    "VpceId" : String
  }


snippet DomainJoinInfo-appstream-imagebuilder-domainjoininfo
  {
    "DirectoryName" : String,
    "OrganizationalUnitDistinguishedName" : String
  }


snippet VpcConfig-appstream-imagebuilder-vpcconfig
  {
    "SecurityGroupIds" :  String, ... ,
    "SubnetIds" :  String, ... 
  }


snippet AccessEndpoint-appstream-stack-accessendpoint
  {
    "EndpointType" : String,
    "VpceId" : String
  }


snippet ApplicationSettings-appstream-stack-applicationsettings
  {
    "Enabled" : Boolean,
    "SettingsGroup" : String
  }


snippet StorageConnector-appstream-stack-storageconnector
  {
    "ConnectorType" : String,
    "Domains" :  String, ... ,
    "ResourceIdentifier" : String
  }


snippet UserSetting-appstream-stack-usersetting
  {
    "Action" : String,
    "Permission" : String
  }


snippet AuthorizationConfig-appsync-datasource-authorizationconfig
  {
    "AuthorizationType" : String,
    "AwsIamConfig" : AwsIamConfig
  }


snippet AwsIamConfig-appsync-datasource-awsiamconfig
  {
    "SigningRegion" : String,
    "SigningServiceName" : String
  }


snippet DynamoDBConfig-appsync-datasource-dynamodbconfig
  {
    "AwsRegion" : String,
    "TableName" : String,
    "UseCallerCredentials" : Boolean
  }


snippet ElasticsearchConfig-appsync-datasource-elasticsearchconfig
  {
    "AwsRegion" : String,
    "Endpoint" : String
  }


snippet HttpConfig-appsync-datasource-httpconfig
  {
    "AuthorizationConfig" : AuthorizationConfig,
    "Endpoint" : String
  }


snippet LambdaConfig-appsync-datasource-lambdaconfig
  {
    "LambdaFunctionArn" : String
  }


snippet RdsHttpEndpointConfig-appsync-datasource-rdshttpendpointconfig
  {
    "AwsRegion" : String,
    "AwsSecretStoreArn" : String,
    "DatabaseName" : String,
    "DbClusterIdentifier" : String,
    "Schema" : String
  }


snippet RelationalDatabaseConfig-appsync-datasource-relationaldatabaseconfig
  {
    "RdsHttpEndpointConfig" : RdsHttpEndpointConfig,
    "RelationalDatabaseSourceType" : String
  }


snippet AdditionalAuthenticationProvider-appsync-graphqlapi-additionalauthenticationprovider
  {
    "AuthenticationType" : String,
    "OpenIDConnectConfig" : OpenIDConnectConfig,
    "UserPoolConfig" : CognitoUserPoolConfig
  }


snippet CognitoUserPoolConfig-appsync-graphqlapi-cognitouserpoolconfig
  {
    "AppIdClientRegex" : String,
    "AwsRegion" : String,
    "UserPoolId" : String
  }


snippet LogConfig-appsync-graphqlapi-logconfig
  {
    "CloudWatchLogsRoleArn" : String,
    "ExcludeVerboseContent" : Boolean,
    "FieldLogLevel" : String
  }


snippet OpenIDConnectConfig-appsync-graphqlapi-openidconnectconfig
  {
    "AuthTTL" : Double,
    "ClientId" : String,
    "IatTTL" : Double,
    "Issuer" : String
  }


snippet UserPoolConfig-appsync-graphqlapi-userpoolconfig
  {
    "AppIdClientRegex" : String,
    "AwsRegion" : String,
    "DefaultAction" : String,
    "UserPoolId" : String
  }


snippet PipelineConfig-appsync-resolver-pipelineconfig
  {
    "Functions" :  String, ... 
  }


snippet AWS::AutoScaling::AutoScalingGroup-as-group
  {
    "Type" : "AWS::AutoScaling::AutoScalingGroup",
    "Properties" : {
        "AutoScalingGroupName" : String,
        "AvailabilityZones" :  String, ... ,
        "Cooldown" : String,
        "DesiredCapacity" : String,
        "HealthCheckGracePeriod" : Integer,
        "HealthCheckType" : String,
        "InstanceId" : String,
        "LaunchConfigurationName" : String,
        "LaunchTemplate" : LaunchTemplateSpecification,
        "LifecycleHookSpecificationList" :  LifecycleHookSpecification, ... ,
        "LoadBalancerNames" :  String, ... ,
        "MaxSize" : String,
        "MetricsCollection" :  MetricsCollection, ... ,
        "MinSize" : String,
        "MixedInstancesPolicy" : MixedInstancesPolicy,
        "NotificationConfigurations" :  NotificationConfiguration, ... ,
        "PlacementGroup" : String,
        "ServiceLinkedRoleARN" : String,
        "Tags" :  TagProperty, ... ,
        "TargetGroupARNs" :  String, ... ,
        "TerminationPolicies" :  String, ... ,
        "VPCZoneIdentifier" :  String, ... 
      }
  }


snippet BlockDeviceMapping-as-launchconfig-blockdev-mapping
  {
    "DeviceName" : String,
    "Ebs" : BlockDevice,
    "NoDevice" : Boolean,
    "VirtualName" : String
  }


snippet BlockDevice-as-launchconfig-blockdev-template
  {
    "DeleteOnTermination" : Boolean,
    "Encrypted" : Boolean,
    "Iops" : Integer,
    "SnapshotId" : String,
    "VolumeSize" : Integer,
    "VolumeType" : String
  }


snippet AWS::AutoScaling::LaunchConfiguration-as-launchconfig
  {
    "Type" : "AWS::AutoScaling::LaunchConfiguration",
    "Properties" : {
        "AssociatePublicIpAddress" : Boolean,
        "BlockDeviceMappings" :  BlockDeviceMapping, ... ,
        "ClassicLinkVPCId" : String,
        "ClassicLinkVPCSecurityGroups" :  String, ... ,
        "EbsOptimized" : Boolean,
        "IamInstanceProfile" : String,
        "ImageId" : String,
        "InstanceId" : String,
        "InstanceMonitoring" : Boolean,
        "InstanceType" : String,
        "KernelId" : String,
        "KeyName" : String,
        "LaunchConfigurationName" : String,
        "PlacementTenancy" : String,
        "RamDiskId" : String,
        "SecurityGroups" :  String, ... ,
        "SpotPrice" : String,
        "UserData" : String
      }
  }


snippet MetricsCollection-as-metricscollection
  {
    "Granularity" : String,
    "Metrics" :  String, ... 
  }


snippet NotificationConfiguration-as-notificationconfigurations
  {
    "NotificationTypes" :  String, ... ,
    "TopicARN" : String
  }


snippet AWS::AutoScaling::ScalingPolicy-as-policy
  {
    "Type" : "AWS::AutoScaling::ScalingPolicy",
    "Properties" : {
        "AdjustmentType" : String,
        "AutoScalingGroupName" : String,
        "Cooldown" : String,
        "EstimatedInstanceWarmup" : Integer,
        "MetricAggregationType" : String,
        "MinAdjustmentMagnitude" : Integer,
        "PolicyType" : String,
        "ScalingAdjustment" : Integer,
        "StepAdjustments" :  StepAdjustment, ... ,
        "TargetTrackingConfiguration" : TargetTrackingConfiguration
      }
  }


snippet TagProperty-as-tags
  {
    "Key" : String,
    "PropagateAtLaunch" : Boolean,
    "Value" : String
  }


snippet AuthenticationConfiguration-ask-skill-authenticationconfiguration
  {
    "ClientId" : String,
    "ClientSecret" : String,
    "RefreshToken" : String
  }


snippet Overrides-ask-skill-overrides
  {
    "Manifest" : Json
  }


snippet SkillPackage-ask-skill-skillpackage
  {
    "Overrides" : Overrides,
    "S3Bucket" : String,
    "S3BucketRole" : String,
    "S3Key" : String,
    "S3ObjectVersion" : String
  }


snippet InstancesDistribution-autoscaling-autoscalinggroup-instancesdistribution
  {
    "OnDemandAllocationStrategy" : String,
    "OnDemandBaseCapacity" : Integer,
    "OnDemandPercentageAboveBaseCapacity" : Integer,
    "SpotAllocationStrategy" : String,
    "SpotInstancePools" : Integer,
    "SpotMaxPrice" : String
  }


snippet LaunchTemplate-autoscaling-autoscalinggroup-launchtemplate
  {
    "LaunchTemplateSpecification" : LaunchTemplateSpecification,
    "Overrides" :  LaunchTemplateOverrides, ... 
  }


snippet LaunchTemplateOverrides-autoscaling-autoscalinggroup-launchtemplateoverrides
  {
    "InstanceType" : String
  }


snippet LaunchTemplateSpecification-autoscaling-autoscalinggroup-launchtemplatespecification
  {
    "LaunchTemplateId" : String,
    "LaunchTemplateName" : String,
    "Version" : String
  }


snippet LifecycleHookSpecification-autoscaling-autoscalinggroup-lifecyclehookspecification
  {
    "DefaultResult" : String,
    "HeartbeatTimeout" : Integer,
    "LifecycleHookName" : String,
    "LifecycleTransition" : String,
    "NotificationMetadata" : String,
    "NotificationTargetARN" : String,
    "RoleARN" : String
  }


snippet MixedInstancesPolicy-autoscaling-autoscalinggroup-mixedinstancespolicy
  {
    "InstancesDistribution" : InstancesDistribution,
    "LaunchTemplate" : LaunchTemplate
  }


snippet CustomizedMetricSpecification-autoscaling-scalingpolicy-customizedmetricspecification
  {
    "Dimensions" :  MetricDimension, ... ,
    "MetricName" : String,
    "Namespace" : String,
    "Statistic" : String,
    "Unit" : String
  }


snippet MetricDimension-autoscaling-scalingpolicy-metricdimension
  {
    "Name" : String,
    "Value" : String
  }


snippet PredefinedMetricSpecification-autoscaling-scalingpolicy-predefinedmetricspecification
  {
    "PredefinedMetricType" : String,
    "ResourceLabel" : String
  }


snippet StepAdjustment-autoscaling-scalingpolicy-stepadjustments
  {
    "MetricIntervalLowerBound" : Double,
    "MetricIntervalUpperBound" : Double,
    "ScalingAdjustment" : Integer
  }


snippet TargetTrackingConfiguration-autoscaling-scalingpolicy-targettrackingconfiguration
  {
    "CustomizedMetricSpecification" : CustomizedMetricSpecification,
    "DisableScaleIn" : Boolean,
    "PredefinedMetricSpecification" : PredefinedMetricSpecification,
    "TargetValue" : Double
  }


snippet ApplicationSource-autoscalingplans-scalingplan-applicationsource
  {
    "CloudFormationStackARN" : String,
    "TagFilters" :  TagFilter, ... 
  }


snippet CustomizedLoadMetricSpecification-autoscalingplans-scalingplan-customizedloadmetricspecification
  {
    "Dimensions" :  MetricDimension, ... ,
    "MetricName" : String,
    "Namespace" : String,
    "Statistic" : String,
    "Unit" : String
  }


snippet CustomizedScalingMetricSpecification-autoscalingplans-scalingplan-customizedscalingmetricspecification
  {
    "Dimensions" :  MetricDimension, ... ,
    "MetricName" : String,
    "Namespace" : String,
    "Statistic" : String,
    "Unit" : String
  }


snippet MetricDimension-autoscalingplans-scalingplan-metricdimension
  {
    "Name" : String,
    "Value" : String
  }


snippet PredefinedLoadMetricSpecification-autoscalingplans-scalingplan-predefinedloadmetricspecification
  {
    "PredefinedLoadMetricType" : String,
    "ResourceLabel" : String
  }


snippet PredefinedScalingMetricSpecification-autoscalingplans-scalingplan-predefinedscalingmetricspecification
  {
    "PredefinedScalingMetricType" : String,
    "ResourceLabel" : String
  }


snippet ScalingInstruction-autoscalingplans-scalingplan-scalinginstruction
  {
    "CustomizedLoadMetricSpecification" : CustomizedLoadMetricSpecification,
    "DisableDynamicScaling" : Boolean,
    "MaxCapacity" : Integer,
    "MinCapacity" : Integer,
    "PredefinedLoadMetricSpecification" : PredefinedLoadMetricSpecification,
    "PredictiveScalingMaxCapacityBehavior" : String,
    "PredictiveScalingMaxCapacityBuffer" : Integer,
    "PredictiveScalingMode" : String,
    "ResourceId" : String,
    "ScalableDimension" : String,
    "ScalingPolicyUpdateBehavior" : String,
    "ScheduledActionBufferTime" : Integer,
    "ServiceNamespace" : String,
    "TargetTrackingConfigurations" :  TargetTrackingConfiguration, ... 
  }


snippet TagFilter-autoscalingplans-scalingplan-tagfilter
  {
    "Key" : String,
    "Values" :  String, ... 
  }


snippet TargetTrackingConfiguration-autoscalingplans-scalingplan-targettrackingconfiguration
  {
    "CustomizedScalingMetricSpecification" : CustomizedScalingMetricSpecification,
    "DisableScaleIn" : Boolean,
    "EstimatedInstanceWarmup" : Integer,
    "PredefinedScalingMetricSpecification" : PredefinedScalingMetricSpecification,
    "ScaleInCooldown" : Integer,
    "ScaleOutCooldown" : Integer,
    "TargetValue" : Double
  }


snippet BackupPlanResourceType-backup-backupplan-backupplanresourcetype
  {
    "BackupPlanName" : String,
    "BackupPlanRule" :  BackupRuleResourceType, ... 
  }


snippet BackupRuleResourceType-backup-backupplan-backupruleresourcetype
  {
    "CompletionWindowMinutes" : Double,
    "Lifecycle" : LifecycleResourceType,
    "RecoveryPointTags" : Json,
    "RuleName" : String,
    "ScheduleExpression" : String,
    "StartWindowMinutes" : Double,
    "TargetBackupVault" : String
  }


snippet LifecycleResourceType-backup-backupplan-lifecycleresourcetype
  {
    "DeleteAfterDays" : Double,
    "MoveToColdStorageAfterDays" : Double
  }


snippet BackupSelectionResourceType-backup-backupselection-backupselectionresourcetype
  {
    "IamRoleArn" : String,
    "ListOfTags" :  ConditionResourceType, ... ,
    "Resources" :  String, ... ,
    "SelectionName" : String
  }


snippet ConditionResourceType-backup-backupselection-conditionresourcetype
  {
    "ConditionKey" : String,
    "ConditionType" : String,
    "ConditionValue" : String
  }


snippet NotificationObjectType-backup-backupvault-notificationobjecttype
  {
    "BackupVaultEvents" :  String, ... ,
    "SNSTopicArn" : String
  }


snippet ComputeResources-batch-computeenvironment-computeresources
  {
    "AllocationStrategy" : String,
    "BidPercentage" : Integer,
    "DesiredvCpus" : Integer,
    "Ec2KeyPair" : String,
    "ImageId" : String,
    "InstanceRole" : String,
    "InstanceTypes" :  String, ... ,
    "LaunchTemplate" : LaunchTemplateSpecification,
    "MaxvCpus" : Integer,
    "MinvCpus" : Integer,
    "PlacementGroup" : String,
    "SecurityGroupIds" :  String, ... ,
    "SpotIamFleetRole" : String,
    "Subnets" :  String, ... ,
    "Tags" : Json,
    "Type" : String
  }


snippet LaunchTemplateSpecification-batch-computeenvironment-launchtemplatespecification
  {
    "LaunchTemplateId" : String,
    "LaunchTemplateName" : String,
    "Version" : String
  }


snippet LinuxParameters-batch-jobdefinition-containerproperties-linuxparameters
  {
    "Devices" :  Device, ... 
  }


snippet ContainerProperties-batch-jobdefinition-containerproperties
  {
    "Command" :  String, ... ,
    "Environment" :  Environment, ... ,
    "Image" : String,
    "InstanceType" : String,
    "JobRoleArn" : String,
    "LinuxParameters" : LinuxParameters,
    "Memory" : Integer,
    "MountPoints" :  MountPoints, ... ,
    "Privileged" : Boolean,
    "ReadonlyRootFilesystem" : Boolean,
    "ResourceRequirements" :  ResourceRequirement, ... ,
    "Ulimits" :  Ulimit, ... ,
    "User" : String,
    "Vcpus" : Integer,
    "Volumes" :  Volumes, ... 
  }


snippet Device-batch-jobdefinition-device
  {
    "ContainerPath" : String,
    "HostPath" : String,
    "Permissions" :  String, ... 
  }


snippet Environment-batch-jobdefinition-environment
  {
    "Name" : String,
    "Value" : String
  }


snippet MountPoints-batch-jobdefinition-mountpoints
  {
    "ContainerPath" : String,
    "ReadOnly" : Boolean,
    "SourceVolume" : String
  }


snippet NodeProperties-batch-jobdefinition-nodeproperties
  {
    "MainNode" : Integer,
    "NodeRangeProperties" :  NodeRangeProperty, ... ,
    "NumNodes" : Integer
  }


snippet NodeRangeProperty-batch-jobdefinition-noderangeproperty
  {
    "Container" : ContainerProperties,
    "TargetNodes" : String
  }


snippet ResourceRequirement-batch-jobdefinition-resourcerequirement
  {
    "Type" : String,
    "Value" : String
  }


snippet RetryStrategy-batch-jobdefinition-retrystrategy
  {
    "Attempts" : Integer
  }


snippet Timeout-batch-jobdefinition-timeout
  {
    "AttemptDurationSeconds" : Integer
  }


snippet Ulimit-batch-jobdefinition-ulimit
  {
    "HardLimit" : Integer,
    "Name" : String,
    "SoftLimit" : Integer
  }


snippet Volumes-batch-jobdefinition-volumes
  {
    "Host" : VolumesHost,
    "Name" : String
  }


snippet VolumesHost-batch-jobdefinition-volumeshost
  {
    "SourcePath" : String
  }


snippet ComputeEnvironmentOrder-batch-jobqueue-computeenvironmentorder
  {
    "ComputeEnvironment" : String,
    "Order" : Integer
  }


snippet Tier-beanstalk-environment-tier
  {
    "Name" : String,
    "Type" : String,
    "Version" : String
  }


snippet AWS::ElasticBeanstalk::Environment-beanstalk-environment
  {
    "Type" : "AWS::ElasticBeanstalk::Environment",
    "Properties" : {
        "ApplicationName" : String,
        "CNAMEPrefix" : String,
        "Description" : String,
        "EnvironmentName" : String,
        "OptionSettings" :  OptionSetting, ... ,
        "PlatformArn" : String,
        "SolutionStackName" : String,
        "Tags" :  Tag, ... ,
        "TemplateName" : String,
        "Tier" : Tier,
        "VersionLabel" : String
      }
  }


snippet OptionSetting-beanstalk-option-settings
  {
    "Namespace" : String,
    "OptionName" : String,
    "ResourceName" : String,
    "Value" : String
  }


snippet SourceBundle-beanstalk-sourcebundle
  {
    "S3Bucket" : String,
    "S3Key" : String
  }


snippet AWS::ElasticBeanstalk::ApplicationVersion-beanstalk-version
  {
    "Type" : "AWS::ElasticBeanstalk::ApplicationVersion",
    "Properties" : {
        "ApplicationName" : String,
        "Description" : String,
        "SourceBundle" : SourceBundle
      }
  }


snippet AWS::ElasticBeanstalk::Application-beanstalk
  {
    "Type" : "AWS::ElasticBeanstalk::Application",
    "Properties" : {
        "ApplicationName" : String,
        "Description" : String,
        "ResourceLifecycleConfig" : ApplicationResourceLifecycleConfig
      }
  }


snippet BudgetData-budgets-budget-budgetdata
  {
    "BudgetLimit" : Spend,
    "BudgetName" : String,
    "BudgetType" : String,
    "CostFilters" : Json,
    "CostTypes" : CostTypes,
    "PlannedBudgetLimits" : Json,
    "TimePeriod" : TimePeriod,
    "TimeUnit" : String
  }


snippet CostTypes-budgets-budget-costtypes
  {
    "IncludeCredit" : Boolean,
    "IncludeDiscount" : Boolean,
    "IncludeOtherSubscription" : Boolean,
    "IncludeRecurring" : Boolean,
    "IncludeRefund" : Boolean,
    "IncludeSubscription" : Boolean,
    "IncludeSupport" : Boolean,
    "IncludeTax" : Boolean,
    "IncludeUpfront" : Boolean,
    "UseAmortized" : Boolean,
    "UseBlended" : Boolean
  }


snippet Notification-budgets-budget-notification
  {
    "ComparisonOperator" : String,
    "NotificationType" : String,
    "Threshold" : Double,
    "ThresholdType" : String
  }


snippet NotificationWithSubscribers-budgets-budget-notificationwithsubscribers
  {
    "Notification" : Notification,
    "Subscribers" :  Subscriber, ... 
  }


snippet Spend-budgets-budget-spend
  {
    "Amount" : Double,
    "Unit" : String
  }


snippet Subscriber-budgets-budget-subscriber
  {
    "Address" : String,
    "SubscriptionType" : String
  }


snippet TimePeriod-budgets-budget-timeperiod
  {
    "End" : String,
    "Start" : String
  }


snippet DomainValidationOption-certificatemanager-certificate-domainvalidationoption
  {
    "DomainName" : String,
    "ValidationDomain" : String
  }


snippet Repository-cloud9-environmentec2-repository
  {
    "PathComponent" : String,
    "RepositoryUrl" : String
  }


snippet Label-cloudformation-interface-label
  {
    "default" : String
  }


snippet ParameterGroup-cloudformation-interface-parametergroup
  {
    "Label" : Label,
    "Parameters" :  String, ... 
  }


snippet ParameterLabel-cloudformation-interface-parameterlabel
  {
    "ParameterLogicalID" : Label
  }


snippet CloudFrontOriginAccessIdentityConfig-cloudfront-cloudfrontoriginaccessidentity-cloudfrontoriginaccessidentityconfig
  {
    "Comment" : String
  }


snippet CacheBehavior-cloudfront-distribution-cachebehavior
  {
    "AllowedMethods" :  String, ... ,
    "CachedMethods" :  String, ... ,
    "Compress" : Boolean,
    "DefaultTTL" : Double,
    "FieldLevelEncryptionId" : String,
    "ForwardedValues" : ForwardedValues,
    "LambdaFunctionAssociations" :  LambdaFunctionAssociation, ... ,
    "MaxTTL" : Double,
    "MinTTL" : Double,
    "PathPattern" : String,
    "SmoothStreaming" : Boolean,
    "TargetOriginId" : String,
    "TrustedSigners" :  String, ... ,
    "ViewerProtocolPolicy" : String
  }


snippet Cookies-cloudfront-distribution-cookies
  {
    "Forward" : String,
    "WhitelistedNames" :  String, ... 
  }


snippet CustomErrorResponse-cloudfront-distribution-customerrorresponse
  {
    "ErrorCachingMinTTL" : Double,
    "ErrorCode" : Integer,
    "ResponseCode" : Integer,
    "ResponsePagePath" : String
  }


snippet CustomOriginConfig-cloudfront-distribution-customoriginconfig
  {
    "HTTPPort" : Integer,
    "HTTPSPort" : Integer,
    "OriginKeepaliveTimeout" : Integer,
    "OriginProtocolPolicy" : String,
    "OriginReadTimeout" : Integer,
    "OriginSSLProtocols" :  String, ... 
  }


snippet DefaultCacheBehavior-cloudfront-distribution-defaultcachebehavior
  {
    "AllowedMethods" :  String, ... ,
    "CachedMethods" :  String, ... ,
    "Compress" : Boolean,
    "DefaultTTL" : Double,
    "FieldLevelEncryptionId" : String,
    "ForwardedValues" : ForwardedValues,
    "LambdaFunctionAssociations" :  LambdaFunctionAssociation, ... ,
    "MaxTTL" : Double,
    "MinTTL" : Double,
    "SmoothStreaming" : Boolean,
    "TargetOriginId" : String,
    "TrustedSigners" :  String, ... ,
    "ViewerProtocolPolicy" : String
  }


snippet DistributionConfig-cloudfront-distribution-distributionconfig
  {
    "Aliases" :  String, ... ,
    "CacheBehaviors" :  CacheBehavior, ... ,
    "Comment" : String,
    "CustomErrorResponses" :  CustomErrorResponse, ... ,
    "DefaultCacheBehavior" : DefaultCacheBehavior,
    "DefaultRootObject" : String,
    "Enabled" : Boolean,
    "HttpVersion" : String,
    "IPV6Enabled" : Boolean,
    "Logging" : Logging,
    "Origins" :  Origin, ... ,
    "PriceClass" : String,
    "Restrictions" : Restrictions,
    "ViewerCertificate" : ViewerCertificate,
    "WebACLId" : String
  }


snippet ForwardedValues-cloudfront-distribution-forwardedvalues
  {
    "Cookies" : Cookies,
    "Headers" :  String, ... ,
    "QueryString" : Boolean,
    "QueryStringCacheKeys" :  String, ... 
  }


snippet GeoRestriction-cloudfront-distribution-georestriction
  {
    "Locations" :  String, ... ,
    "RestrictionType" : String
  }


snippet LambdaFunctionAssociation-cloudfront-distribution-lambdafunctionassociation
  {
    "EventType" : String,
    "LambdaFunctionARN" : String
  }


snippet Logging-cloudfront-distribution-logging
  {
    "Bucket" : String,
    "IncludeCookies" : Boolean,
    "Prefix" : String
  }


snippet Origin-cloudfront-distribution-origin
  {
    "CustomOriginConfig" : CustomOriginConfig,
    "DomainName" : String,
    "Id" : String,
    "OriginCustomHeaders" :  OriginCustomHeader, ... ,
    "OriginPath" : String,
    "S3OriginConfig" : S3OriginConfig
  }


snippet OriginCustomHeader-cloudfront-distribution-origincustomheader
  {
    "HeaderName" : String,
    "HeaderValue" : String
  }


snippet Restrictions-cloudfront-distribution-restrictions
  {
    "GeoRestriction" : GeoRestriction
  }


snippet S3OriginConfig-cloudfront-distribution-s3originconfig
  {
    "OriginAccessIdentity" : String
  }


snippet ViewerCertificate-cloudfront-distribution-viewercertificate
  {
    "AcmCertificateArn" : String,
    "CloudFrontDefaultCertificate" : Boolean,
    "IamCertificateId" : String,
    "MinimumProtocolVersion" : String,
    "SslSupportMethod" : String
  }


snippet Logging-cloudfront-streamingdistribution-logging
  {
    "Bucket" : String,
    "Enabled" : Boolean,
    "Prefix" : String
  }


snippet S3Origin-cloudfront-streamingdistribution-s3origin
  {
    "DomainName" : String,
    "OriginAccessIdentity" : String
  }


snippet StreamingDistributionConfig-cloudfront-streamingdistribution-streamingdistributionconfig
  {
    "Aliases" :  String, ... ,
    "Comment" : String,
    "Enabled" : Boolean,
    "Logging" : Logging,
    "PriceClass" : String,
    "S3Origin" : S3Origin,
    "TrustedSigners" : TrustedSigners
  }


snippet TrustedSigners-cloudfront-streamingdistribution-trustedsigners
  {
    "AwsAccountNumbers" :  String, ... ,
    "Enabled" : Boolean
  }


snippet DataResource-cloudtrail-trail-dataresource
  {
    "Type" : String,
    "Values" :  String, ... 
  }


snippet EventSelector-cloudtrail-trail-eventselector
  {
    "DataResources" :  DataResource, ... ,
    "IncludeManagementEvents" : Boolean,
    "ReadWriteType" : String
  }


snippet Metric-cloudwatch-alarm-metric
  {
    "Dimensions" :  Dimension, ... ,
    "MetricName" : String,
    "Namespace" : String
  }


snippet MetricDataQuery-cloudwatch-alarm-metricdataquery
  {
    "Expression" : String,
    "Id" : String,
    "Label" : String,
    "MetricStat" : MetricStat,
    "ReturnData" : Boolean
  }


snippet MetricStat-cloudwatch-alarm-metricstat
  {
    "Metric" : Metric,
    "Period" : Integer,
    "Stat" : String,
    "Unit" : String
  }


snippet Configuration-cloudwatch-anomalydetector-configuration
  {
    "ExcludedTimeRanges" :  Range, ... ,
    "MetricTimeZone" : String
  }


snippet Dimension-cloudwatch-anomalydetector-dimension
  {
    "Name" : String,
    "Value" : String
  }


snippet Range-cloudwatch-anomalydetector-range
  {
    "EndTime" : String,
    "StartTime" : String
  }


snippet Artifacts-codebuild-project-artifacts
  {
    "ArtifactIdentifier" : String,
    "EncryptionDisabled" : Boolean,
    "Location" : String,
    "Name" : String,
    "NamespaceType" : String,
    "OverrideArtifactName" : Boolean,
    "Packaging" : String,
    "Path" : String,
    "Type" : String
  }


snippet CloudWatchLogsConfig-codebuild-project-cloudwatchlogsconfig
  {
    "GroupName" : String,
    "Status" : String,
    "StreamName" : String
  }


snippet Environment-codebuild-project-environment
  {
    "Certificate" : String,
    "ComputeType" : String,
    "EnvironmentVariables" :  EnvironmentVariable, ... ,
    "Image" : String,
    "ImagePullCredentialsType" : String,
    "PrivilegedMode" : Boolean,
    "RegistryCredential" : RegistryCredential,
    "Type" : String
  }


snippet EnvironmentVariable-codebuild-project-environmentvariable
  {
    "Name" : String,
    "Type" : String,
    "Value" : String
  }


snippet GitSubmodulesConfig-codebuild-project-gitsubmodulesconfig
  {
    "FetchSubmodules" : Boolean
  }


snippet LogsConfig-codebuild-project-logsconfig
  {
    "CloudWatchLogs" : CloudWatchLogsConfig,
    "S3Logs" : S3LogsConfig
  }


snippet ProjectCache-codebuild-project-projectcache
  {
    "Location" : String,
    "Modes" :  String, ... ,
    "Type" : String
  }


snippet ProjectSourceVersion-codebuild-project-projectsourceversion
  {
    "SourceIdentifier" : String,
    "SourceVersion" : String
  }


snippet ProjectTriggers-codebuild-project-projecttriggers
  {
    "FilterGroups" :  FilterGroup, ... ,
    "Webhook" : Boolean
  }


snippet RegistryCredential-codebuild-project-registrycredential
  {
    "Credential" : String,
    "CredentialProvider" : String
  }


snippet S3LogsConfig-codebuild-project-s3logsconfig
  {
    "EncryptionDisabled" : Boolean,
    "Location" : String,
    "Status" : String
  }


snippet Source-codebuild-project-source
  {
    "Auth" : SourceAuth,
    "BuildSpec" : String,
    "GitCloneDepth" : Integer,
    "GitSubmodulesConfig" : GitSubmodulesConfig,
    "InsecureSsl" : Boolean,
    "Location" : String,
    "ReportBuildStatus" : Boolean,
    "SourceIdentifier" : String,
    "Type" : String
  }


snippet SourceAuth-codebuild-project-sourceauth
  {
    "Resource" : String,
    "Type" : String
  }


snippet VpcConfig-codebuild-project-vpcconfig
  {
    "SecurityGroupIds" :  String, ... ,
    "Subnets" :  String, ... ,
    "VpcId" : String
  }


snippet WebhookFilter-codebuild-project-webhookfilter
  {
    "ExcludeMatchedPattern" : Boolean,
    "Pattern" : String,
    "Type" : String
  }


snippet Code-codecommit-repository-code
  {
    "S3" : S3
  }


snippet RepositoryTrigger-codecommit-repository-repositorytrigger
  {
    "Branches" :  String, ... ,
    "CustomData" : String,
    "DestinationArn" : String,
    "Events" :  String, ... ,
    "Name" : String
  }


snippet S3-codecommit-repository-s3
  {
    "Bucket" : String,
    "Key" : String,
    "ObjectVersion" : String
  }


snippet MinimumHealthyHosts-codedeploy-deploymentconfig-minimumhealthyhosts
  {
    "Type" : String,
    "Value" : Integer
  }


snippet Alarm-codedeploy-deploymentgroup-alarm
  {
    "Name" : String
  }


snippet AlarmConfiguration-codedeploy-deploymentgroup-alarmconfiguration
  {
    "Alarms" :  Alarm, ... ,
    "Enabled" : Boolean,
    "IgnorePollAlarmFailure" : Boolean
  }


snippet AutoRollbackConfiguration-codedeploy-deploymentgroup-autorollbackconfiguration
  {
    "Enabled" : Boolean,
    "Events" :  String, ... 
  }


snippet GitHubLocation-codedeploy-deploymentgroup-deployment-revision-githublocation
  {
    "CommitId" : String,
    "Repository" : String
  }


snippet S3Location-codedeploy-deploymentgroup-deployment-revision-s3location
  {
    "Bucket" : String,
    "BundleType" : String,
    "ETag" : String,
    "Key" : String,
    "Version" : String
  }


snippet RevisionLocation-codedeploy-deploymentgroup-deployment-revision
  {
    "GitHubLocation" : GitHubLocation,
    "RevisionType" : String,
    "S3Location" : S3Location
  }


snippet Deployment-codedeploy-deploymentgroup-deployment
  {
    "Description" : String,
    "IgnoreApplicationStopFailures" : Boolean,
    "Revision" : RevisionLocation
  }


snippet DeploymentStyle-codedeploy-deploymentgroup-deploymentstyle
  {
    "DeploymentOption" : String,
    "DeploymentType" : String
  }


snippet EC2TagFilter-codedeploy-deploymentgroup-ec2tagfilter
  {
    "Key" : String,
    "Type" : String,
    "Value" : String
  }


snippet EC2TagSet-codedeploy-deploymentgroup-ec2tagset
  {
    "Ec2TagSetList" :  EC2TagSetListObject, ... 
  }


snippet EC2TagSetListObject-codedeploy-deploymentgroup-ec2tagsetlistobject
  {
    "Ec2TagGroup" :  EC2TagFilter, ... 
  }


snippet ELBInfo-codedeploy-deploymentgroup-elbinfo
  {
    "Name" : String
  }


snippet LoadBalancerInfo-codedeploy-deploymentgroup-loadbalancerinfo
  {
    "ElbInfoList" :  ELBInfo, ... ,
    "TargetGroupInfoList" :  TargetGroupInfo, ... 
  }


snippet OnPremisesTagSet-codedeploy-deploymentgroup-onpremisestagset
  {
    "OnPremisesTagSetList" :  OnPremisesTagSetListObject, ... 
  }


snippet OnPremisesTagSetListObject-codedeploy-deploymentgroup-onpremisestagsetlistobject
  {
    "OnPremisesTagGroup" :  TagFilter, ... 
  }


snippet TagFilter-codedeploy-deploymentgroup-tagfilter
  {
    "Key" : String,
    "Type" : String,
    "Value" : String
  }


snippet TargetGroupInfo-codedeploy-deploymentgroup-targetgroupinfo
  {
    "Name" : String
  }


snippet TriggerConfig-codedeploy-deploymentgroup-triggerconfig
  {
    "TriggerEvents" :  String, ... ,
    "TriggerName" : String,
    "TriggerTargetArn" : String
  }


snippet ArtifactDetails-codepipeline-customactiontype-artifactdetails
  {
    "MaximumCount" : Integer,
    "MinimumCount" : Integer
  }


snippet ConfigurationProperties-codepipeline-customactiontype-configurationproperties
  {
    "Description" : String,
    "Key" : Boolean,
    "Name" : String,
    "Queryable" : Boolean,
    "Required" : Boolean,
    "Secret" : Boolean,
    "Type" : String
  }


snippet Settings-codepipeline-customactiontype-settings
  {
    "EntityUrlTemplate" : String,
    "ExecutionUrlTemplate" : String,
    "RevisionUrlTemplate" : String,
    "ThirdPartyConfigurationUrl" : String
  }


snippet EncryptionKey-codepipeline-pipeline-artifactstore-encryptionkey
  {
    "Id" : String,
    "Type" : String
  }


snippet ArtifactStore-codepipeline-pipeline-artifactstore
  {
    "EncryptionKey" : EncryptionKey,
    "Location" : String,
    "Type" : String
  }


snippet ArtifactStoreMap-codepipeline-pipeline-artifactstoremap
  {
    "ArtifactStore" : ArtifactStore,
    "Region" : String
  }


snippet StageTransition-codepipeline-pipeline-disableinboundstagetransitions
  {
    "Reason" : String,
    "StageName" : String
  }


snippet ActionTypeId-codepipeline-pipeline-stages-actions-actiontypeid
  {
    "Category" : String,
    "Owner" : String,
    "Provider" : String,
    "Version" : String
  }


snippet InputArtifact-codepipeline-pipeline-stages-actions-inputartifacts
  {
    "Name" : String
  }


snippet OutputArtifact-codepipeline-pipeline-stages-actions-outputartifacts
  {
    "Name" : String
  }


snippet ActionDeclaration-codepipeline-pipeline-stages-actions
  {
    "ActionTypeId" : ActionTypeId,
    "Configuration" : Json,
    "InputArtifacts" :  InputArtifact, ... ,
    "Name" : String,
    "OutputArtifacts" :  OutputArtifact, ... ,
    "Region" : String,
    "RoleArn" : String,
    "RunOrder" : Integer
  }


snippet BlockerDeclaration-codepipeline-pipeline-stages-blockers
  {
    "Name" : String,
    "Type" : String
  }


snippet StageDeclaration-codepipeline-pipeline-stages
  {
    "Actions" :  ActionDeclaration, ... ,
    "Blockers" :  BlockerDeclaration, ... ,
    "Name" : String
  }


snippet WebhookAuthConfiguration-codepipeline-webhook-webhookauthconfiguration
  {
    "AllowedIPRange" : String,
    "SecretToken" : String
  }


snippet WebhookFilterRule-codepipeline-webhook-webhookfilterrule
  {
    "JsonPath" : String,
    "MatchEquals" : String
  }


snippet Code-codestar-githubrepository-code
  {
    "S3" : S3
  }


snippet S3-codestar-githubrepository-s3
  {
    "Bucket" : String,
    "Key" : String,
    "ObjectVersion" : String
  }


snippet Target-codestarnotifications-notificationrule-target
  {
    "TargetAddress" : String,
    "TargetType" : String
  }


snippet CognitoIdentityProvider-cognito-identitypool-cognitoidentityprovider
  {
    "ClientId" : String,
    "ProviderName" : String,
    "ServerSideTokenCheck" : Boolean
  }


snippet CognitoStreams-cognito-identitypool-cognitostreams
  {
    "RoleArn" : String,
    "StreamName" : String,
    "StreamingStatus" : String
  }


snippet PushSync-cognito-identitypool-pushsync
  {
    "ApplicationArns" :  String, ... ,
    "RoleArn" : String
  }


snippet MappingRule-cognito-identitypoolroleattachment-mappingrule
  {
    "Claim" : String,
    "MatchType" : String,
    "RoleARN" : String,
    "Value" : String
  }


snippet RoleMapping-cognito-identitypoolroleattachment-rolemapping
  {
    "AmbiguousRoleResolution" : String,
    "RulesConfiguration" : RulesConfigurationType,
    "Type" : String
  }


snippet RulesConfigurationType-cognito-identitypoolroleattachment-rulesconfigurationtype
  {
    "Rules" :  MappingRule, ... 
  }


snippet AdminCreateUserConfig-cognito-userpool-admincreateuserconfig
  {
    "AllowAdminCreateUserOnly" : Boolean,
    "InviteMessageTemplate" : InviteMessageTemplate,
    "UnusedAccountValidityDays" : Double
  }


snippet DeviceConfiguration-cognito-userpool-deviceconfiguration
  {
    "ChallengeRequiredOnNewDevice" : Boolean,
    "DeviceOnlyRememberedOnUserPrompt" : Boolean
  }


snippet EmailConfiguration-cognito-userpool-emailconfiguration
  {
    "EmailSendingAccount" : String,
    "ReplyToEmailAddress" : String,
    "SourceArn" : String
  }


snippet InviteMessageTemplate-cognito-userpool-invitemessagetemplate
  {
    "EmailMessage" : String,
    "EmailSubject" : String,
    "SMSMessage" : String
  }


snippet LambdaConfig-cognito-userpool-lambdaconfig
  {
    "CreateAuthChallenge" : String,
    "CustomMessage" : String,
    "DefineAuthChallenge" : String,
    "PostAuthentication" : String,
    "PostConfirmation" : String,
    "PreAuthentication" : String,
    "PreSignUp" : String,
    "VerifyAuthChallengeResponse" : String
  }


snippet NumberAttributeConstraints-cognito-userpool-numberattributeconstraints
  {
    "MaxValue" : String,
    "MinValue" : String
  }


snippet PasswordPolicy-cognito-userpool-passwordpolicy
  {
    "MinimumLength" : Integer,
    "RequireLowercase" : Boolean,
    "RequireNumbers" : Boolean,
    "RequireSymbols" : Boolean,
    "RequireUppercase" : Boolean,
    "TemporaryPasswordValidityDays" : Double
  }


snippet Policies-cognito-userpool-policies
  {
    "PasswordPolicy" : PasswordPolicy
  }


snippet SchemaAttribute-cognito-userpool-schemaattribute
  {
    "AttributeDataType" : String,
    "DeveloperOnlyAttribute" : Boolean,
    "Mutable" : Boolean,
    "Name" : String,
    "NumberAttributeConstraints" : NumberAttributeConstraints,
    "Required" : Boolean,
    "StringAttributeConstraints" : StringAttributeConstraints
  }


snippet SmsConfiguration-cognito-userpool-smsconfiguration
  {
    "ExternalId" : String,
    "SnsCallerArn" : String
  }


snippet StringAttributeConstraints-cognito-userpool-stringattributeconstraints
  {
    "MaxLength" : String,
    "MinLength" : String
  }


snippet UserPoolAddOns-cognito-userpool-userpooladdons
  {
    "AdvancedSecurityMode" : String
  }


snippet VerificationMessageTemplate-cognito-userpool-verificationmessagetemplate
  {
    "DefaultEmailOption" : String,
    "EmailMessage" : String,
    "EmailMessageByLink" : String,
    "EmailSubject" : String,
    "EmailSubjectByLink" : String,
    "SmsMessage" : String
  }


snippet AnalyticsConfiguration-cognito-userpoolclient-analyticsconfiguration
  {
    "ApplicationId" : String,
    "ExternalId" : String,
    "RoleArn" : String,
    "UserDataShared" : Boolean
  }


snippet CustomDomainConfigType-cognito-userpooldomain-customainconfigtype
  {
    "CertificateArn" : String
  }


snippet ResourceServerScopeType-cognito-userpoolresourceserver-resourceserverscopetype
  {
    "ScopeDescription" : String,
    "ScopeName" : String
  }


snippet AccountTakeoverActionsType-cognito-userpoolriskconfigurationattachment-accounttakeoveractionstype
  {
    "HighAction" : AccountTakeoverActionType,
    "LowAction" : AccountTakeoverActionType,
    "MediumAction" : AccountTakeoverActionType
  }


snippet AccountTakeoverActionType-cognito-userpoolriskconfigurationattachment-accounttakeoveractiontype
  {
    "EventAction" : String,
    "Notify" : Boolean
  }


snippet AccountTakeoverRiskConfigurationType-cognito-userpoolriskconfigurationattachment-accounttakeoverriskconfigurationtype
  {
    "Actions" : AccountTakeoverActionsType,
    "NotifyConfiguration" : NotifyConfigurationType
  }


snippet CompromisedCredentialsActionsType-cognito-userpoolriskconfigurationattachment-compromisedcredentialsactionstype
  {
    "EventAction" : String
  }


snippet CompromisedCredentialsRiskConfigurationType-cognito-userpoolriskconfigurationattachment-compromisedcredentialsriskconfigurationtype
  {
    "Actions" : CompromisedCredentialsActionsType,
    "EventFilter" :  String, ... 
  }


snippet NotifyConfigurationType-cognito-userpoolriskconfigurationattachment-notifyconfigurationtype
  {
    "BlockEmail" : NotifyEmailType,
    "From" : String,
    "MfaEmail" : NotifyEmailType,
    "NoActionEmail" : NotifyEmailType,
    "ReplyTo" : String,
    "SourceArn" : String
  }


snippet NotifyEmailType-cognito-userpoolriskconfigurationattachment-notifyemailtype
  {
    "HtmlBody" : String,
    "Subject" : String,
    "TextBody" : String
  }


snippet RiskExceptionConfigurationType-cognito-userpoolriskconfigurationattachment-riskexceptionconfigurationtype
  {
    "BlockedIPRangeList" :  String, ... ,
    "SkippedIPRangeList" :  String, ... 
  }


snippet AttributeType-cognito-userpooluser-attributetype
  {
    "Name" : String,
    "Value" : String
  }


snippet Scope-config-configrule-scope
  {
    "ComplianceResourceId" : String,
    "ComplianceResourceTypes" :  String, ... ,
    "TagKey" : String,
    "TagValue" : String
  }


snippet SourceDetail-config-configrule-source-sourcedetails
  {
    "EventSource" : String,
    "MaximumExecutionFrequency" : String,
    "MessageType" : String
  }


snippet Source-config-configrule-source
  {
    "Owner" : String,
    "SourceDetails" :  SourceDetail, ... ,
    "SourceIdentifier" : String
  }


snippet AccountAggregationSource-config-configurationaggregator-accountaggregationsource
  {
    "AccountIds" :  String, ... ,
    "AllAwsRegions" : Boolean,
    "AwsRegions" :  String, ... 
  }


snippet OrganizationAggregationSource-config-configurationaggregator-organizationaggregationsource
  {
    "AllAwsRegions" : Boolean,
    "AwsRegions" :  String, ... ,
    "RoleArn" : String
  }


snippet RecordingGroup-config-configurationrecorder-recordinggroup
  {
    "AllSupported" : Boolean,
    "IncludeGlobalResourceTypes" : Boolean,
    "ResourceTypes" :  String, ... 
  }


snippet ConfigSnapshotDeliveryProperties-config-deliverychannel-configsnapshotdeliveryproperties
  {
    "DeliveryFrequency" : String
  }


snippet OrganizationCustomRuleMetadata-config-organizationconfigrule-organizationcustomrulemetadata
  {
    "Description" : String,
    "InputParameters" : String,
    "LambdaFunctionArn" : String,
    "MaximumExecutionFrequency" : String,
    "OrganizationConfigRuleTriggerTypes" :  String, ... ,
    "ResourceIdScope" : String,
    "ResourceTypesScope" :  String, ... ,
    "TagKeyScope" : String,
    "TagValueScope" : String
  }


snippet OrganizationManagedRuleMetadata-config-organizationconfigrule-organizationmanagedrulemetadata
  {
    "Description" : String,
    "InputParameters" : String,
    "MaximumExecutionFrequency" : String,
    "ResourceIdScope" : String,
    "ResourceTypesScope" :  String, ... ,
    "RuleIdentifier" : String,
    "TagKeyScope" : String,
    "TagValueScope" : String
  }


snippet ExecutionControls-config-remediationconfiguration-executioncontrols
  {
    "SsmControls" : SsmControls
  }


snippet RemediationParameterValue-config-remediationconfiguration-remediationparametervalue
  {
    "ResourceValue" : ResourceValue,
    "StaticValue" : StaticValue
  }


snippet ResourceValue-config-remediationconfiguration-resourcevalue
  {
    "Value" : String
  }


snippet SsmControls-config-remediationconfiguration-ssmcontrols
  {
    "ConcurrentExecutionRatePercentage" : Integer,
    "ErrorPercentage" : Integer
  }


snippet StaticValue-config-remediationconfiguration-staticvalue
  {
    "Values" :  String, ... 
  }


snippet AWS::CloudWatch::Alarm-cw-alarm
  {
    "Type" : "AWS::CloudWatch::Alarm",
    "Properties" : {
        "ActionsEnabled" : Boolean,
        "AlarmActions" :  String, ... ,
        "AlarmDescription" : String,
        "AlarmName" : String,
        "ComparisonOperator" : String,
        "DatapointsToAlarm" : Integer,
        "Dimensions" :  Dimension, ... ,
        "EvaluateLowSampleCountPercentile" : String,
        "EvaluationPeriods" : Integer,
        "ExtendedStatistic" : String,
        "InsufficientDataActions" :  String, ... ,
        "MetricName" : String,
        "Metrics" :  MetricDataQuery, ... ,
        "Namespace" : String,
        "OKActions" :  String, ... ,
        "Period" : Integer,
        "Statistic" : String,
        "Threshold" : Double,
        "ThresholdMetricId" : String,
        "TreatMissingData" : String,
        "Unit" : String
      }
  }


snippet Dimension-cw-dimension
  {
    "Name" : String,
    "Value" : String
  }


snippet ParameterAttribute-datapipeline-pipeline-parameterobjects-attributes
  {
    "Key" : String,
    "StringValue" : String
  }


snippet ParameterObject-datapipeline-pipeline-parameterobjects
  {
    "Attributes" :  ParameterAttribute, ... ,
    "Id" : String
  }


snippet ParameterValue-datapipeline-pipeline-parametervalues
  {
    "Id" : String,
    "StringValue" : String
  }


snippet Field-datapipeline-pipeline-pipelineobjects-fields
  {
    "Key" : String,
    "RefValue" : String,
    "StringValue" : String
  }


snippet PipelineObject-datapipeline-pipeline-pipelineobjects
  {
    "Fields" :  Field, ... ,
    "Id" : String,
    "Name" : String
  }


snippet PipelineTag-datapipeline-pipeline-pipelinetags
  {
    "Key" : String,
    "Value" : String
  }


snippet SSESpecification-dax-cluster-ssespecification
  {
    "SSEEnabled" : Boolean
  }


snippet VpcSettings-directoryservice-microsoftad-vpcsettings
  {
    "SubnetIds" :  String, ... ,
    "VpcId" : String
  }


snippet VpcSettings-directoryservice-simplead-vpcsettings
  {
    "SubnetIds" :  String, ... ,
    "VpcId" : String
  }


snippet CreateRule-dlm-lifecyclepolicy-createrule
  {
    "Interval" : Integer,
    "IntervalUnit" : String,
    "Times" :  String, ... 
  }


snippet PolicyDetails-dlm-lifecyclepolicy-policydetails
  {
    "ResourceTypes" :  String, ... ,
    "Schedules" :  Schedule, ... ,
    "TargetTags" :  Tag, ... 
  }


snippet RetainRule-dlm-lifecyclepolicy-retainrule
  {
    "Count" : Integer
  }


snippet Schedule-dlm-lifecyclepolicy-schedule
  {
    "CopyTags" : Boolean,
    "CreateRule" : CreateRule,
    "Name" : String,
    "RetainRule" : RetainRule,
    "TagsToAdd" :  Tag, ... 
  }


snippet DynamoDbSettings-dms-endpoint-dynamodbsettings
  {
    "ServiceAccessRoleArn" : String
  }


snippet ElasticsearchSettings-dms-endpoint-elasticsearchsettings
  {
    "EndpointUri" : String,
    "ErrorRetryDuration" : Integer,
    "FullLoadErrorPercentage" : Integer,
    "ServiceAccessRoleArn" : String
  }


snippet KinesisSettings-dms-endpoint-kinesissettings
  {
    "MessageFormat" : String,
    "ServiceAccessRoleArn" : String,
    "StreamArn" : String
  }


snippet MongoDbSettings-dms-endpoint-mongodbsettings
  {
    "AuthMechanism" : String,
    "AuthSource" : String,
    "AuthType" : String,
    "DatabaseName" : String,
    "DocsToInvestigate" : String,
    "ExtractDocId" : String,
    "NestingLevel" : String,
    "Password" : String,
    "Port" : Integer,
    "ServerName" : String,
    "Username" : String
  }


snippet S3Settings-dms-endpoint-s3settings
  {
    "BucketFolder" : String,
    "BucketName" : String,
    "CompressionType" : String,
    "CsvDelimiter" : String,
    "CsvRowDelimiter" : String,
    "ExternalTableDefinition" : String,
    "ServiceAccessRoleArn" : String
  }


snippet AttributeDefinition-dynamodb-attributedef
  {
    "AttributeName" : String,
    "AttributeType" : String
  }


snippet GlobalSecondaryIndex-dynamodb-gsi
  {
    "IndexName" : String,
    "KeySchema" :  KeySchema, ... ,
    "Projection" : Projection,
    "ProvisionedThroughput" : ProvisionedThroughput
  }


snippet KeySchema-dynamodb-keyschema
  {
    "AttributeName" : String,
    "KeyType" : String
  }


snippet LocalSecondaryIndex-dynamodb-lsi
  {
    "IndexName" : String,
    "KeySchema" :  KeySchema, ... ,
    "Projection" : Projection
  }


snippet Projection-dynamodb-projectionobject
  {
    "NonKeyAttributes" :  String, ... ,
    "ProjectionType" : String
  }


snippet ProvisionedThroughput-dynamodb-provisionedthroughput
  {
    "ReadCapacityUnits" : Long,
    "WriteCapacityUnits" : Long
  }


snippet StreamSpecification-dynamodb-streamspecification
  {
    "StreamViewType" : String
  }


snippet PointInTimeRecoverySpecification-dynamodb-table-pointintimerecoveryspecification
  {
    "PointInTimeRecoveryEnabled" : Boolean
  }


snippet SSESpecification-dynamodb-table-ssespecification
  {
    "KMSMasterKeyId" : String,
    "SSEEnabled" : Boolean,
    "SSEType" : String
  }


snippet TimeToLiveSpecification-dynamodb-timetolivespecification
  {
    "AttributeName" : String,
    "Enabled" : Boolean
  }


snippet BlockDeviceMapping-ec2-blockdev-mapping
  {
    "DeviceName" : String,
    "Ebs" : Ebs,
    "NoDevice" : NoDevice,
    "VirtualName" : String
  }


snippet Ebs-ec2-blockdev-template
  {
    "DeleteOnTermination" : Boolean,
    "Encrypted" : Boolean,
    "Iops" : Integer,
    "KmsKeyId" : String,
    "SnapshotId" : String,
    "VolumeSize" : Integer,
    "VolumeType" : String
  }


snippet Tag-ec2-capacityreservation-tag
  {
    "Key" : String,
    "Value" : String
  }


snippet TagSpecification-ec2-capacityreservation-tagspecification
  {
    "ResourceType" : String,
    "Tags" :  Tag, ... 
  }


snippet CertificateAuthenticationRequest-ec2-clientvpnendpoint-certificateauthenticationrequest
  {
    "ClientRootCertificateChainArn" : String
  }


snippet ClientAuthenticationRequest-ec2-clientvpnendpoint-clientauthenticationrequest
  {
    "ActiveDirectory" : DirectoryServiceAuthenticationRequest,
    "MutualAuthentication" : CertificateAuthenticationRequest,
    "Type" : String
  }


snippet ConnectionLogOptions-ec2-clientvpnendpoint-connectionlogoptions
  {
    "CloudwatchLogGroup" : String,
    "CloudwatchLogStream" : String,
    "Enabled" : Boolean
  }


snippet DirectoryServiceAuthenticationRequest-ec2-clientvpnendpoint-directoryserviceauthenticationrequest
  {
    "DirectoryId" : String
  }


snippet TagSpecification-ec2-clientvpnendpoint-tagspecification
  {
    "ResourceType" : String,
    "Tags" :  Tag, ... 
  }


snippet AWS::EC2::Volume-ec2-ebs-volume
  {
    "Type" : "AWS::EC2::Volume",
    "Properties" : {
        "AutoEnableIO" : Boolean,
        "AvailabilityZone" : String,
        "Encrypted" : Boolean,
        "Iops" : Integer,
        "KmsKeyId" : String,
        "Size" : Integer,
        "SnapshotId" : String,
        "Tags" :  Tag, ... ,
        "VolumeType" : String
      }
  }


snippet AWS::EC2::VolumeAttachment-ec2-ebs-volumeattachment
  {
    "Type" : "AWS::EC2::VolumeAttachment",
    "Properties" : {
        "Device" : String,
        "InstanceId" : String,
        "VolumeId" : String
      }
  }


snippet FleetLaunchTemplateConfigRequest-ec2-ec2fleet-fleetlaunchtemplateconfigrequest
  {
    "LaunchTemplateSpecification" : FleetLaunchTemplateSpecificationRequest,
    "Overrides" :  FleetLaunchTemplateOverridesRequest, ... 
  }


snippet FleetLaunchTemplateOverridesRequest-ec2-ec2fleet-fleetlaunchtemplateoverridesrequest
  {
    "AvailabilityZone" : String,
    "InstanceType" : String,
    "MaxPrice" : String,
    "Priority" : Double,
    "SubnetId" : String,
    "WeightedCapacity" : Double
  }


snippet FleetLaunchTemplateSpecificationRequest-ec2-ec2fleet-fleetlaunchtemplatespecificationrequest
  {
    "LaunchTemplateId" : String,
    "LaunchTemplateName" : String,
    "Version" : String
  }


snippet OnDemandOptionsRequest-ec2-ec2fleet-ondemandoptionsrequest
  {
    "AllocationStrategy" : String
  }


snippet SpotOptionsRequest-ec2-ec2fleet-spotoptionsrequest
  {
    "AllocationStrategy" : String,
    "InstanceInterruptionBehavior" : String,
    "InstancePoolsToUseCount" : Integer
  }


snippet TagRequest-ec2-ec2fleet-tagrequest
  {
    "Key" : String,
    "Value" : String
  }


snippet TagSpecification-ec2-ec2fleet-tagspecification
  {
    "ResourceType" : String,
    "Tags" :  TagRequest, ... 
  }


snippet TargetCapacitySpecificationRequest-ec2-ec2fleet-targetcapacityspecificationrequest
  {
    "DefaultTargetCapacityType" : String,
    "OnDemandTargetCapacity" : Integer,
    "SpotTargetCapacity" : Integer,
    "TotalTargetCapacity" : Integer
  }


snippet AWS::EC2::EIPAssociation-ec2-eip-association
  {
    "Type" : "AWS::EC2::EIPAssociation",
    "Properties" : {
        "AllocationId" : String,
        "EIP" : String,
        "InstanceId" : String,
        "NetworkInterfaceId" : String,
        "PrivateIpAddress" : String
      }
  }


snippet AWS::EC2::EIP-ec2-eip
  {
    "Type" : "AWS::EC2::EIP",
    "Properties" : {
        "Domain" : String,
        "InstanceId" : String,
        "PublicIpv4Pool" : String
      }
  }


snippet AppCookieStickinessPolicy-ec2-elb-AppCookieStickinessPolicy
  {
    "CookieName" : String,
    "PolicyName" : String
  }


snippet LBCookieStickinessPolicy-ec2-elb-LBCookieStickinessPolicy
  {
    "CookieExpirationPeriod" : String,
    "PolicyName" : String
  }


snippet AccessLoggingPolicy-ec2-elb-accessloggingpolicy
  {
    "EmitInterval" : Integer,
    "Enabled" : Boolean,
    "S3BucketName" : String,
    "S3BucketPrefix" : String
  }


snippet ConnectionDrainingPolicy-ec2-elb-connectiondrainingpolicy
  {
    "Enabled" : Boolean,
    "Timeout" : Integer
  }


snippet ConnectionSettings-ec2-elb-connectionsettings
  {
    "IdleTimeout" : Integer
  }


snippet HealthCheck-ec2-elb-health-check
  {
    "HealthyThreshold" : String,
    "Interval" : String,
    "Target" : String,
    "Timeout" : String,
    "UnhealthyThreshold" : String
  }


snippet Listeners-ec2-elb-listener
  {
    "InstancePort" : String,
    "InstanceProtocol" : String,
    "LoadBalancerPort" : String,
    "PolicyNames" :  String, ... ,
    "Protocol" : String,
    "SSLCertificateId" : String
  }


snippet Policies-ec2-elb-policy
  {
    "Attributes" :  Json, ... ,
    "InstancePorts" :  String, ... ,
    "LoadBalancerPorts" :  String, ... ,
    "PolicyName" : String,
    "PolicyType" : String
  }


snippet AWS::ElasticLoadBalancing::LoadBalancer-ec2-elb
  {
    "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
    "Properties" : {
        "AccessLoggingPolicy" : AccessLoggingPolicy,
        "AppCookieStickinessPolicy" :  AppCookieStickinessPolicy, ... ,
        "AvailabilityZones" :  String, ... ,
        "ConnectionDrainingPolicy" : ConnectionDrainingPolicy,
        "ConnectionSettings" : ConnectionSettings,
        "CrossZone" : Boolean,
        "HealthCheck" : HealthCheck,
        "Instances" :  String, ... ,
        "LBCookieStickinessPolicy" :  LBCookieStickinessPolicy, ... ,
        "Listeners" :  Listeners, ... ,
        "LoadBalancerName" : String,
        "Policies" :  Policies, ... ,
        "Scheme" : String,
        "SecurityGroups" :  String, ... ,
        "Subnets" :  String, ... ,
        "Tags" :  Tag, ... 
      }
  }


snippet CpuOptions-ec2-instance-cpuoptions
  {
    "CoreCount" : Integer,
    "ThreadsPerCore" : Integer
  }


snippet CreditSpecification-ec2-instance-creditspecification
  {
    "CPUCredits" : String
  }


snippet ElasticGpuSpecification-ec2-instance-elasticgpuspecification
  {
    "Type" : String
  }


snippet ElasticInferenceAccelerator-ec2-instance-elasticinferenceaccelerator
  {
    "Type" : String
  }


snippet InstanceIpv6Address-ec2-instance-instanceipv6address
  {
    "Ipv6Address" : String
  }


snippet LaunchTemplateSpecification-ec2-instance-launchtemplatespecification
  {
    "LaunchTemplateId" : String,
    "LaunchTemplateName" : String,
    "Version" : String
  }


snippet LicenseSpecification-ec2-instance-licensespecification
  {
    "LicenseConfigurationArn" : String
  }


snippet NoDevice-ec2-instance-nodevice
  {
  }


snippet AssociationParameter-ec2-instance-ssmassociations-associationparameters
  {
    "Key" : String,
    "Value" :  String, ... 
  }


snippet SsmAssociation-ec2-instance-ssmassociations
  {
    "AssociationParameters" :  AssociationParameter, ... ,
    "DocumentName" : String
  }


snippet AWS::EC2::Instance-ec2-instance
  {
    "Type" : "AWS::EC2::Instance",
    "Properties" : {
        "AdditionalInfo" : String,
        "Affinity" : String,
        "AvailabilityZone" : String,
        "BlockDeviceMappings" :  BlockDeviceMapping, ... ,
        "CpuOptions" : CpuOptions,
        "CreditSpecification" : CreditSpecification,
        "DisableApiTermination" : Boolean,
        "EbsOptimized" : Boolean,
        "ElasticGpuSpecifications" :  ElasticGpuSpecification, ... ,
        "ElasticInferenceAccelerators" :  ElasticInferenceAccelerator, ... ,
        "HostId" : String,
        "IamInstanceProfile" : String,
        "ImageId" : String,
        "InstanceInitiatedShutdownBehavior" : String,
        "InstanceType" : String,
        "Ipv6AddressCount" : Integer,
        "Ipv6Addresses" :  InstanceIpv6Address, ... ,
        "KernelId" : String,
        "KeyName" : String,
        "LaunchTemplate" : LaunchTemplateSpecification,
        "LicenseSpecifications" :  LicenseSpecification, ... ,
        "Monitoring" : Boolean,
        "NetworkInterfaces" :  NetworkInterface, ... ,
        "PlacementGroupName" : String,
        "PrivateIpAddress" : String,
        "RamdiskId" : String,
        "SecurityGroupIds" :  String, ... ,
        "SecurityGroups" :  String, ... ,
        "SourceDestCheck" : Boolean,
        "SsmAssociations" :  SsmAssociation, ... ,
        "SubnetId" : String,
        "Tags" :  Tag, ... ,
        "Tenancy" : String,
        "UserData" : String,
        "Volumes" :  Volume, ... 
      }
  }


snippet Ebs-ec2-launchtemplate-blockdevicemapping-ebs
  {
    "DeleteOnTermination" : Boolean,
    "Encrypted" : Boolean,
    "Iops" : Integer,
    "KmsKeyId" : String,
    "SnapshotId" : String,
    "VolumeSize" : Integer,
    "VolumeType" : String
  }


snippet BlockDeviceMapping-ec2-launchtemplate-blockdevicemapping
  {
    "DeviceName" : String,
    "Ebs" : Ebs,
    "NoDevice" : String,
    "VirtualName" : String
  }


snippet CapacityReservationTarget-ec2-launchtemplate-capacityreservationtarget
  {
    "CapacityReservationId" : String
  }


snippet ElasticGpuSpecification-ec2-launchtemplate-elasticgpuspecification
  {
    "Type" : String
  }


snippet Ipv6Add-ec2-launchtemplate-ipv6add
  {
    "Ipv6Address" : String
  }


snippet CapacityReservationSpecification-ec2-launchtemplate-launchtemplatedata-capacityreservationspecification
  {
    "CapacityReservationPreference" : CapacityReservationPreference,
    "CapacityReservationTarget" : CapacityReservationTarget
  }


snippet CpuOptions-ec2-launchtemplate-launchtemplatedata-cpuoptions
  {
    "CoreCount" : Integer,
    "ThreadsPerCore" : Integer
  }


snippet CreditSpecification-ec2-launchtemplate-launchtemplatedata-creditspecification
  {
    "CpuCredits" : String
  }


snippet HibernationOptions-ec2-launchtemplate-launchtemplatedata-hibernationoptions
  {
    "Configured" : Boolean
  }


snippet IamInstanceProfile-ec2-launchtemplate-launchtemplatedata-iaminstanceprofile
  {
    "Arn" : String,
    "Name" : String
  }


snippet SpotOptions-ec2-launchtemplate-launchtemplatedata-instancemarketoptions-spotoptions
  {
    "BlockDurationMinutes" : Integer,
    "InstanceInterruptionBehavior" : String,
    "MaxPrice" : String,
    "SpotInstanceType" : String,
    "ValidUntil" : String
  }


snippet InstanceMarketOptions-ec2-launchtemplate-launchtemplatedata-instancemarketoptions
  {
    "MarketType" : String,
    "SpotOptions" : SpotOptions
  }


snippet Monitoring-ec2-launchtemplate-launchtemplatedata-monitoring
  {
    "Enabled" : Boolean
  }


snippet Placement-ec2-launchtemplate-launchtemplatedata-placement
  {
    "Affinity" : String,
    "AvailabilityZone" : String,
    "GroupName" : String,
    "HostId" : String,
    "Tenancy" : String
  }


snippet LaunchTemplateData-ec2-launchtemplate-launchtemplatedata
  {
    "BlockDeviceMappings" :  BlockDeviceMapping, ... ,
    "CapacityReservationSpecification" : CapacityReservationSpecification,
    "CpuOptions" : CpuOptions,
    "CreditSpecification" : CreditSpecification,
    "DisableApiTermination" : Boolean,
    "EbsOptimized" : Boolean,
    "ElasticGpuSpecifications" :  ElasticGpuSpecification, ... ,
    "ElasticInferenceAccelerators" :  LaunchTemplateElasticInferenceAccelerator, ... ,
    "HibernationOptions" : HibernationOptions,
    "IamInstanceProfile" : IamInstanceProfile,
    "ImageId" : String,
    "InstanceInitiatedShutdownBehavior" : String,
    "InstanceMarketOptions" : InstanceMarketOptions,
    "InstanceType" : String,
    "KernelId" : String,
    "KeyName" : String,
    "LicenseSpecifications" :  LicenseSpecification, ... ,
    "Monitoring" : Monitoring,
    "NetworkInterfaces" :  NetworkInterface, ... ,
    "Placement" : Placement,
    "RamDiskId" : String,
    "SecurityGroupIds" :  String, ... ,
    "SecurityGroups" :  String, ... ,
    "TagSpecifications" :  TagSpecification, ... ,
    "UserData" : String
  }


snippet LaunchTemplateElasticInferenceAccelerator-ec2-launchtemplate-launchtemplateelasticinferenceaccelerator
  {
    "Type" : String
  }


snippet LicenseSpecification-ec2-launchtemplate-licensespecification
  {
    "LicenseConfigurationArn" : String
  }


snippet NetworkInterface-ec2-launchtemplate-networkinterface
  {
    "AssociatePublicIpAddress" : Boolean,
    "DeleteOnTermination" : Boolean,
    "Description" : String,
    "DeviceIndex" : Integer,
    "Groups" :  String, ... ,
    "InterfaceType" : String,
    "Ipv6AddressCount" : Integer,
    "Ipv6Addresses" :  Ipv6Add, ... ,
    "NetworkInterfaceId" : String,
    "PrivateIpAddress" : String,
    "PrivateIpAddresses" :  PrivateIpAdd, ... ,
    "SecondaryPrivateIpAddressCount" : Integer,
    "SubnetId" : String
  }


snippet PrivateIpAdd-ec2-launchtemplate-privateipadd
  {
    "Primary" : Boolean,
    "PrivateIpAddress" : String
  }


snippet TagSpecification-ec2-launchtemplate-tagspecification
  {
    "ResourceType" : String,
    "Tags" :  Tag, ... 
  }


snippet Volume-ec2-mount-point
  {
    "Device" : String,
    "VolumeId" : String
  }


snippet NetworkInterface-ec2-network-iface-embedded
  {
    "AssociatePublicIpAddress" : Boolean,
    "DeleteOnTermination" : Boolean,
    "Description" : String,
    "DeviceIndex" : String,
    "GroupSet" :  String, ... ,
    "Ipv6AddressCount" : Integer,
    "Ipv6Addresses" :  InstanceIpv6Address, ... ,
    "NetworkInterfaceId" : String,
    "PrivateIpAddress" : String,
    "PrivateIpAddresses" :  PrivateIpAddressSpecification, ... ,
    "SecondaryPrivateIpAddressCount" : Integer,
    "SubnetId" : String
  }


snippet PrivateIpAddressSpecification-ec2-network-interface-privateipspec-1
  {
    "Primary" : Boolean,
    "PrivateIpAddress" : String
  }


snippet PrivateIpAddressSpecification-ec2-network-interface-privateipspec
  {
    "Primary" : Boolean,
    "PrivateIpAddress" : String
  }


snippet Icmp-ec2-networkaclentry-icmp
  {
    "Code" : Integer,
    "Type" : Integer
  }


snippet PortRange-ec2-networkaclentry-portrange
  {
    "From" : Integer,
    "To" : Integer
  }


snippet InstanceIpv6Address-ec2-networkinterface-instanceipv6address
  {
    "Ipv6Address" : String
  }


snippet AWS::EC2::SecurityGroupIngress-ec2-security-group-ingress
  {
    "Type" : "AWS::EC2::SecurityGroupIngress",
    "Properties" : {
        "CidrIp" : String,
        "CidrIpv6" : String,
        "Description" : String,
        "FromPort" : Integer,
        "GroupId" : String,
        "GroupName" : String,
        "IpProtocol" : String,
        "SourcePrefixListId" : String,
        "SourceSecurityGroupId" : String,
        "SourceSecurityGroupName" : String,
        "SourceSecurityGroupOwnerId" : String,
        "ToPort" : Integer
      }
  }


snippet Ingress-ec2-security-group-rule-1
  {
    "CidrIp" : String,
    "CidrIpv6" : String,
    "Description" : String,
    "FromPort" : Integer,
    "IpProtocol" : String,
    "SourcePrefixListId" : String,
    "SourceSecurityGroupId" : String,
    "SourceSecurityGroupName" : String,
    "SourceSecurityGroupOwnerId" : String,
    "ToPort" : Integer
  }


snippet Egress-ec2-security-group-rule
  {
    "CidrIp" : String,
    "CidrIpv6" : String,
    "Description" : String,
    "DestinationPrefixListId" : String,
    "DestinationSecurityGroupId" : String,
    "FromPort" : Integer,
    "IpProtocol" : String,
    "ToPort" : Integer
  }


snippet AWS::EC2::SecurityGroup-ec2-security-group
  {
    "Type" : "AWS::EC2::SecurityGroup",
    "Properties" : {
        "GroupDescription" : String,
        "GroupName" : String,
        "SecurityGroupEgress" :  Egress, ... ,
        "SecurityGroupIngress" :  Ingress, ... ,
        "Tags" :  Tag, ... ,
        "VpcId" : String
      }
  }


snippet ClassicLoadBalancer-ec2-spotfleet-classicloadbalancer
  {
    "Name" : String
  }


snippet ClassicLoadBalancersConfig-ec2-spotfleet-classicloadbalancersconfig
  {
    "ClassicLoadBalancers" :  ClassicLoadBalancer, ... 
  }


snippet FleetLaunchTemplateSpecification-ec2-spotfleet-fleetlaunchtemplatespecification
  {
    "LaunchTemplateId" : String,
    "LaunchTemplateName" : String,
    "Version" : String
  }


snippet InstanceIpv6Address-ec2-spotfleet-instanceipv6address
  {
    "Ipv6Address" : String
  }


snippet LaunchTemplateConfig-ec2-spotfleet-launchtemplateconfig
  {
    "LaunchTemplateSpecification" : FleetLaunchTemplateSpecification,
    "Overrides" :  LaunchTemplateOverrides, ... 
  }


snippet LaunchTemplateOverrides-ec2-spotfleet-launchtemplateoverrides
  {
    "AvailabilityZone" : String,
    "InstanceType" : String,
    "SpotPrice" : String,
    "SubnetId" : String,
    "WeightedCapacity" : Double
  }


snippet LoadBalancersConfig-ec2-spotfleet-loadbalancersconfig
  {
    "ClassicLoadBalancersConfig" : ClassicLoadBalancersConfig,
    "TargetGroupsConfig" : TargetGroupsConfig
  }


snippet EbsBlockDevice-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-blockdevicemappings-ebs
  {
    "DeleteOnTermination" : Boolean,
    "Encrypted" : Boolean,
    "Iops" : Integer,
    "SnapshotId" : String,
    "VolumeSize" : Integer,
    "VolumeType" : String
  }


snippet BlockDeviceMapping-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-blockdevicemappings
  {
    "DeviceName" : String,
    "Ebs" : EbsBlockDevice,
    "NoDevice" : String,
    "VirtualName" : String
  }


snippet IamInstanceProfileSpecification-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-iaminstanceprofile
  {
    "Arn" : String
  }


snippet SpotFleetMonitoring-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-monitoring
  {
    "Enabled" : Boolean
  }


snippet PrivateIpAddressSpecification-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-networkinterfaces-privateipaddresses
  {
    "Primary" : Boolean,
    "PrivateIpAddress" : String
  }


snippet InstanceNetworkInterfaceSpecification-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-networkinterfaces
  {
    "AssociatePublicIpAddress" : Boolean,
    "DeleteOnTermination" : Boolean,
    "Description" : String,
    "DeviceIndex" : Integer,
    "Groups" :  String, ... ,
    "Ipv6AddressCount" : Integer,
    "Ipv6Addresses" :  InstanceIpv6Address, ... ,
    "NetworkInterfaceId" : String,
    "PrivateIpAddresses" :  PrivateIpAddressSpecification, ... ,
    "SecondaryPrivateIpAddressCount" : Integer,
    "SubnetId" : String
  }


snippet SpotPlacement-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-placement
  {
    "AvailabilityZone" : String,
    "GroupName" : String,
    "Tenancy" : String
  }


snippet GroupIdentifier-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-securitygroups
  {
    "GroupId" : String
  }


snippet SpotFleetTagSpecification-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications-tagspecifications
  {
    "ResourceType" : String,
    "Tags" :  Tag, ... 
  }


snippet SpotFleetLaunchSpecification-ec2-spotfleet-spotfleetrequestconfigdata-launchspecifications
  {
    "BlockDeviceMappings" :  BlockDeviceMapping, ... ,
    "EbsOptimized" : Boolean,
    "IamInstanceProfile" : IamInstanceProfileSpecification,
    "ImageId" : String,
    "InstanceType" : String,
    "KernelId" : String,
    "KeyName" : String,
    "Monitoring" : SpotFleetMonitoring,
    "NetworkInterfaces" :  InstanceNetworkInterfaceSpecification, ... ,
    "Placement" : SpotPlacement,
    "RamdiskId" : String,
    "SecurityGroups" :  GroupIdentifier, ... ,
    "SpotPrice" : String,
    "SubnetId" : String,
    "TagSpecifications" :  SpotFleetTagSpecification, ... ,
    "UserData" : String,
    "WeightedCapacity" : Double
  }


snippet SpotFleetRequestConfigData-ec2-spotfleet-spotfleetrequestconfigdata
  {
    "AllocationStrategy" : String,
    "ExcessCapacityTerminationPolicy" : String,
    "IamFleetRole" : String,
    "InstanceInterruptionBehavior" : String,
    "LaunchSpecifications" :  SpotFleetLaunchSpecification, ... ,
    "LaunchTemplateConfigs" :  LaunchTemplateConfig, ... ,
    "LoadBalancersConfig" : LoadBalancersConfig,
    "ReplaceUnhealthyInstances" : Boolean,
    "SpotPrice" : String,
    "TargetCapacity" : Integer,
    "TerminateInstancesWithExpiration" : Boolean,
    "Type" : String,
    "ValidFrom" : String,
    "ValidUntil" : String
  }


snippet TargetGroup-ec2-spotfleet-targetgroup
  {
    "Arn" : String
  }


snippet TargetGroupsConfig-ec2-spotfleet-targetgroupsconfig
  {
    "TargetGroups" :  TargetGroup, ... 
  }


snippet TrafficMirrorPortRange-ec2-trafficmirrorfilterrule-trafficmirrorportrange
  {
    "FromPort" : Integer,
    "ToPort" : Integer
  }


snippet VpnTunnelOptionsSpecification-ec2-vpnconnection-vpntunneloptionsspecification
  {
    "PreSharedKey" : String,
    "TunnelInsideCidr" : String
  }


snippet LifecyclePolicy-ecr-repository-lifecyclepolicy
  {
    "LifecyclePolicyText" : String,
    "RegistryId" : String
  }


snippet AwsVpcConfiguration-ecs-service-awsvpcconfiguration
  {
    "AssignPublicIp" : String,
    "SecurityGroups" :  String, ... ,
    "Subnets" :  String, ... 
  }


snippet DeploymentConfiguration-ecs-service-deploymentconfiguration
  {
    "MaximumPercent" : Integer,
    "MinimumHealthyPercent" : Integer
  }


snippet LoadBalancer-ecs-service-loadbalancers
  {
    "ContainerName" : String,
    "ContainerPort" : Integer,
    "LoadBalancerName" : String,
    "TargetGroupArn" : String
  }


snippet NetworkConfiguration-ecs-service-networkconfiguration
  {
    "AwsvpcConfiguration" : AwsVpcConfiguration
  }


snippet PlacementConstraint-ecs-service-placementconstraint
  {
    "Expression" : String,
    "Type" : String
  }


snippet PlacementStrategy-ecs-service-placementstrategy
  {
    "Field" : String,
    "Type" : String
  }


snippet ServiceRegistry-ecs-service-serviceregistry
  {
    "ContainerName" : String,
    "ContainerPort" : Integer,
    "Port" : Integer,
    "RegistryArn" : String
  }


snippet KeyValuePair-ecs-taskdefinition-containerdefinitions-environment
  {
    "Name" : String,
    "Value" : String
  }


snippet HostEntry-ecs-taskdefinition-containerdefinitions-hostentry
  {
    "Hostname" : String,
    "IpAddress" : String
  }


snippet LogConfiguration-ecs-taskdefinition-containerdefinitions-logconfiguration
  {
    "LogDriver" : String,
    "Options" : {Key : Value, ...},
    "SecretOptions" :  Secret, ... 
  }


snippet MountPoint-ecs-taskdefinition-containerdefinitions-mountpoints
  {
    "ContainerPath" : String,
    "ReadOnly" : Boolean,
    "SourceVolume" : String
  }


snippet PortMapping-ecs-taskdefinition-containerdefinitions-portmappings
  {
    "ContainerPort" : Integer,
    "HostPort" : Integer,
    "Protocol" : String
  }


snippet Ulimit-ecs-taskdefinition-containerdefinitions-ulimit
  {
    "HardLimit" : Integer,
    "Name" : String,
    "SoftLimit" : Integer
  }


snippet VolumeFrom-ecs-taskdefinition-containerdefinitions-volumesfrom
  {
    "ReadOnly" : Boolean,
    "SourceContainer" : String
  }


snippet ContainerDefinition-ecs-taskdefinition-containerdefinitions
  {
    "Command" :  String, ... ,
    "Cpu" : Integer,
    "DependsOn" :  ContainerDependency, ... ,
    "DisableNetworking" : Boolean,
    "DnsSearchDomains" :  String, ... ,
    "DnsServers" :  String, ... ,
    "DockerLabels" : {Key : Value, ...},
    "DockerSecurityOptions" :  String, ... ,
    "EntryPoint" :  String, ... ,
    "Environment" :  KeyValuePair, ... ,
    "Essential" : Boolean,
    "ExtraHosts" :  HostEntry, ... ,
    "HealthCheck" : HealthCheck,
    "Hostname" : String,
    "Image" : String,
    "Interactive" : Boolean,
    "Links" :  String, ... ,
    "LinuxParameters" : LinuxParameters,
    "LogConfiguration" : LogConfiguration,
    "Memory" : Integer,
    "MemoryReservation" : Integer,
    "MountPoints" :  MountPoint, ... ,
    "Name" : String,
    "PortMappings" :  PortMapping, ... ,
    "Privileged" : Boolean,
    "PseudoTerminal" : Boolean,
    "ReadonlyRootFilesystem" : Boolean,
    "RepositoryCredentials" : RepositoryCredentials,
    "ResourceRequirements" :  ResourceRequirement, ... ,
    "Secrets" :  Secret, ... ,
    "StartTimeout" : Integer,
    "StopTimeout" : Integer,
    "SystemControls" :  SystemControl, ... ,
    "Ulimits" :  Ulimit, ... ,
    "User" : String,
    "VolumesFrom" :  VolumeFrom, ... ,
    "WorkingDirectory" : String
  }


snippet ContainerDependency-ecs-taskdefinition-containerdependency
  {
    "Condition" : String,
    "ContainerName" : String
  }


snippet Device-ecs-taskdefinition-device
  {
    "ContainerPath" : String,
    "HostPath" : String,
    "Permissions" :  String, ... 
  }


snippet DockerVolumeConfiguration-ecs-taskdefinition-dockervolumeconfiguration
  {
    "Autoprovision" : Boolean,
    "Driver" : String,
    "DriverOpts" : {Key : Value, ...},
    "Labels" : {Key : Value, ...},
    "Scope" : String
  }


snippet HealthCheck-ecs-taskdefinition-healthcheck
  {
    "Command" :  String, ... ,
    "Interval" : Integer,
    "Retries" : Integer,
    "StartPeriod" : Integer,
    "Timeout" : Integer
  }


snippet InferenceAccelerator-ecs-taskdefinition-inferenceaccelerator
  {
    "DeviceName" : String,
    "DeviceType" : String
  }


snippet KernelCapabilities-ecs-taskdefinition-kernelcapabilities
  {
    "Add" :  String, ... ,
    "Drop" :  String, ... 
  }


snippet LinuxParameters-ecs-taskdefinition-linuxparameters
  {
    "Capabilities" : KernelCapabilities,
    "Devices" :  Device, ... ,
    "InitProcessEnabled" : Boolean,
    "SharedMemorySize" : Integer,
    "Tmpfs" :  Tmpfs, ... 
  }


snippet ProxyConfiguration-ecs-taskdefinition-proxyconfiguration
  {
    "ContainerName" : String,
    "ProxyConfigurationProperties" :  KeyValuePair, ... ,
    "Type" : String
  }


snippet RepositoryCredentials-ecs-taskdefinition-repositorycredentials
  {
    "CredentialsParameter" : String
  }


snippet ResourceRequirement-ecs-taskdefinition-resourcerequirement
  {
    "Type" : String,
    "Value" : String
  }


snippet Secret-ecs-taskdefinition-secret
  {
    "Name" : String,
    "ValueFrom" : String
  }


snippet SystemControl-ecs-taskdefinition-systemcontrol
  {
    "Namespace" : String,
    "Value" : String
  }


snippet TaskDefinitionPlacementConstraint-ecs-taskdefinition-taskdefinitionplacementconstraint
  {
    "Expression" : String,
    "Type" : String
  }


snippet Tmpfs-ecs-taskdefinition-tmpfs
  {
    "ContainerPath" : String,
    "MountOptions" :  String, ... ,
    "Size" : Integer
  }


snippet HostVolumeProperties-ecs-taskdefinition-volumes-host
  {
    "SourcePath" : String
  }


snippet Volume-ecs-taskdefinition-volumes
  {
    "DockerVolumeConfiguration" : DockerVolumeConfiguration,
    "Host" : HostVolumeProperties,
    "Name" : String
  }


snippet ElasticFileSystemTag-efs-filesystem-filesystemtags
  {
    "Key" : String,
    "Value" : String
  }


snippet ResourcesVpcConfig-eks-cluster-resourcesvpcconfig
  {
    "SecurityGroupIds" :  String, ... ,
    "SubnetIds" :  String, ... 
  }


snippet AWS::ElastiCache::CacheCluster-elasticache-cache-cluster
  {
    "Type" : "AWS::ElastiCache::CacheCluster",
    "Properties" : {
        "AZMode" : String,
        "AutoMinorVersionUpgrade" : Boolean,
        "CacheNodeType" : String,
        "CacheParameterGroupName" : String,
        "CacheSecurityGroupNames" :  String, ... ,
        "CacheSubnetGroupName" : String,
        "ClusterName" : String,
        "Engine" : String,
        "EngineVersion" : String,
        "NotificationTopicArn" : String,
        "NumCacheNodes" : Integer,
        "Port" : Integer,
        "PreferredAvailabilityZone" : String,
        "PreferredAvailabilityZones" :  String, ... ,
        "PreferredMaintenanceWindow" : String,
        "SnapshotArns" :  String, ... ,
        "SnapshotName" : String,
        "SnapshotRetentionLimit" : Integer,
        "SnapshotWindow" : String,
        "Tags" :  Tag, ... ,
        "VpcSecurityGroupIds" :  String, ... 
      }
  }


snippet AWS::ElastiCache::ParameterGroup-elasticache-parameter-group
  {
    "Type" : "AWS::ElastiCache::ParameterGroup",
    "Properties" : {
        "CacheParameterGroupFamily" : String,
        "Description" : String,
        "Properties" : {Key : Value, ...}
      }
  }


snippet NodeGroupConfiguration-elasticache-replicationgroup-nodegroupconfiguration
  {
    "NodeGroupId" : String,
    "PrimaryAvailabilityZone" : String,
    "ReplicaAvailabilityZones" :  String, ... ,
    "ReplicaCount" : Integer,
    "Slots" : String
  }


snippet AWS::ElastiCache::SecurityGroupIngress-elasticache-security-group-ingress
  {
    "Type" : "AWS::ElastiCache::SecurityGroupIngress",
    "Properties" : {
        "CacheSecurityGroupName" : String,
        "EC2SecurityGroupName" : String,
        "EC2SecurityGroupOwnerId" : String
      }
  }


snippet AWS::ElastiCache::SecurityGroup-elasticache-security-group
  {
    "Type" : "AWS::ElastiCache::SecurityGroup",
    "Properties" : {
        "Description" : String
      }
  }


snippet AWS::ElastiCache::SubnetGroup-elasticache-subnetgroup
  {
    "Type" : "AWS::ElastiCache::SubnetGroup",
    "Properties" : {
        "CacheSubnetGroupName" : String,
        "Description" : String,
        "SubnetIds" :  String, ... 
      }
  }


snippet ApplicationResourceLifecycleConfig-elasticbeanstalk-application-applicationresourcelifecycleconfig
  {
    "ServiceRole" : String,
    "VersionLifecycleConfig" : ApplicationVersionLifecycleConfig
  }


snippet ApplicationVersionLifecycleConfig-elasticbeanstalk-application-applicationversionlifecycleconfig
  {
    "MaxAgeRule" : MaxAgeRule,
    "MaxCountRule" : MaxCountRule
  }


snippet MaxAgeRule-elasticbeanstalk-application-maxagerule
  {
    "DeleteSourceFromS3" : Boolean,
    "Enabled" : Boolean,
    "MaxAgeInDays" : Integer
  }


snippet MaxCountRule-elasticbeanstalk-application-maxcountrule
  {
    "DeleteSourceFromS3" : Boolean,
    "Enabled" : Boolean,
    "MaxCount" : Integer
  }


snippet ConfigurationOptionSetting-elasticbeanstalk-configurationtemplate-configurationoptionsetting
  {
    "Namespace" : String,
    "OptionName" : String,
    "ResourceName" : String,
    "Value" : String
  }


snippet SourceConfiguration-elasticbeanstalk-configurationtemplate-sourceconfiguration
  {
    "ApplicationName" : String,
    "TemplateName" : String
  }


snippet AuthenticateCognitoConfig-elasticloadbalancingv2-listener-authenticatecognitoconfig
  {
    "AuthenticationRequestExtraParams" : {Key : Value, ...},
    "OnUnauthenticatedRequest" : String,
    "Scope" : String,
    "SessionCookieName" : String,
    "SessionTimeout" : Long,
    "UserPoolArn" : String,
    "UserPoolClientId" : String,
    "UserPoolDomain" : String
  }


snippet AuthenticateOidcConfig-elasticloadbalancingv2-listener-authenticateoidcconfig
  {
    "AuthenticationRequestExtraParams" : {Key : Value, ...},
    "AuthorizationEndpoint" : String,
    "ClientId" : String,
    "ClientSecret" : String,
    "Issuer" : String,
    "OnUnauthenticatedRequest" : String,
    "Scope" : String,
    "SessionCookieName" : String,
    "SessionTimeout" : Long,
    "TokenEndpoint" : String,
    "UserInfoEndpoint" : String
  }


snippet Certificate-elasticloadbalancingv2-listener-certificates-1
  {
    "CertificateArn" : String
  }


snippet Certificate-elasticloadbalancingv2-listener-certificates
  {
    "CertificateArn" : String
  }


snippet Action-elasticloadbalancingv2-listener-defaultactions
  {
    "AuthenticateCognitoConfig" : AuthenticateCognitoConfig,
    "AuthenticateOidcConfig" : AuthenticateOidcConfig,
    "FixedResponseConfig" : FixedResponseConfig,
    "Order" : Integer,
    "RedirectConfig" : RedirectConfig,
    "TargetGroupArn" : String,
    "Type" : String
  }


snippet FixedResponseConfig-elasticloadbalancingv2-listener-fixedresponseconfig
  {
    "ContentType" : String,
    "MessageBody" : String,
    "StatusCode" : String
  }


snippet RedirectConfig-elasticloadbalancingv2-listener-redirectconfig
  {
    "Host" : String,
    "Path" : String,
    "Port" : String,
    "Protocol" : String,
    "Query" : String,
    "StatusCode" : String
  }


snippet Action-elasticloadbalancingv2-listenerrule-actions
  {
    "AuthenticateCognitoConfig" : AuthenticateCognitoConfig,
    "AuthenticateOidcConfig" : AuthenticateOidcConfig,
    "FixedResponseConfig" : FixedResponseConfig,
    "Order" : Integer,
    "RedirectConfig" : RedirectConfig,
    "TargetGroupArn" : String,
    "Type" : String
  }


snippet AuthenticateCognitoConfig-elasticloadbalancingv2-listenerrule-authenticatecognitoconfig
  {
    "AuthenticationRequestExtraParams" : {Key : Value, ...},
    "OnUnauthenticatedRequest" : String,
    "Scope" : String,
    "SessionCookieName" : String,
    "SessionTimeout" : Long,
    "UserPoolArn" : String,
    "UserPoolClientId" : String,
    "UserPoolDomain" : String
  }


snippet AuthenticateOidcConfig-elasticloadbalancingv2-listenerrule-authenticateoidcconfig
  {
    "AuthenticationRequestExtraParams" : {Key : Value, ...},
    "AuthorizationEndpoint" : String,
    "ClientId" : String,
    "ClientSecret" : String,
    "Issuer" : String,
    "OnUnauthenticatedRequest" : String,
    "Scope" : String,
    "SessionCookieName" : String,
    "SessionTimeout" : Long,
    "TokenEndpoint" : String,
    "UserInfoEndpoint" : String
  }


snippet RuleCondition-elasticloadbalancingv2-listenerrule-conditions
  {
    "Field" : String,
    "HostHeaderConfig" : HostHeaderConfig,
    "HttpHeaderConfig" : HttpHeaderConfig,
    "HttpRequestMethodConfig" : HttpRequestMethodConfig,
    "PathPatternConfig" : PathPatternConfig,
    "QueryStringConfig" : QueryStringConfig,
    "SourceIpConfig" : SourceIpConfig,
    "Values" :  String, ... 
  }


snippet FixedResponseConfig-elasticloadbalancingv2-listenerrule-fixedresponseconfig
  {
    "ContentType" : String,
    "MessageBody" : String,
    "StatusCode" : String
  }


snippet HostHeaderConfig-elasticloadbalancingv2-listenerrule-hostheaderconfig
  {
    "Values" :  String, ... 
  }


snippet HttpHeaderConfig-elasticloadbalancingv2-listenerrule-httpheaderconfig
  {
    "HttpHeaderName" : String,
    "Values" :  String, ... 
  }


snippet HttpRequestMethodConfig-elasticloadbalancingv2-listenerrule-httprequestmethodconfig
  {
    "Values" :  String, ... 
  }


snippet PathPatternConfig-elasticloadbalancingv2-listenerrule-pathpatternconfig
  {
    "Values" :  String, ... 
  }


snippet QueryStringConfig-elasticloadbalancingv2-listenerrule-querystringconfig
  {
    "Values" :  QueryStringKeyValue, ... 
  }


snippet QueryStringKeyValue-elasticloadbalancingv2-listenerrule-querystringkeyvalue
  {
    "Key" : String,
    "Value" : String
  }


snippet RedirectConfig-elasticloadbalancingv2-listenerrule-redirectconfig
  {
    "Host" : String,
    "Path" : String,
    "Port" : String,
    "Protocol" : String,
    "Query" : String,
    "StatusCode" : String
  }


snippet SourceIpConfig-elasticloadbalancingv2-listenerrule-sourceipconfig
  {
    "Values" :  String, ... 
  }


snippet LoadBalancerAttribute-elasticloadbalancingv2-loadbalancer-loadbalancerattributes
  {
    "Key" : String,
    "Value" : String
  }


snippet SubnetMapping-elasticloadbalancingv2-loadbalancer-subnetmapping
  {
    "AllocationId" : String,
    "SubnetId" : String
  }


snippet Matcher-elasticloadbalancingv2-targetgroup-matcher
  {
    "HttpCode" : String
  }


snippet TargetDescription-elasticloadbalancingv2-targetgroup-targetdescription
  {
    "AvailabilityZone" : String,
    "Id" : String,
    "Port" : Integer
  }


snippet TargetGroupAttribute-elasticloadbalancingv2-targetgroup-targetgroupattribute
  {
    "Key" : String,
    "Value" : String
  }


snippet Application-elasticmapreduce-cluster-application
  {
    "AdditionalInfo" : {Key : Value, ...},
    "Args" :  String, ... ,
    "Name" : String,
    "Version" : String
  }


snippet AutoScalingPolicy-elasticmapreduce-cluster-autoscalingpolicy
  {
    "Constraints" : ScalingConstraints,
    "Rules" :  ScalingRule, ... 
  }


snippet BootstrapActionConfig-elasticmapreduce-cluster-bootstrapactionconfig
  {
    "Name" : String,
    "ScriptBootstrapAction" : ScriptBootstrapActionConfig
  }


snippet CloudWatchAlarmDefinition-elasticmapreduce-cluster-cloudwatchalaefinition
  {
    "ComparisonOperator" : String,
    "Dimensions" :  MetricDimension, ... ,
    "EvaluationPeriods" : Integer,
    "MetricName" : String,
    "Namespace" : String,
    "Period" : Integer,
    "Statistic" : String,
    "Threshold" : Double,
    "Unit" : String
  }


snippet Configuration-elasticmapreduce-cluster-configuration
  {
    "Classification" : String,
    "ConfigurationProperties" : {Key : Value, ...},
    "Configurations" :  Configuration, ... 
  }


snippet EbsBlockDeviceConfig-elasticmapreduce-cluster-ebsblockdeviceconfig
  {
    "VolumeSpecification" : VolumeSpecification,
    "VolumesPerInstance" : Integer
  }


snippet EbsConfiguration-elasticmapreduce-cluster-ebsconfiguration
  {
    "EbsBlockDeviceConfigs" :  EbsBlockDeviceConfig, ... ,
    "EbsOptimized" : Boolean
  }


snippet HadoopJarStepConfig-elasticmapreduce-cluster-hadoopjarstepconfig
  {
    "Args" :  String, ... ,
    "Jar" : String,
    "MainClass" : String,
    "StepProperties" :  KeyValue, ... 
  }


snippet InstanceFleetConfig-elasticmapreduce-cluster-instancefleetconfig
  {
    "InstanceTypeConfigs" :  InstanceTypeConfig, ... ,
    "LaunchSpecifications" : InstanceFleetProvisioningSpecifications,
    "Name" : String,
    "TargetOnDemandCapacity" : Integer,
    "TargetSpotCapacity" : Integer
  }


snippet InstanceFleetProvisioningSpecifications-elasticmapreduce-cluster-instancefleetprovisioningspecifications
  {
    "SpotSpecification" : SpotProvisioningSpecification
  }


snippet InstanceGroupConfig-elasticmapreduce-cluster-instancegroupconfig
  {
    "AutoScalingPolicy" : AutoScalingPolicy,
    "BidPrice" : String,
    "Configurations" :  Configuration, ... ,
    "EbsConfiguration" : EbsConfiguration,
    "InstanceCount" : Integer,
    "InstanceType" : String,
    "Market" : String,
    "Name" : String
  }


snippet InstanceTypeConfig-elasticmapreduce-cluster-instancetypeconfig
  {
    "BidPrice" : String,
    "BidPriceAsPercentageOfOnDemandPrice" : Double,
    "Configurations" :  Configuration, ... ,
    "EbsConfiguration" : EbsConfiguration,
    "InstanceType" : String,
    "WeightedCapacity" : Integer
  }


snippet JobFlowInstancesConfig-elasticmapreduce-cluster-jobflowinstancesconfig
  {
    "AdditionalMasterSecurityGroups" :  String, ... ,
    "AdditionalSlaveSecurityGroups" :  String, ... ,
    "CoreInstanceFleet" : InstanceFleetConfig,
    "CoreInstanceGroup" : InstanceGroupConfig,
    "Ec2KeyName" : String,
    "Ec2SubnetId" : String,
    "Ec2SubnetIds" :  String, ... ,
    "EmrManagedMasterSecurityGroup" : String,
    "EmrManagedSlaveSecurityGroup" : String,
    "HadoopVersion" : String,
    "KeepJobFlowAliveWhenNoSteps" : Boolean,
    "MasterInstanceFleet" : InstanceFleetConfig,
    "MasterInstanceGroup" : InstanceGroupConfig,
    "Placement" : PlacementType,
    "ServiceAccessSecurityGroup" : String,
    "TerminationProtected" : Boolean
  }


snippet KerberosAttributes-elasticmapreduce-cluster-kerberosattributes
  {
    "ADDomainJoinPassword" : String,
    "ADDomainJoinUser" : String,
    "CrossRealmTrustPrincipalPassword" : String,
    "KdcAdminPassword" : String,
    "Realm" : String
  }


snippet KeyValue-elasticmapreduce-cluster-keyvalue
  {
    "Key" : String,
    "Value" : String
  }


snippet MetricDimension-elasticmapreduce-cluster-metricdimension
  {
    "Key" : String,
    "Value" : String
  }


snippet PlacementType-elasticmapreduce-cluster-placementtype
  {
    "AvailabilityZone" : String
  }


snippet ScalingAction-elasticmapreduce-cluster-scalingaction
  {
    "Market" : String,
    "SimpleScalingPolicyConfiguration" : SimpleScalingPolicyConfiguration
  }


snippet ScalingConstraints-elasticmapreduce-cluster-scalingconstraints
  {
    "MaxCapacity" : Integer,
    "MinCapacity" : Integer
  }


snippet ScalingRule-elasticmapreduce-cluster-scalingrule
  {
    "Action" : ScalingAction,
    "Description" : String,
    "Name" : String,
    "Trigger" : ScalingTrigger
  }


snippet ScalingTrigger-elasticmapreduce-cluster-scalingtrigger
  {
    "CloudWatchAlarmDefinition" : CloudWatchAlarmDefinition
  }


snippet ScriptBootstrapActionConfig-elasticmapreduce-cluster-scriptbootstrapactionconfig
  {
    "Args" :  String, ... ,
    "Path" : String
  }


snippet SimpleScalingPolicyConfiguration-elasticmapreduce-cluster-simplescalingpolicyconfiguration
  {
    "AdjustmentType" : String,
    "CoolDown" : Integer,
    "ScalingAdjustment" : Integer
  }


snippet SpotProvisioningSpecification-elasticmapreduce-cluster-spotprovisioningspecification
  {
    "BlockDurationMinutes" : Integer,
    "TimeoutAction" : String,
    "TimeoutDurationMinutes" : Integer
  }


snippet StepConfig-elasticmapreduce-cluster-stepconfig
  {
    "ActionOnFailure" : String,
    "HadoopJarStep" : HadoopJarStepConfig,
    "Name" : String
  }


snippet VolumeSpecification-elasticmapreduce-cluster-volumespecification
  {
    "Iops" : Integer,
    "SizeInGB" : Integer,
    "VolumeType" : String
  }


snippet Configuration-elasticmapreduce-instancefleetconfig-configuration
  {
    "Classification" : String,
    "ConfigurationProperties" : {Key : Value, ...},
    "Configurations" :  Configuration, ... 
  }


snippet EbsBlockDeviceConfig-elasticmapreduce-instancefleetconfig-ebsblockdeviceconfig
  {
    "VolumeSpecification" : VolumeSpecification,
    "VolumesPerInstance" : Integer
  }


snippet EbsConfiguration-elasticmapreduce-instancefleetconfig-ebsconfiguration
  {
    "EbsBlockDeviceConfigs" :  EbsBlockDeviceConfig, ... ,
    "EbsOptimized" : Boolean
  }


snippet InstanceFleetProvisioningSpecifications-elasticmapreduce-instancefleetconfig-instancefleetprovisioningspecifications
  {
    "SpotSpecification" : SpotProvisioningSpecification
  }


snippet InstanceTypeConfig-elasticmapreduce-instancefleetconfig-instancetypeconfig
  {
    "BidPrice" : String,
    "BidPriceAsPercentageOfOnDemandPrice" : Double,
    "Configurations" :  Configuration, ... ,
    "EbsConfiguration" : EbsConfiguration,
    "InstanceType" : String,
    "WeightedCapacity" : Integer
  }


snippet SpotProvisioningSpecification-elasticmapreduce-instancefleetconfig-spotprovisioningspecification
  {
    "BlockDurationMinutes" : Integer,
    "TimeoutAction" : String,
    "TimeoutDurationMinutes" : Integer
  }


snippet VolumeSpecification-elasticmapreduce-instancefleetconfig-volumespecification
  {
    "Iops" : Integer,
    "SizeInGB" : Integer,
    "VolumeType" : String
  }


snippet AutoScalingPolicy-elasticmapreduce-instancegroupconfig-autoscalingpolicy
  {
    "Constraints" : ScalingConstraints,
    "Rules" :  ScalingRule, ... 
  }


snippet CloudWatchAlarmDefinition-elasticmapreduce-instancegroupconfig-cloudwatchalaefinition
  {
    "ComparisonOperator" : String,
    "Dimensions" :  MetricDimension, ... ,
    "EvaluationPeriods" : Integer,
    "MetricName" : String,
    "Namespace" : String,
    "Period" : Integer,
    "Statistic" : String,
    "Threshold" : Double,
    "Unit" : String
  }


snippet MetricDimension-elasticmapreduce-instancegroupconfig-metricdimension
  {
    "Key" : String,
    "Value" : String
  }


snippet ScalingAction-elasticmapreduce-instancegroupconfig-scalingaction
  {
    "Market" : String,
    "SimpleScalingPolicyConfiguration" : SimpleScalingPolicyConfiguration
  }


snippet ScalingConstraints-elasticmapreduce-instancegroupconfig-scalingconstraints
  {
    "MaxCapacity" : Integer,
    "MinCapacity" : Integer
  }


snippet ScalingRule-elasticmapreduce-instancegroupconfig-scalingrule
  {
    "Action" : ScalingAction,
    "Description" : String,
    "Name" : String,
    "Trigger" : ScalingTrigger
  }


snippet ScalingTrigger-elasticmapreduce-instancegroupconfig-scalingtrigger
  {
    "CloudWatchAlarmDefinition" : CloudWatchAlarmDefinition
  }


snippet SimpleScalingPolicyConfiguration-elasticmapreduce-instancegroupconfig-simplescalingpolicyconfiguration
  {
    "AdjustmentType" : String,
    "CoolDown" : Integer,
    "ScalingAdjustment" : Integer
  }


snippet HadoopJarStepConfig-elasticmapreduce-step-hadoopjarstepconfig
  {
    "Args" :  String, ... ,
    "Jar" : String,
    "MainClass" : String,
    "StepProperties" :  KeyValue, ... 
  }


snippet KeyValue-elasticmapreduce-step-keyvalue
  {
    "Key" : String,
    "Value" : String
  }


snippet EBSOptions-elasticsearch-domain-ebsoptions
  {
    "EBSEnabled" : Boolean,
    "Iops" : Integer,
    "VolumeSize" : Integer,
    "VolumeType" : String
  }


snippet ElasticsearchClusterConfig-elasticsearch-domain-elasticsearchclusterconfig
  {
    "DedicatedMasterCount" : Integer,
    "DedicatedMasterEnabled" : Boolean,
    "DedicatedMasterType" : String,
    "InstanceCount" : Integer,
    "InstanceType" : String,
    "ZoneAwarenessConfig" : ZoneAwarenessConfig,
    "ZoneAwarenessEnabled" : Boolean
  }


snippet EncryptionAtRestOptions-elasticsearch-domain-encryptionatrestoptions
  {
    "Enabled" : Boolean,
    "KmsKeyId" : String
  }


snippet NodeToNodeEncryptionOptions-elasticsearch-domain-nodetonodeencryptionoptions
  {
    "Enabled" : Boolean
  }


snippet SnapshotOptions-elasticsearch-domain-snapshotoptions
  {
    "AutomatedSnapshotStartHour" : Integer
  }


snippet VPCOptions-elasticsearch-domain-vpcoptions
  {
    "SecurityGroupIds" :  String, ... ,
    "SubnetIds" :  String, ... 
  }


snippet ZoneAwarenessConfig-elasticsearch-domain-zoneawarenessconfig
  {
    "AvailabilityZoneCount" : Integer
  }


snippet Configuration-emr-cluster-configuration
  {
    "Classification" : String,
    "ConfigurationProperties" : {Key : Value, ...},
    "Configurations" :  Configuration, ... 
  }


snippet VolumeSpecification-emr-ebsconfiguration-ebsblockdeviceconfig-volumespecification
  {
    "Iops" : Integer,
    "SizeInGB" : Integer,
    "VolumeType" : String
  }


snippet EbsBlockDeviceConfig-emr-ebsconfiguration-ebsblockdeviceconfig
  {
    "VolumeSpecification" : VolumeSpecification,
    "VolumesPerInstance" : Integer
  }


snippet EbsConfiguration-emr-ebsconfiguration
  {
    "EbsBlockDeviceConfigs" :  EbsBlockDeviceConfig, ... ,
    "EbsOptimized" : Boolean
  }


snippet Condition-events-eventbuspolicy-condition
  {
    "Key" : String,
    "Type" : String,
    "Value" : String
  }


snippet AwsVpcConfiguration-events-rule-awsvpcconfiguration
  {
    "AssignPublicIp" : String,
    "SecurityGroups" :  String, ... ,
    "Subnets" :  String, ... 
  }


snippet BatchArrayProperties-events-rule-batcharrayproperties
  {
    "Size" : Integer
  }


snippet BatchParameters-events-rule-batchparameters
  {
    "ArrayProperties" : BatchArrayProperties,
    "JobDefinition" : String,
    "JobName" : String,
    "RetryStrategy" : BatchRetryStrategy
  }


snippet BatchRetryStrategy-events-rule-batchretrystrategy
  {
    "Attempts" : Integer
  }


snippet EcsParameters-events-rule-ecsparameters
  {
    "Group" : String,
    "LaunchType" : String,
    "NetworkConfiguration" : NetworkConfiguration,
    "PlatformVersion" : String,
    "TaskCount" : Integer,
    "TaskDefinitionArn" : String
  }


snippet InputTransformer-events-rule-inputtransformer
  {
    "InputPathsMap" : {Key : Value, ...},
    "InputTemplate" : String
  }


snippet KinesisParameters-events-rule-kinesisparameters
  {
    "PartitionKeyPath" : String
  }


snippet NetworkConfiguration-events-rule-networkconfiguration
  {
    "AwsVpcConfiguration" : AwsVpcConfiguration
  }


snippet RunCommandParameters-events-rule-runcommandparameters
  {
    "RunCommandTargets" :  RunCommandTarget, ... 
  }


snippet RunCommandTarget-events-rule-runcommandtarget
  {
    "Key" : String,
    "Values" :  String, ... 
  }


snippet SqsParameters-events-rule-sqsparameters
  {
    "MessageGroupId" : String
  }


snippet Target-events-rule-target
  {
    "Arn" : String,
    "BatchParameters" : BatchParameters,
    "EcsParameters" : EcsParameters,
    "Id" : String,
    "Input" : String,
    "InputPath" : String,
    "InputTransformer" : InputTransformer,
    "KinesisParameters" : KinesisParameters,
    "RoleArn" : String,
    "RunCommandParameters" : RunCommandParameters,
    "SqsParameters" : SqsParameters
  }


snippet TagsEntry-eventschemas-discoverer-tagsentry
  {
    "Key" : String,
    "Value" : String
  }


snippet TagsEntry-eventschemas-registry-tagsentry
  {
    "Key" : String,
    "Value" : String
  }


snippet TagsEntry-eventschemas-schema-tagsentry
  {
    "Key" : String,
    "Value" : String
  }


snippet LustreConfiguration-fsx-filesystem-lustreconfiguration
  {
    "ExportPath" : String,
    "ImportPath" : String,
    "ImportedFileChunkSize" : Integer,
    "WeeklyMaintenanceStartTime" : String
  }


snippet SelfManagedActiveDirectoryConfiguration-fsx-filesystem-windowsconfiguration-selfmanagedactivedirectoryconfiguration
  {
    "DnsIps" :  String, ... ,
    "DomainName" : String,
    "FileSystemAdministratorsGroup" : String,
    "OrganizationalUnitDistinguishedName" : String,
    "Password" : String,
    "UserName" : String
  }


snippet WindowsConfiguration-fsx-filesystem-windowsconfiguration
  {
    "ActiveDirectoryId" : String,
    "AutomaticBackupRetentionDays" : Integer,
    "CopyTagsToBackups" : Boolean,
    "DailyAutomaticBackupStartTime" : String,
    "SelfManagedActiveDirectoryConfiguration" : SelfManagedActiveDirectoryConfiguration,
    "ThroughputCapacity" : Integer,
    "WeeklyMaintenanceStartTime" : String
  }


snippet RoutingStrategy-gamelift-alias-routingstrategy
  {
    "FleetId" : String,
    "Message" : String,
    "Type" : String
  }


snippet S3Location-gamelift-build-storagelocation
  {
    "Bucket" : String,
    "Key" : String,
    "RoleArn" : String
  }


snippet IpPermission-gamelift-fleet-ec2inboundpermission
  {
    "FromPort" : Integer,
    "IpRange" : String,
    "Protocol" : String,
    "ToPort" : Integer
  }


snippet CsvClassifier-glue-classifier-csvclassifier
  {
    "AllowSingleColumn" : Boolean,
    "ContainsHeader" : String,
    "Delimiter" : String,
    "DisableValueTrimming" : Boolean,
    "Header" :  String, ... ,
    "Name" : String,
    "QuoteSymbol" : String
  }


snippet GrokClassifier-glue-classifier-grokclassifier
  {
    "Classification" : String,
    "CustomPatterns" : String,
    "GrokPattern" : String,
    "Name" : String
  }


snippet JsonClassifier-glue-classifier-jsonclassifier
  {
    "JsonPath" : String,
    "Name" : String
  }


snippet XMLClassifier-glue-classifier-xmlclassifier
  {
    "Classification" : String,
    "Name" : String,
    "RowTag" : String
  }


snippet ConnectionInput-glue-connection-connectioninput
  {
    "ConnectionProperties" : Json,
    "ConnectionType" : String,
    "Description" : String,
    "MatchCriteria" :  String, ... ,
    "Name" : String,
    "PhysicalConnectionRequirements" : PhysicalConnectionRequirements
  }


snippet PhysicalConnectionRequirements-glue-connection-physicalconnectionrequirements
  {
    "AvailabilityZone" : String,
    "SecurityGroupIdList" :  String, ... ,
    "SubnetId" : String
  }


snippet CatalogTarget-glue-crawler-catalogtarget
  {
    "DatabaseName" : String,
    "Tables" :  String, ... 
  }


snippet DynamoDBTarget-glue-crawler-dynamodbtarget
  {
    "Path" : String
  }


snippet JdbcTarget-glue-crawler-jdbctarget
  {
    "ConnectionName" : String,
    "Exclusions" :  String, ... ,
    "Path" : String
  }


snippet S3Target-glue-crawler-s3target
  {
    "Exclusions" :  String, ... ,
    "Path" : String
  }


snippet Schedule-glue-crawler-schedule
  {
    "ScheduleExpression" : String
  }


snippet SchemaChangePolicy-glue-crawler-schemachangepolicy
  {
    "DeleteBehavior" : String,
    "UpdateBehavior" : String
  }


snippet Targets-glue-crawler-targets
  {
    "CatalogTargets" :  CatalogTarget, ... ,
    "DynamoDBTargets" :  DynamoDBTarget, ... ,
    "JdbcTargets" :  JdbcTarget, ... ,
    "S3Targets" :  S3Target, ... 
  }


snippet DatabaseInput-glue-database-databaseinput
  {
    "Description" : String,
    "LocationUri" : String,
    "Name" : String,
    "Parameters" : Json
  }


snippet ConnectionPasswordEncryption-glue-datacatalogencryptionsettings-connectionpasswordencryption
  {
    "KmsKeyId" : String,
    "ReturnConnectionPasswordEncrypted" : Boolean
  }


snippet DataCatalogEncryptionSettings-glue-datacatalogencryptionsettings-datacatalogencryptionsettings
  {
    "ConnectionPasswordEncryption" : ConnectionPasswordEncryption,
    "EncryptionAtRest" : EncryptionAtRest
  }


snippet EncryptionAtRest-glue-datacatalogencryptionsettings-encryptionatrest
  {
    "CatalogEncryptionMode" : String,
    "SseAwsKmsKeyId" : String
  }


snippet ConnectionsList-glue-job-connectionslist
  {
    "Connections" :  String, ... 
  }


snippet ExecutionProperty-glue-job-executionproperty
  {
    "MaxConcurrentRuns" : Double
  }


snippet JobCommand-glue-job-jobcommand
  {
    "Name" : String,
    "PythonVersion" : String,
    "ScriptLocation" : String
  }


snippet NotificationProperty-glue-job-notificationproperty
  {
    "NotifyDelayAfter" : Integer
  }


snippet GlueTables-glue-mltransform-inputrecordtables-gluetables
  {
    "CatalogId" : String,
    "ConnectionName" : String,
    "DatabaseName" : String,
    "TableName" : String
  }


snippet InputRecordTables-glue-mltransform-inputrecordtables
  {
    "GlueTables" :  GlueTables, ... 
  }


snippet FindMatchesParameters-glue-mltransform-transformparameters-findmatchesparameters
  {
    "AccuracyCostTradeoff" : Double,
    "EnforceProvidedLabels" : Boolean,
    "PrecisionRecallTradeoff" : Double,
    "PrimaryKeyColumnName" : String
  }


snippet TransformParameters-glue-mltransform-transformparameters
  {
    "FindMatchesParameters" : FindMatchesParameters,
    "TransformType" : String
  }


snippet Column-glue-partition-column
  {
    "Comment" : String,
    "Name" : String,
    "Type" : String
  }


snippet Order-glue-partition-order
  {
    "Column" : String,
    "SortOrder" : Integer
  }


snippet PartitionInput-glue-partition-partitioninput
  {
    "Parameters" : Json,
    "StorageDescriptor" : StorageDescriptor,
    "Values" :  String, ... 
  }


snippet SerdeInfo-glue-partition-serdeinfo
  {
    "Name" : String,
    "Parameters" : Json,
    "SerializationLibrary" : String
  }


snippet SkewedInfo-glue-partition-skewedinfo
  {
    "SkewedColumnNames" :  String, ... ,
    "SkewedColumnValueLocationMaps" : Json,
    "SkewedColumnValues" :  String, ... 
  }


snippet StorageDescriptor-glue-partition-storagedescriptor
  {
    "BucketColumns" :  String, ... ,
    "Columns" :  Column, ... ,
    "Compressed" : Boolean,
    "InputFormat" : String,
    "Location" : String,
    "NumberOfBuckets" : Integer,
    "OutputFormat" : String,
    "Parameters" : Json,
    "SerdeInfo" : SerdeInfo,
    "SkewedInfo" : SkewedInfo,
    "SortColumns" :  Order, ... ,
    "StoredAsSubDirectories" : Boolean
  }


snippet CloudWatchEncryption-glue-securityconfiguration-cloudwatchencryption
  {
    "CloudWatchEncryptionMode" : String,
    "KmsKeyArn" : String
  }


snippet EncryptionConfiguration-glue-securityconfiguration-encryptionconfiguration
  {
    "CloudWatchEncryption" : CloudWatchEncryption,
    "JobBookmarksEncryption" : JobBookmarksEncryption,
    "S3Encryptions" :  S3Encryption, ... 
  }


snippet JobBookmarksEncryption-glue-securityconfiguration-jobbookmarksencryption
  {
    "JobBookmarksEncryptionMode" : String,
    "KmsKeyArn" : String
  }


snippet S3Encryption-glue-securityconfiguration-s3encryption
  {
    "KmsKeyArn" : String,
    "S3EncryptionMode" : String
  }


snippet Column-glue-table-column
  {
    "Comment" : String,
    "Name" : String,
    "Type" : String
  }


snippet Order-glue-table-order
  {
    "Column" : String,
    "SortOrder" : Integer
  }


snippet SerdeInfo-glue-table-serdeinfo
  {
    "Name" : String,
    "Parameters" : Json,
    "SerializationLibrary" : String
  }


snippet SkewedInfo-glue-table-skewedinfo
  {
    "SkewedColumnNames" :  String, ... ,
    "SkewedColumnValueLocationMaps" : Json,
    "SkewedColumnValues" :  String, ... 
  }


snippet StorageDescriptor-glue-table-storagedescriptor
  {
    "BucketColumns" :  String, ... ,
    "Columns" :  Column, ... ,
    "Compressed" : Boolean,
    "InputFormat" : String,
    "Location" : String,
    "NumberOfBuckets" : Integer,
    "OutputFormat" : String,
    "Parameters" : Json,
    "SerdeInfo" : SerdeInfo,
    "SkewedInfo" : SkewedInfo,
    "SortColumns" :  Order, ... ,
    "StoredAsSubDirectories" : Boolean
  }


snippet TableInput-glue-table-tableinput
  {
    "Description" : String,
    "Name" : String,
    "Owner" : String,
    "Parameters" : Json,
    "PartitionKeys" :  Column, ... ,
    "Retention" : Integer,
    "StorageDescriptor" : StorageDescriptor,
    "TableType" : String,
    "ViewExpandedText" : String,
    "ViewOriginalText" : String
  }


snippet Action-glue-trigger-action
  {
    "Arguments" : Json,
    "JobName" : String,
    "SecurityConfiguration" : String
  }


snippet Condition-glue-trigger-condition
  {
    "JobName" : String,
    "LogicalOperator" : String,
    "State" : String
  }


snippet Predicate-glue-trigger-predicate
  {
    "Conditions" :  Condition, ... ,
    "Logical" : String
  }


snippet Connector-greengrass-connectordefinition-connector
  {
    "ConnectorArn" : String,
    "Id" : String,
    "Parameters" : Json
  }


snippet ConnectorDefinitionVersion-greengrass-connectordefinition-connectordefinitionversion
  {
    "Connectors" :  Connector, ... 
  }


snippet Connector-greengrass-connectordefinitionversion-connector
  {
    "ConnectorArn" : String,
    "Id" : String,
    "Parameters" : Json
  }


snippet Core-greengrass-coredefinition-core
  {
    "CertificateArn" : String,
    "Id" : String,
    "SyncShadow" : Boolean,
    "ThingArn" : String
  }


snippet CoreDefinitionVersion-greengrass-coredefinition-coredefinitionversion
  {
    "Cores" :  Core, ... 
  }


snippet Core-greengrass-coredefinitionversion-core
  {
    "CertificateArn" : String,
    "Id" : String,
    "SyncShadow" : Boolean,
    "ThingArn" : String
  }


snippet Device-greengrass-devicedefinition-device
  {
    "CertificateArn" : String,
    "Id" : String,
    "SyncShadow" : Boolean,
    "ThingArn" : String
  }


snippet DeviceDefinitionVersion-greengrass-devicedefinition-devicedefinitionversion
  {
    "Devices" :  Device, ... 
  }


snippet Device-greengrass-devicedefinitionversion-device
  {
    "CertificateArn" : String,
    "Id" : String,
    "SyncShadow" : Boolean,
    "ThingArn" : String
  }


snippet DefaultConfig-greengrass-functiondefinition-defaultconfig
  {
    "Execution" : Execution
  }


snippet Environment-greengrass-functiondefinition-environment
  {
    "AccessSysfs" : Boolean,
    "Execution" : Execution,
    "ResourceAccessPolicies" :  ResourceAccessPolicy, ... ,
    "Variables" : Json
  }


snippet Execution-greengrass-functiondefinition-execution
  {
    "IsolationMode" : String,
    "RunAs" : RunAs
  }


snippet Function-greengrass-functiondefinition-function
  {
    "FunctionArn" : String,
    "FunctionConfiguration" : FunctionConfiguration,
    "Id" : String
  }


snippet FunctionConfiguration-greengrass-functiondefinition-functionconfiguration
  {
    "EncodingType" : String,
    "Environment" : Environment,
    "ExecArgs" : String,
    "Executable" : String,
    "MemorySize" : Integer,
    "Pinned" : Boolean,
    "Timeout" : Integer
  }


snippet FunctionDefinitionVersion-greengrass-functiondefinition-functiondefinitionversion
  {
    "DefaultConfig" : DefaultConfig,
    "Functions" :  Function, ... 
  }


snippet ResourceAccessPolicy-greengrass-functiondefinition-resourceaccesspolicy
  {
    "Permission" : String,
    "ResourceId" : String
  }


snippet RunAs-greengrass-functiondefinition-runas
  {
    "Gid" : Integer,
    "Uid" : Integer
  }


snippet DefaultConfig-greengrass-functiondefinitionversion-defaultconfig
  {
    "Execution" : Execution
  }


snippet Environment-greengrass-functiondefinitionversion-environment
  {
    "AccessSysfs" : Boolean,
    "Execution" : Execution,
    "ResourceAccessPolicies" :  ResourceAccessPolicy, ... ,
    "Variables" : Json
  }


snippet Execution-greengrass-functiondefinitionversion-execution
  {
    "IsolationMode" : String,
    "RunAs" : RunAs
  }


snippet Function-greengrass-functiondefinitionversion-function
  {
    "FunctionArn" : String,
    "FunctionConfiguration" : FunctionConfiguration,
    "Id" : String
  }


snippet FunctionConfiguration-greengrass-functiondefinitionversion-functionconfiguration
  {
    "EncodingType" : String,
    "Environment" : Environment,
    "ExecArgs" : String,
    "Executable" : String,
    "MemorySize" : Integer,
    "Pinned" : Boolean,
    "Timeout" : Integer
  }


snippet ResourceAccessPolicy-greengrass-functiondefinitionversion-resourceaccesspolicy
  {
    "Permission" : String,
    "ResourceId" : String
  }


snippet RunAs-greengrass-functiondefinitionversion-runas
  {
    "Gid" : Integer,
    "Uid" : Integer
  }


snippet GroupVersion-greengrass-group-groupversion
  {
    "ConnectorDefinitionVersionArn" : String,
    "CoreDefinitionVersionArn" : String,
    "DeviceDefinitionVersionArn" : String,
    "FunctionDefinitionVersionArn" : String,
    "LoggerDefinitionVersionArn" : String,
    "ResourceDefinitionVersionArn" : String,
    "SubscriptionDefinitionVersionArn" : String
  }


snippet Logger-greengrass-loggerdefinition-logger
  {
    "Component" : String,
    "Id" : String,
    "Level" : String,
    "Space" : Integer,
    "Type" : String
  }


snippet LoggerDefinitionVersion-greengrass-loggerdefinition-loggerdefinitionversion
  {
    "Loggers" :  Logger, ... 
  }


snippet Logger-greengrass-loggerdefinitionversion-logger
  {
    "Component" : String,
    "Id" : String,
    "Level" : String,
    "Space" : Integer,
    "Type" : String
  }


snippet GroupOwnerSetting-greengrass-resourcedefinition-groupownersetting
  {
    "AutoAddGroupOwner" : Boolean,
    "GroupOwner" : String
  }


snippet LocalDeviceResourceData-greengrass-resourcedefinition-localdeviceresourcedata
  {
    "GroupOwnerSetting" : GroupOwnerSetting,
    "SourcePath" : String
  }


snippet LocalVolumeResourceData-greengrass-resourcedefinition-localvolumeresourcedata
  {
    "DestinationPath" : String,
    "GroupOwnerSetting" : GroupOwnerSetting,
    "SourcePath" : String
  }


snippet ResourceDataContainer-greengrass-resourcedefinition-resourcedatacontainer
  {
    "LocalDeviceResourceData" : LocalDeviceResourceData,
    "LocalVolumeResourceData" : LocalVolumeResourceData,
    "S3MachineLearningModelResourceData" : S3MachineLearningModelResourceData,
    "SageMakerMachineLearningModelResourceData" : SageMakerMachineLearningModelResourceData,
    "SecretsManagerSecretResourceData" : SecretsManagerSecretResourceData
  }


snippet ResourceDefinitionVersion-greengrass-resourcedefinition-resourcedefinitionversion
  {
    "Resources" :  ResourceInstance, ... 
  }


snippet ResourceInstance-greengrass-resourcedefinition-resourceinstance
  {
    "Id" : String,
    "Name" : String,
    "ResourceDataContainer" : ResourceDataContainer
  }


snippet S3MachineLearningModelResourceData-greengrass-resourcedefinition-s3machinelearningmodelresourcedata
  {
    "DestinationPath" : String,
    "S3Uri" : String
  }


snippet SageMakerMachineLearningModelResourceData-greengrass-resourcedefinition-sagemakermachinelearningmodelresourcedata
  {
    "DestinationPath" : String,
    "SageMakerJobArn" : String
  }


snippet SecretsManagerSecretResourceData-greengrass-resourcedefinition-secretsmanagersecretresourcedata
  {
    "ARN" : String,
    "AdditionalStagingLabelsToDownload" :  String, ... 
  }


snippet GroupOwnerSetting-greengrass-resourcedefinitionversion-groupownersetting
  {
    "AutoAddGroupOwner" : Boolean,
    "GroupOwner" : String
  }


snippet LocalDeviceResourceData-greengrass-resourcedefinitionversion-localdeviceresourcedata
  {
    "GroupOwnerSetting" : GroupOwnerSetting,
    "SourcePath" : String
  }


snippet LocalVolumeResourceData-greengrass-resourcedefinitionversion-localvolumeresourcedata
  {
    "DestinationPath" : String,
    "GroupOwnerSetting" : GroupOwnerSetting,
    "SourcePath" : String
  }


snippet ResourceDataContainer-greengrass-resourcedefinitionversion-resourcedatacontainer
  {
    "LocalDeviceResourceData" : LocalDeviceResourceData,
    "LocalVolumeResourceData" : LocalVolumeResourceData,
    "S3MachineLearningModelResourceData" : S3MachineLearningModelResourceData,
    "SageMakerMachineLearningModelResourceData" : SageMakerMachineLearningModelResourceData,
    "SecretsManagerSecretResourceData" : SecretsManagerSecretResourceData
  }


snippet ResourceInstance-greengrass-resourcedefinitionversion-resourceinstance
  {
    "Id" : String,
    "Name" : String,
    "ResourceDataContainer" : ResourceDataContainer
  }


snippet S3MachineLearningModelResourceData-greengrass-resourcedefinitionversion-s3machinelearningmodelresourcedata
  {
    "DestinationPath" : String,
    "S3Uri" : String
  }


snippet SageMakerMachineLearningModelResourceData-greengrass-resourcedefinitionversion-sagemakermachinelearningmodelresourcedata
  {
    "DestinationPath" : String,
    "SageMakerJobArn" : String
  }


snippet SecretsManagerSecretResourceData-greengrass-resourcedefinitionversion-secretsmanagersecretresourcedata
  {
    "ARN" : String,
    "AdditionalStagingLabelsToDownload" :  String, ... 
  }


snippet Subscription-greengrass-subscriptiondefinition-subscription
  {
    "Id" : String,
    "Source" : String,
    "Subject" : String,
    "Target" : String
  }


snippet SubscriptionDefinitionVersion-greengrass-subscriptiondefinition-subscriptiondefinitionversion
  {
    "Subscriptions" :  Subscription, ... 
  }


snippet Subscription-greengrass-subscriptiondefinitionversion-subscription
  {
    "Id" : String,
    "Source" : String,
    "Subject" : String,
    "Target" : String
  }


snippet Condition-guardduty-filter-condition
  {
    "Eq" :  String, ... ,
    "Gte" : Integer,
    "Lt" : Integer,
    "Lte" : Integer,
    "Neq" :  String, ... 
  }


snippet FindingCriteria-guardduty-filter-findingcriteria
  {
    "Criterion" : Json,
    "ItemType" : Condition
  }


snippet AWS::IAM::AccessKey-iam-accesskey
  {
    "Type" : "AWS::IAM::AccessKey",
    "Properties" : {
        "Serial" : Integer,
        "Status" : String,
        "UserName" : String
      }
  }


snippet AWS::IAM::UserToGroupAddition-iam-addusertogroup
  {
    "Type" : "AWS::IAM::UserToGroupAddition",
    "Properties" : {
        "GroupName" : String,
        "Users" :  String, ... 
      }
  }


snippet AWS::IAM::Group-iam-group
  {
    "Type" : "AWS::IAM::Group",
    "Properties" : {
        "GroupName" : String,
        "ManagedPolicyArns" :  String, ... ,
        "Path" : String,
        "Policies" :  Policy, ... 
      }
  }


snippet Policy-iam-policy-1
  {
    "PolicyDocument" : Json,
    "PolicyName" : String
  }


snippet Policy-iam-policy-2
  {
    "PolicyDocument" : Json,
    "PolicyName" : String
  }


snippet Policy-iam-policy
  {
    "PolicyDocument" : Json,
    "PolicyName" : String
  }


snippet LoginProfile-iam-user-loginprofile
  {
    "Password" : String,
    "PasswordResetRequired" : Boolean
  }


snippet AWS::IAM::User-iam-user
  {
    "Type" : "AWS::IAM::User",
    "Properties" : {
        "Groups" :  String, ... ,
        "LoginProfile" : LoginProfile,
        "ManagedPolicyArns" :  String, ... ,
        "Path" : String,
        "PermissionsBoundary" : String,
        "Policies" :  Policy, ... ,
        "UserName" : String
      }
  }


snippet AttributePayload-iot-thing-attributepayload
  {
    "Attributes" : {Key : Value, ...}
  }


snippet Action-iot-topicrule-action
  {
    "CloudwatchAlarm" : CloudwatchAlarmAction,
    "CloudwatchMetric" : CloudwatchMetricAction,
    "DynamoDB" : DynamoDBAction,
    "DynamoDBv2" : DynamoDBv2Action,
    "Elasticsearch" : ElasticsearchAction,
    "Firehose" : FirehoseAction,
    "IotAnalytics" : IotAnalyticsAction,
    "Kinesis" : KinesisAction,
    "Lambda" : LambdaAction,
    "Republish" : RepublishAction,
    "S3" : S3Action,
    "Sns" : SnsAction,
    "Sqs" : SqsAction,
    "StepFunctions" : StepFunctionsAction
  }


snippet CloudwatchAlarmAction-iot-topicrule-cloudwatchalarmaction
  {
    "AlarmName" : String,
    "RoleArn" : String,
    "StateReason" : String,
    "StateValue" : String
  }


snippet CloudwatchMetricAction-iot-topicrule-cloudwatchmetricaction
  {
    "MetricName" : String,
    "MetricNamespace" : String,
    "MetricTimestamp" : String,
    "MetricUnit" : String,
    "MetricValue" : String,
    "RoleArn" : String
  }


snippet DynamoDBAction-iot-topicrule-dynamodbaction
  {
    "HashKeyField" : String,
    "HashKeyType" : String,
    "HashKeyValue" : String,
    "PayloadField" : String,
    "RangeKeyField" : String,
    "RangeKeyType" : String,
    "RangeKeyValue" : String,
    "RoleArn" : String,
    "TableName" : String
  }


snippet DynamoDBv2Action-iot-topicrule-dynamodbv2action
  {
    "PutItem" : PutItemInput,
    "RoleArn" : String
  }


snippet ElasticsearchAction-iot-topicrule-elasticsearchaction
  {
    "Endpoint" : String,
    "Id" : String,
    "Index" : String,
    "RoleArn" : String,
    "Type" : String
  }


snippet FirehoseAction-iot-topicrule-firehoseaction
  {
    "DeliveryStreamName" : String,
    "RoleArn" : String,
    "Separator" : String
  }


snippet IotAnalyticsAction-iot-topicrule-iotanalyticsaction
  {
    "ChannelName" : String,
    "RoleArn" : String
  }


snippet KinesisAction-iot-topicrule-kinesisaction
  {
    "PartitionKey" : String,
    "RoleArn" : String,
    "StreamName" : String
  }


snippet LambdaAction-iot-topicrule-lambdaaction
  {
    "FunctionArn" : String
  }


snippet PutItemInput-iot-topicrule-putiteminput
  {
    "TableName" : String
  }


snippet RepublishAction-iot-topicrule-republishaction
  {
    "RoleArn" : String,
    "Topic" : String
  }


snippet S3Action-iot-topicrule-s3action
  {
    "BucketName" : String,
    "Key" : String,
    "RoleArn" : String
  }


snippet SnsAction-iot-topicrule-snsaction
  {
    "MessageFormat" : String,
    "RoleArn" : String,
    "TargetArn" : String
  }


snippet SqsAction-iot-topicrule-sqsaction
  {
    "QueueUrl" : String,
    "RoleArn" : String,
    "UseBase64" : Boolean
  }


snippet StepFunctionsAction-iot-topicrule-stepfunctionsaction
  {
    "ExecutionNamePrefix" : String,
    "RoleArn" : String,
    "StateMachineName" : String
  }


snippet TopicRulePayload-iot-topicrule-topicrulepayload
  {
    "Actions" :  Action, ... ,
    "AwsIotSqlVersion" : String,
    "Description" : String,
    "ErrorAction" : Action,
    "RuleDisabled" : Boolean,
    "Sql" : String
  }


snippet DeviceTemplate-iot1click-project-devicetemplate
  {
    "CallbackOverrides" : Json,
    "DeviceType" : String
  }


snippet PlacementTemplate-iot1click-project-placementtemplate
  {
    "DefaultAttributes" : Json,
    "DeviceTemplates" : Json
  }


snippet ChannelStorage-iotanalytics-channel-channelstorage
  {
    "CustomerManagedS3" : CustomerManagedS3,
    "ServiceManagedS3" : ServiceManagedS3
  }


snippet CustomerManagedS3-iotanalytics-channel-customermanageds3
  {
    "Bucket" : String,
    "KeyPrefix" : String,
    "RoleArn" : String
  }


snippet RetentionPeriod-iotanalytics-channel-retentionperiod
  {
    "NumberOfDays" : Integer,
    "Unlimited" : Boolean
  }


snippet ServiceManagedS3-iotanalytics-channel-servicemanageds3
  {
  }


snippet Action-iotanalytics-dataset-action
  {
    "ActionName" : String,
    "ContainerAction" : ContainerAction,
    "QueryAction" : QueryAction
  }


snippet ContainerAction-iotanalytics-dataset-containeraction
  {
    "ExecutionRoleArn" : String,
    "Image" : String,
    "ResourceConfiguration" : ResourceConfiguration,
    "Variables" :  Variable, ... 
  }


snippet DatasetContentDeliveryRule-iotanalytics-dataset-datasetcontentdeliveryrule
  {
    "Destination" : DatasetContentDeliveryRuleDestination,
    "EntryName" : String
  }


snippet DatasetContentDeliveryRuleDestination-iotanalytics-dataset-datasetcontentdeliveryruledestination
  {
    "IotEventsDestinationConfiguration" : IotEventsDestinationConfiguration,
    "S3DestinationConfiguration" : S3DestinationConfiguration
  }


snippet DeltaTime-iotanalytics-dataset-deltatime
  {
    "OffsetSeconds" : Integer,
    "TimeExpression" : String
  }


snippet Filter-iotanalytics-dataset-filter
  {
    "DeltaTime" : DeltaTime
  }


snippet GlueConfiguration-iotanalytics-dataset-glueconfiguration
  {
    "DatabaseName" : String,
    "TableName" : String
  }


snippet IotEventsDestinationConfiguration-iotanalytics-dataset-ioteventsdestinationconfiguration
  {
    "InputName" : String,
    "RoleArn" : String
  }


snippet QueryAction-iotanalytics-dataset-queryaction
  {
    "Filters" :  Filter, ... ,
    "SqlQuery" : String
  }


snippet ResourceConfiguration-iotanalytics-dataset-resourceconfiguration
  {
    "ComputeType" : String,
    "VolumeSizeInGB" : Integer
  }


snippet RetentionPeriod-iotanalytics-dataset-retentionperiod
  {
    "NumberOfDays" : Integer,
    "Unlimited" : Boolean
  }


snippet S3DestinationConfiguration-iotanalytics-dataset-s3destinationconfiguration
  {
    "Bucket" : String,
    "GlueConfiguration" : GlueConfiguration,
    "Key" : String,
    "RoleArn" : String
  }


snippet Schedule-iotanalytics-dataset-trigger-schedule
  {
    "ScheduleExpression" : String
  }


snippet Trigger-iotanalytics-dataset-trigger
  {
    "Schedule" : Schedule,
    "TriggeringDataset" : TriggeringDataset
  }


snippet TriggeringDataset-iotanalytics-dataset-triggeringdataset
  {
    "DatasetName" : String
  }


snippet DatasetContentVersionValue-iotanalytics-dataset-variable-datasetcontentversionvalue
  {
    "DatasetName" : String
  }


snippet OutputFileUriValue-iotanalytics-dataset-variable-outputfileurivalue
  {
    "FileName" : String
  }


snippet Variable-iotanalytics-dataset-variable
  {
    "DatasetContentVersionValue" : DatasetContentVersionValue,
    "DoubleValue" : Double,
    "OutputFileUriValue" : OutputFileUriValue,
    "StringValue" : String,
    "VariableName" : String
  }


snippet VersioningConfiguration-iotanalytics-dataset-versioningconfiguration
  {
    "MaxVersions" : Integer,
    "Unlimited" : Boolean
  }


snippet CustomerManagedS3-iotanalytics-datastore-customermanageds3
  {
    "Bucket" : String,
    "KeyPrefix" : String,
    "RoleArn" : String
  }


snippet DatastoreStorage-iotanalytics-datastore-datastorestorage
  {
    "CustomerManagedS3" : CustomerManagedS3,
    "ServiceManagedS3" : ServiceManagedS3
  }


snippet RetentionPeriod-iotanalytics-datastore-retentionperiod
  {
    "NumberOfDays" : Integer,
    "Unlimited" : Boolean
  }


snippet ServiceManagedS3-iotanalytics-datastore-servicemanageds3
  {
  }


snippet Activity-iotanalytics-pipeline-activity
  {
    "AddAttributes" : AddAttributes,
    "Channel" : Channel,
    "Datastore" : Datastore,
    "DeviceRegistryEnrich" : DeviceRegistryEnrich,
    "DeviceShadowEnrich" : DeviceShadowEnrich,
    "Filter" : Filter,
    "Lambda" : Lambda,
    "Math" : Math,
    "RemoveAttributes" : RemoveAttributes,
    "SelectAttributes" : SelectAttributes
  }


snippet AddAttributes-iotanalytics-pipeline-addattributes
  {
    "Attributes" : Json,
    "Name" : String,
    "Next" : String
  }


snippet Channel-iotanalytics-pipeline-channel
  {
    "ChannelName" : String,
    "Name" : String,
    "Next" : String
  }


snippet Datastore-iotanalytics-pipeline-datastore
  {
    "DatastoreName" : String,
    "Name" : String
  }


snippet DeviceRegistryEnrich-iotanalytics-pipeline-deviceregistryenrich
  {
    "Attribute" : String,
    "Name" : String,
    "Next" : String,
    "RoleArn" : String,
    "ThingName" : String
  }


snippet DeviceShadowEnrich-iotanalytics-pipeline-deviceshadowenrich
  {
    "Attribute" : String,
    "Name" : String,
    "Next" : String,
    "RoleArn" : String,
    "ThingName" : String
  }


snippet Filter-iotanalytics-pipeline-filter
  {
    "Filter" : String,
    "Name" : String,
    "Next" : String
  }


snippet Lambda-iotanalytics-pipeline-lambda
  {
    "BatchSize" : Integer,
    "LambdaName" : String,
    "Name" : String,
    "Next" : String
  }


snippet Math-iotanalytics-pipeline-math
  {
    "Attribute" : String,
    "Math" : String,
    "Name" : String,
    "Next" : String
  }


snippet RemoveAttributes-iotanalytics-pipeline-removeattributes
  {
    "Attributes" :  String, ... ,
    "Name" : String,
    "Next" : String
  }


snippet SelectAttributes-iotanalytics-pipeline-selectattributes
  {
    "Attributes" :  String, ... ,
    "Name" : String,
    "Next" : String
  }


snippet Action-iotevents-detectormodel-action
  {
    "ClearTimer" : ClearTimer,
    "Firehose" : Firehose,
    "IotEvents" : IotEvents,
    "IotTopicPublish" : IotTopicPublish,
    "Lambda" : Lambda,
    "ResetTimer" : ResetTimer,
    "SetTimer" : SetTimer,
    "SetVariable" : SetVariable,
    "Sns" : Sns,
    "Sqs" : Sqs
  }


snippet ClearTimer-iotevents-detectormodel-cleartimer
  {
    "TimerName" : String
  }


snippet DetectorModelDefinition-iotevents-detectormodel-detectormodeldefinition
  {
    "InitialStateName" : String,
    "States" :  State, ... 
  }


snippet Event-iotevents-detectormodel-event
  {
    "Actions" :  Action, ... ,
    "Condition" : String,
    "EventName" : String
  }


snippet Firehose-iotevents-detectormodel-firehose
  {
    "DeliveryStreamName" : String,
    "Separator" : String
  }


snippet IotEvents-iotevents-detectormodel-iotevents
  {
    "InputName" : String
  }


snippet IotTopicPublish-iotevents-detectormodel-iottopicpublish
  {
    "MqttTopic" : String
  }


snippet Lambda-iotevents-detectormodel-lambda
  {
    "FunctionArn" : String
  }


snippet OnEnter-iotevents-detectormodel-onenter
  {
    "Events" :  Event, ... 
  }


snippet OnExit-iotevents-detectormodel-onexit
  {
    "Events" :  Event, ... 
  }


snippet OnInput-iotevents-detectormodel-oninput
  {
    "Events" :  Event, ... ,
    "TransitionEvents" :  TransitionEvent, ... 
  }


snippet ResetTimer-iotevents-detectormodel-resettimer
  {
    "TimerName" : String
  }


snippet SetTimer-iotevents-detectormodel-settimer
  {
    "Seconds" : Integer,
    "TimerName" : String
  }


snippet SetVariable-iotevents-detectormodel-setvariable
  {
    "Value" : String,
    "VariableName" : String
  }


snippet Sns-iotevents-detectormodel-sns
  {
    "TargetArn" : String
  }


snippet Sqs-iotevents-detectormodel-sqs
  {
    "QueueUrl" : String,
    "UseBase64" : Boolean
  }


snippet State-iotevents-detectormodel-state
  {
    "OnEnter" : OnEnter,
    "OnExit" : OnExit,
    "OnInput" : OnInput,
    "StateName" : String
  }


snippet TransitionEvent-iotevents-detectormodel-transitionevent
  {
    "Actions" :  Action, ... ,
    "Condition" : String,
    "EventName" : String,
    "NextState" : String
  }


snippet Attribute-iotevents-input-attribute
  {
    "JsonPath" : String
  }


snippet InputDefinition-iotevents-input-inputdefinition
  {
    "Attributes" :  Attribute, ... 
  }


snippet DefinitionDocument-iotthingsgraph-flowtemplate-definitiondocument
  {
    "Language" : String,
    "Text" : String
  }


snippet StreamEncryption-kinesis-stream-streamencryption
  {
    "EncryptionType" : String,
    "KeyId" : String
  }


snippet CSVMappingParameters-kinesisanalytics-application-csvmappingparameters
  {
    "RecordColumnDelimiter" : String,
    "RecordRowDelimiter" : String
  }


snippet Input-kinesisanalytics-application-input
  {
    "InputParallelism" : InputParallelism,
    "InputProcessingConfiguration" : InputProcessingConfiguration,
    "InputSchema" : InputSchema,
    "KinesisFirehoseInput" : KinesisFirehoseInput,
    "KinesisStreamsInput" : KinesisStreamsInput,
    "NamePrefix" : String
  }


snippet InputLambdaProcessor-kinesisanalytics-application-inputlambdaprocessor
  {
    "ResourceARN" : String,
    "RoleARN" : String
  }


snippet InputParallelism-kinesisanalytics-application-inputparallelism
  {
    "Count" : Integer
  }


snippet InputProcessingConfiguration-kinesisanalytics-application-inputprocessingconfiguration
  {
    "InputLambdaProcessor" : InputLambdaProcessor
  }


snippet InputSchema-kinesisanalytics-application-inputschema
  {
    "RecordColumns" :  RecordColumn, ... ,
    "RecordEncoding" : String,
    "RecordFormat" : RecordFormat
  }


snippet JSONMappingParameters-kinesisanalytics-application-jsonmappingparameters
  {
    "RecordRowPath" : String
  }


snippet KinesisFirehoseInput-kinesisanalytics-application-kinesisfirehoseinput
  {
    "ResourceARN" : String,
    "RoleARN" : String
  }


snippet KinesisStreamsInput-kinesisanalytics-application-kinesisstreamsinput
  {
    "ResourceARN" : String,
    "RoleARN" : String
  }


snippet MappingParameters-kinesisanalytics-application-mappingparameters
  {
    "CSVMappingParameters" : CSVMappingParameters,
    "JSONMappingParameters" : JSONMappingParameters
  }


snippet RecordColumn-kinesisanalytics-application-recordcolumn
  {
    "Mapping" : String,
    "Name" : String,
    "SqlType" : String
  }


snippet RecordFormat-kinesisanalytics-application-recordformat
  {
    "MappingParameters" : MappingParameters,
    "RecordFormatType" : String
  }


snippet DestinationSchema-kinesisanalytics-applicationoutput-destinationschema
  {
    "RecordFormatType" : String
  }


snippet KinesisFirehoseOutput-kinesisanalytics-applicationoutput-kinesisfirehoseoutput
  {
    "ResourceARN" : String,
    "RoleARN" : String
  }


snippet KinesisStreamsOutput-kinesisanalytics-applicationoutput-kinesisstreamsoutput
  {
    "ResourceARN" : String,
    "RoleARN" : String
  }


snippet LambdaOutput-kinesisanalytics-applicationoutput-lambdaoutput
  {
    "ResourceARN" : String,
    "RoleARN" : String
  }


snippet Output-kinesisanalytics-applicationoutput-output
  {
    "DestinationSchema" : DestinationSchema,
    "KinesisFirehoseOutput" : KinesisFirehoseOutput,
    "KinesisStreamsOutput" : KinesisStreamsOutput,
    "LambdaOutput" : LambdaOutput,
    "Name" : String
  }


snippet CSVMappingParameters-kinesisanalytics-applicationreferencedatasource-csvmappingparameters
  {
    "RecordColumnDelimiter" : String,
    "RecordRowDelimiter" : String
  }


snippet JSONMappingParameters-kinesisanalytics-applicationreferencedatasource-jsonmappingparameters
  {
    "RecordRowPath" : String
  }


snippet MappingParameters-kinesisanalytics-applicationreferencedatasource-mappingparameters
  {
    "CSVMappingParameters" : CSVMappingParameters,
    "JSONMappingParameters" : JSONMappingParameters
  }


snippet RecordColumn-kinesisanalytics-applicationreferencedatasource-recordcolumn
  {
    "Mapping" : String,
    "Name" : String,
    "SqlType" : String
  }


snippet RecordFormat-kinesisanalytics-applicationreferencedatasource-recordformat
  {
    "MappingParameters" : MappingParameters,
    "RecordFormatType" : String
  }


snippet ReferenceDataSource-kinesisanalytics-applicationreferencedatasource-referencedatasource
  {
    "ReferenceSchema" : ReferenceSchema,
    "S3ReferenceDataSource" : S3ReferenceDataSource,
    "TableName" : String
  }


snippet ReferenceSchema-kinesisanalytics-applicationreferencedatasource-referenceschema
  {
    "RecordColumns" :  RecordColumn, ... ,
    "RecordEncoding" : String,
    "RecordFormat" : RecordFormat
  }


snippet S3ReferenceDataSource-kinesisanalytics-applicationreferencedatasource-s3referencedatasource
  {
    "BucketARN" : String,
    "FileKey" : String,
    "ReferenceRoleARN" : String
  }


snippet ApplicationCodeConfiguration-kinesisanalyticsv2-application-applicationcodeconfiguration
  {
    "CodeContent" : CodeContent,
    "CodeContentType" : String
  }


snippet ApplicationConfiguration-kinesisanalyticsv2-application-applicationconfiguration
  {
    "ApplicationCodeConfiguration" : ApplicationCodeConfiguration,
    "ApplicationSnapshotConfiguration" : ApplicationSnapshotConfiguration,
    "EnvironmentProperties" : EnvironmentProperties,
    "FlinkApplicationConfiguration" : FlinkApplicationConfiguration,
    "SqlApplicationConfiguration" : SqlApplicationConfiguration
  }


snippet ApplicationSnapshotConfiguration-kinesisanalyticsv2-application-applicationsnapshotconfiguration
  {
    "SnapshotsEnabled" : Boolean
  }


snippet CheckpointConfiguration-kinesisanalyticsv2-application-checkpointconfiguration
  {
    "CheckpointInterval" : Integer,
    "CheckpointingEnabled" : Boolean,
    "ConfigurationType" : String,
    "MinPauseBetweenCheckpoints" : Integer
  }


snippet CodeContent-kinesisanalyticsv2-application-codecontent
  {
    "S3ContentLocation" : S3ContentLocation,
    "TextContent" : String,
    "ZipFileContent" : String
  }


snippet CSVMappingParameters-kinesisanalyticsv2-application-csvmappingparameters
  {
    "RecordColumnDelimiter" : String,
    "RecordRowDelimiter" : String
  }


snippet EnvironmentProperties-kinesisanalyticsv2-application-environmentproperties
  {
    "PropertyGroups" :  PropertyGroup, ... 
  }


snippet FlinkApplicationConfiguration-kinesisanalyticsv2-application-flinkapplicationconfiguration
  {
    "CheckpointConfiguration" : CheckpointConfiguration,
    "MonitoringConfiguration" : MonitoringConfiguration,
    "ParallelismConfiguration" : ParallelismConfiguration
  }


snippet Input-kinesisanalyticsv2-application-input
  {
    "InputParallelism" : InputParallelism,
    "InputProcessingConfiguration" : InputProcessingConfiguration,
    "InputSchema" : InputSchema,
    "KinesisFirehoseInput" : KinesisFirehoseInput,
    "KinesisStreamsInput" : KinesisStreamsInput,
    "NamePrefix" : String
  }


snippet InputLambdaProcessor-kinesisanalyticsv2-application-inputlambdaprocessor
  {
    "ResourceARN" : String
  }


snippet InputParallelism-kinesisanalyticsv2-application-inputparallelism
  {
    "Count" : Integer
  }


snippet InputProcessingConfiguration-kinesisanalyticsv2-application-inputprocessingconfiguration
  {
    "InputLambdaProcessor" : InputLambdaProcessor
  }


snippet InputSchema-kinesisanalyticsv2-application-inputschema
  {
    "RecordColumns" :  RecordColumn, ... ,
    "RecordEncoding" : String,
    "RecordFormat" : RecordFormat
  }


snippet JSONMappingParameters-kinesisanalyticsv2-application-jsonmappingparameters
  {
    "RecordRowPath" : String
  }


snippet KinesisFirehoseInput-kinesisanalyticsv2-application-kinesisfirehoseinput
  {
    "ResourceARN" : String
  }


snippet KinesisStreamsInput-kinesisanalyticsv2-application-kinesisstreamsinput
  {
    "ResourceARN" : String
  }


snippet MappingParameters-kinesisanalyticsv2-application-mappingparameters
  {
    "CSVMappingParameters" : CSVMappingParameters,
    "JSONMappingParameters" : JSONMappingParameters
  }


snippet MonitoringConfiguration-kinesisanalyticsv2-application-monitoringconfiguration
  {
    "ConfigurationType" : String,
    "LogLevel" : String,
    "MetricsLevel" : String
  }


snippet ParallelismConfiguration-kinesisanalyticsv2-application-parallelismconfiguration
  {
    "AutoScalingEnabled" : Boolean,
    "ConfigurationType" : String,
    "Parallelism" : Integer,
    "ParallelismPerKPU" : Integer
  }


snippet PropertyGroup-kinesisanalyticsv2-application-propertygroup
  {
    "PropertyGroupId" : String,
    "PropertyMap" : Json
  }


snippet RecordColumn-kinesisanalyticsv2-application-recordcolumn
  {
    "Mapping" : String,
    "Name" : String,
    "SqlType" : String
  }


snippet RecordFormat-kinesisanalyticsv2-application-recordformat
  {
    "MappingParameters" : MappingParameters,
    "RecordFormatType" : String
  }


snippet S3ContentLocation-kinesisanalyticsv2-application-s3contentlocation
  {
    "BucketARN" : String,
    "FileKey" : String,
    "ObjectVersion" : String
  }


snippet SqlApplicationConfiguration-kinesisanalyticsv2-application-sqlapplicationconfiguration
  {
    "Inputs" :  Input, ... 
  }


snippet CloudWatchLoggingOption-kinesisanalyticsv2-applicationcloudwatchloggingoption-cloudwatchloggingoption
  {
    "LogStreamARN" : String
  }


snippet DestinationSchema-kinesisanalyticsv2-applicationoutput-destinationschema
  {
    "RecordFormatType" : String
  }


snippet KinesisFirehoseOutput-kinesisanalyticsv2-applicationoutput-kinesisfirehoseoutput
  {
    "ResourceARN" : String
  }


snippet KinesisStreamsOutput-kinesisanalyticsv2-applicationoutput-kinesisstreamsoutput
  {
    "ResourceARN" : String
  }


snippet LambdaOutput-kinesisanalyticsv2-applicationoutput-lambdaoutput
  {
    "ResourceARN" : String
  }


snippet Output-kinesisanalyticsv2-applicationoutput-output
  {
    "DestinationSchema" : DestinationSchema,
    "KinesisFirehoseOutput" : KinesisFirehoseOutput,
    "KinesisStreamsOutput" : KinesisStreamsOutput,
    "LambdaOutput" : LambdaOutput,
    "Name" : String
  }


snippet CSVMappingParameters-kinesisanalyticsv2-applicationreferencedatasource-csvmappingparameters
  {
    "RecordColumnDelimiter" : String,
    "RecordRowDelimiter" : String
  }


snippet JSONMappingParameters-kinesisanalyticsv2-applicationreferencedatasource-jsonmappingparameters
  {
    "RecordRowPath" : String
  }


snippet MappingParameters-kinesisanalyticsv2-applicationreferencedatasource-mappingparameters
  {
    "CSVMappingParameters" : CSVMappingParameters,
    "JSONMappingParameters" : JSONMappingParameters
  }


snippet RecordColumn-kinesisanalyticsv2-applicationreferencedatasource-recordcolumn
  {
    "Mapping" : String,
    "Name" : String,
    "SqlType" : String
  }


snippet RecordFormat-kinesisanalyticsv2-applicationreferencedatasource-recordformat
  {
    "MappingParameters" : MappingParameters,
    "RecordFormatType" : String
  }


snippet ReferenceDataSource-kinesisanalyticsv2-applicationreferencedatasource-referencedatasource
  {
    "ReferenceSchema" : ReferenceSchema,
    "S3ReferenceDataSource" : S3ReferenceDataSource,
    "TableName" : String
  }


snippet ReferenceSchema-kinesisanalyticsv2-applicationreferencedatasource-referenceschema
  {
    "RecordColumns" :  RecordColumn, ... ,
    "RecordEncoding" : String,
    "RecordFormat" : RecordFormat
  }


snippet S3ReferenceDataSource-kinesisanalyticsv2-applicationreferencedatasource-s3referencedatasource
  {
    "BucketARN" : String,
    "FileKey" : String
  }


snippet BufferingHints-kinesisfirehose-deliverystream-bufferinghints
  {
    "IntervalInSeconds" : Integer,
    "SizeInMBs" : Integer
  }


snippet CloudWatchLoggingOptions-kinesisfirehose-deliverystream-cloudwatchloggingoptions
  {
    "Enabled" : Boolean,
    "LogGroupName" : String,
    "LogStreamName" : String
  }


snippet CopyCommand-kinesisfirehose-deliverystream-copycommand
  {
    "CopyOptions" : String,
    "DataTableColumns" : String,
    "DataTableName" : String
  }


snippet DataFormatConversionConfiguration-kinesisfirehose-deliverystream-dataformatconversionconfiguration
  {
    "Enabled" : Boolean,
    "InputFormatConfiguration" : InputFormatConfiguration,
    "OutputFormatConfiguration" : OutputFormatConfiguration,
    "SchemaConfiguration" : SchemaConfiguration
  }


snippet Deserializer-kinesisfirehose-deliverystream-deserializer
  {
    "HiveJsonSerDe" : HiveJsonSerDe,
    "OpenXJsonSerDe" : OpenXJsonSerDe
  }


snippet ElasticsearchBufferingHints-kinesisfirehose-deliverystream-elasticsearchbufferinghints
  {
    "IntervalInSeconds" : Integer,
    "SizeInMBs" : Integer
  }


snippet ElasticsearchDestinationConfiguration-kinesisfirehose-deliverystream-elasticsearchdestinationconfiguration
  {
    "BufferingHints" : ElasticsearchBufferingHints,
    "CloudWatchLoggingOptions" : CloudWatchLoggingOptions,
    "DomainARN" : String,
    "IndexName" : String,
    "IndexRotationPeriod" : String,
    "ProcessingConfiguration" : ProcessingConfiguration,
    "RetryOptions" : ElasticsearchRetryOptions,
    "RoleARN" : String,
    "S3BackupMode" : String,
    "S3Configuration" : S3DestinationConfiguration,
    "TypeName" : String
  }


snippet ElasticsearchRetryOptions-kinesisfirehose-deliverystream-elasticsearchretryoptions
  {
    "DurationInSeconds" : Integer
  }


snippet EncryptionConfiguration-kinesisfirehose-deliverystream-encryptionconfiguration
  {
    "KMSEncryptionConfig" : KMSEncryptionConfig,
    "NoEncryptionConfig" : String
  }


snippet ExtendedS3DestinationConfiguration-kinesisfirehose-deliverystream-extendeds3destinationconfiguration
  {
    "BucketARN" : String,
    "BufferingHints" : BufferingHints,
    "CloudWatchLoggingOptions" : CloudWatchLoggingOptions,
    "CompressionFormat" : String,
    "DataFormatConversionConfiguration" : DataFormatConversionConfiguration,
    "EncryptionConfiguration" : EncryptionConfiguration,
    "ErrorOutputPrefix" : String,
    "Prefix" : String,
    "ProcessingConfiguration" : ProcessingConfiguration,
    "RoleARN" : String,
    "S3BackupConfiguration" : S3DestinationConfiguration,
    "S3BackupMode" : String
  }


snippet HiveJsonSerDe-kinesisfirehose-deliverystream-hivejsonserde
  {
    "TimestampFormats" :  String, ... 
  }


snippet InputFormatConfiguration-kinesisfirehose-deliverystream-inputformatconfiguration
  {
    "Deserializer" : Deserializer
  }


snippet KinesisStreamSourceConfiguration-kinesisfirehose-deliverystream-kinesisstreamsourceconfiguration
  {
    "KinesisStreamARN" : String,
    "RoleARN" : String
  }


snippet KMSEncryptionConfig-kinesisfirehose-deliverystream-kmsencryptionconfig
  {
    "AWSKMSKeyARN" : String
  }


snippet OpenXJsonSerDe-kinesisfirehose-deliverystream-openxjsonserde
  {
    "CaseInsensitive" : Boolean,
    "ColumnToJsonKeyMappings" : {Key : Value, ...},
    "ConvertDotsInJsonKeysToUnderscores" : Boolean
  }


snippet OrcSerDe-kinesisfirehose-deliverystream-orcserde
  {
    "BlockSizeBytes" : Integer,
    "BloomFilterColumns" :  String, ... ,
    "BloomFilterFalsePositiveProbability" : Double,
    "Compression" : String,
    "DictionaryKeyThreshold" : Double,
    "EnablePadding" : Boolean,
    "FormatVersion" : String,
    "PaddingTolerance" : Double,
    "RowIndexStride" : Integer,
    "StripeSizeBytes" : Integer
  }


snippet OutputFormatConfiguration-kinesisfirehose-deliverystream-outputformatconfiguration
  {
    "Serializer" : Serializer
  }


snippet ParquetSerDe-kinesisfirehose-deliverystream-parquetserde
  {
    "BlockSizeBytes" : Integer,
    "Compression" : String,
    "EnableDictionaryCompression" : Boolean,
    "MaxPaddingBytes" : Integer,
    "PageSizeBytes" : Integer,
    "WriterVersion" : String
  }


snippet ProcessingConfiguration-kinesisfirehose-deliverystream-processingconfiguration
  {
    "Enabled" : Boolean,
    "Processors" :  Processor, ... 
  }


snippet Processor-kinesisfirehose-deliverystream-processor
  {
    "Parameters" :  ProcessorParameter, ... ,
    "Type" : String
  }


snippet ProcessorParameter-kinesisfirehose-deliverystream-processorparameter
  {
    "ParameterName" : String,
    "ParameterValue" : String
  }


snippet RedshiftDestinationConfiguration-kinesisfirehose-deliverystream-redshiftdestinationconfiguration
  {
    "CloudWatchLoggingOptions" : CloudWatchLoggingOptions,
    "ClusterJDBCURL" : String,
    "CopyCommand" : CopyCommand,
    "Password" : String,
    "ProcessingConfiguration" : ProcessingConfiguration,
    "RoleARN" : String,
    "S3Configuration" : S3DestinationConfiguration,
    "Username" : String
  }


snippet S3DestinationConfiguration-kinesisfirehose-deliverystream-s3destinationconfiguration
  {
    "BucketARN" : String,
    "BufferingHints" : BufferingHints,
    "CloudWatchLoggingOptions" : CloudWatchLoggingOptions,
    "CompressionFormat" : String,
    "EncryptionConfiguration" : EncryptionConfiguration,
    "ErrorOutputPrefix" : String,
    "Prefix" : String,
    "RoleARN" : String
  }


snippet SchemaConfiguration-kinesisfirehose-deliverystream-schemaconfiguration
  {
    "CatalogId" : String,
    "DatabaseName" : String,
    "Region" : String,
    "RoleARN" : String,
    "TableName" : String,
    "VersionId" : String
  }


snippet Serializer-kinesisfirehose-deliverystream-serializer
  {
    "OrcSerDe" : OrcSerDe,
    "ParquetSerDe" : ParquetSerDe
  }


snippet SplunkDestinationConfiguration-kinesisfirehose-deliverystream-splunkdestinationconfiguration
  {
    "CloudWatchLoggingOptions" : CloudWatchLoggingOptions,
    "HECAcknowledgmentTimeoutInSeconds" : Integer,
    "HECEndpoint" : String,
    "HECEndpointType" : String,
    "HECToken" : String,
    "ProcessingConfiguration" : ProcessingConfiguration,
    "RetryOptions" : SplunkRetryOptions,
    "S3BackupMode" : String,
    "S3Configuration" : S3DestinationConfiguration
  }


snippet SplunkRetryOptions-kinesisfirehose-deliverystream-splunkretryoptions
  {
    "DurationInSeconds" : Integer
  }


snippet DataLakePrincipal-lakeformation-datalakesettings-datalakeprincipal
  {
    "DataLakePrincipalIdentifier" : String
  }


snippet DatabaseResource-lakeformation-permissions-databaseresource
  {
    "Name" : String
  }


snippet DataLakePrincipal-lakeformation-permissions-datalakeprincipal
  {
    "DataLakePrincipalIdentifier" : String
  }


snippet Resource-lakeformation-permissions-resource
  {
    "DatabaseResource" : DatabaseResource,
    "TableResource" : TableResource
  }


snippet TableResource-lakeformation-permissions-tableresource
  {
    "DatabaseName" : String,
    "Name" : String
  }


snippet AliasRoutingConfiguration-lambda-alias-aliasroutingconfiguration
  {
    "AdditionalVersionWeights" :  VersionWeight, ... 
  }


snippet VersionWeight-lambda-alias-versionweight
  {
    "FunctionVersion" : String,
    "FunctionWeight" : Double
  }


snippet Code-lambda-function-code
  {
    "S3Bucket" : String,
    "S3Key" : String,
    "S3ObjectVersion" : String,
    "ZipFile" : String
  }


snippet DeadLetterConfig-lambda-function-deadletterconfig
  {
    "TargetArn" : String
  }


snippet Environment-lambda-function-environment
  {
    "Variables" : {Key : Value, ...}
  }


snippet TracingConfig-lambda-function-tracingconfig
  {
    "Mode" : String
  }


snippet VpcConfig-lambda-function-vpcconfig
  {
    "SecurityGroupIds" :  String, ... ,
    "SubnetIds" :  String, ... 
  }


snippet Content-lambda-layerversion-content
  {
    "S3Bucket" : String,
    "S3Key" : String,
    "S3ObjectVersion" : String
  }


snippet MetricTransformation-logs-metricfilter-metrictransformation
  {
    "DefaultValue" : Double,
    "MetricName" : String,
    "MetricNamespace" : String,
    "MetricValue" : String
  }


snippet ApprovalThresholdPolicy-managedblockchain-member-approvalthresholdpolicy
  {
    "ProposalDurationInHours" : Integer,
    "ThresholdComparator" : String,
    "ThresholdPercentage" : Integer
  }


snippet MemberConfiguration-managedblockchain-member-memberconfiguration
  {
    "Description" : String,
    "MemberFrameworkConfiguration" : MemberFrameworkConfiguration,
    "Name" : String
  }


snippet MemberFabricConfiguration-managedblockchain-member-memberfabricconfiguration
  {
    "AdminPassword" : String,
    "AdminUsername" : String
  }


snippet MemberFrameworkConfiguration-managedblockchain-member-memberframeworkconfiguration
  {
    "MemberFabricConfiguration" : MemberFabricConfiguration
  }


snippet NetworkConfiguration-managedblockchain-member-networkconfiguration
  {
    "Description" : String,
    "Framework" : String,
    "FrameworkVersion" : String,
    "Name" : String,
    "NetworkFrameworkConfiguration" : NetworkFrameworkConfiguration,
    "VotingPolicy" : VotingPolicy
  }


snippet NetworkFabricConfiguration-managedblockchain-member-networkfabricconfiguration
  {
    "Edition" : String
  }


snippet NetworkFrameworkConfiguration-managedblockchain-member-networkframeworkconfiguration
  {
    "NetworkFabricConfiguration" : NetworkFabricConfiguration
  }


snippet VotingPolicy-managedblockchain-member-votingpolicy
  {
    "ApprovalThresholdPolicy" : ApprovalThresholdPolicy
  }


snippet NodeConfiguration-managedblockchain-node-nodeconfiguration
  {
    "AvailabilityZone" : String,
    "InstanceType" : String
  }


snippet AccelerationSettings-mediaconvert-jobtemplate-accelerationsettings
  {
    "Mode" : String
  }


snippet AribSourceSettings-medialive-channel-aribsourcesettings
  {
  }


snippet AudioLanguageSelection-medialive-channel-audiolanguageselection
  {
    "LanguageCode" : String,
    "LanguageSelectionPolicy" : String
  }


snippet AudioPidSelection-medialive-channel-audiopidselection
  {
    "Pid" : Integer
  }


snippet AudioSelector-medialive-channel-audioselector
  {
    "Name" : String,
    "SelectorSettings" : AudioSelectorSettings
  }


snippet AudioSelectorSettings-medialive-channel-audioselectorsettings
  {
    "AudioLanguageSelection" : AudioLanguageSelection,
    "AudioPidSelection" : AudioPidSelection
  }


snippet CaptionSelector-medialive-channel-captionselector
  {
    "LanguageCode" : String,
    "Name" : String,
    "SelectorSettings" : CaptionSelectorSettings
  }


snippet CaptionSelectorSettings-medialive-channel-captionselectorsettings
  {
    "AribSourceSettings" : AribSourceSettings,
    "DvbSubSourceSettings" : DvbSubSourceSettings,
    "EmbeddedSourceSettings" : EmbeddedSourceSettings,
    "Scte20SourceSettings" : Scte20SourceSettings,
    "Scte27SourceSettings" : Scte27SourceSettings,
    "TeletextSourceSettings" : TeletextSourceSettings
  }


snippet DvbSubSourceSettings-medialive-channel-dvbsubsourcesettings
  {
    "Pid" : Integer
  }


snippet EmbeddedSourceSettings-medialive-channel-embeddedsourcesettings
  {
    "Convert608To708" : String,
    "Scte20Detection" : String,
    "Source608ChannelNumber" : Integer,
    "Source608TrackNumber" : Integer
  }


snippet HlsInputSettings-medialive-channel-hlsinputsettings
  {
    "Bandwidth" : Integer,
    "BufferSegments" : Integer,
    "Retries" : Integer,
    "RetryInterval" : Integer
  }


snippet InputAttachment-medialive-channel-inputattachment
  {
    "InputAttachmentName" : String,
    "InputId" : String,
    "InputSettings" : InputSettings
  }


snippet InputSettings-medialive-channel-inputsettings
  {
    "AudioSelectors" :  AudioSelector, ... ,
    "CaptionSelectors" :  CaptionSelector, ... ,
    "DeblockFilter" : String,
    "DenoiseFilter" : String,
    "FilterStrength" : Integer,
    "InputFilter" : String,
    "NetworkInputSettings" : NetworkInputSettings,
    "SourceEndBehavior" : String,
    "VideoSelector" : VideoSelector
  }


snippet InputSpecification-medialive-channel-inputspecification
  {
    "Codec" : String,
    "MaximumBitrate" : String,
    "Resolution" : String
  }


snippet MediaPackageOutputDestinationSettings-medialive-channel-mediapackageoutputdestinationsettings
  {
    "ChannelId" : String
  }


snippet NetworkInputSettings-medialive-channel-networkinputsettings
  {
    "HlsInputSettings" : HlsInputSettings,
    "ServerValidation" : String
  }


snippet OutputDestination-medialive-channel-outputdestination
  {
    "Id" : String,
    "MediaPackageSettings" :  MediaPackageOutputDestinationSettings, ... ,
    "Settings" :  OutputDestinationSettings, ... 
  }


snippet OutputDestinationSettings-medialive-channel-outputdestinationsettings
  {
    "PasswordParam" : String,
    "StreamName" : String,
    "Url" : String,
    "Username" : String
  }


snippet Scte20SourceSettings-medialive-channel-scte20sourcesettings
  {
    "Convert608To708" : String,
    "Source608ChannelNumber" : Integer
  }


snippet Scte27SourceSettings-medialive-channel-scte27sourcesettings
  {
    "Pid" : Integer
  }


snippet TeletextSourceSettings-medialive-channel-teletextsourcesettings
  {
    "PageNumber" : String
  }


snippet VideoSelector-medialive-channel-videoselector
  {
    "ColorSpace" : String,
    "ColorSpaceUsage" : String,
    "SelectorSettings" : VideoSelectorSettings
  }


snippet VideoSelectorPid-medialive-channel-videoselectorpid
  {
    "Pid" : Integer
  }


snippet VideoSelectorProgramId-medialive-channel-videoselectorprogramid
  {
    "ProgramId" : Integer
  }


snippet VideoSelectorSettings-medialive-channel-videoselectorsettings
  {
    "VideoSelectorPid" : VideoSelectorPid,
    "VideoSelectorProgramId" : VideoSelectorProgramId
  }


snippet InputDestinationRequest-medialive-input-inputdestinationrequest
  {
    "StreamName" : String
  }


snippet InputSourceRequest-medialive-input-inputsourcerequest
  {
    "PasswordParam" : String,
    "Url" : String,
    "Username" : String
  }


snippet InputVpcRequest-medialive-input-inputvpcrequest
  {
    "SecurityGroupIds" :  String, ... ,
    "SubnetIds" :  String, ... 
  }


snippet MediaConnectFlowRequest-medialive-input-mediaconnectflowrequest
  {
    "FlowArn" : String
  }


snippet InputWhitelistRuleCidr-medialive-inputsecuritygroup-inputwhitelistrulecidr
  {
    "Cidr" : String
  }


snippet CorsRule-mediastore-container-corsrule
  {
    "AllowedHeaders" :  String, ... ,
    "AllowedMethods" :  String, ... ,
    "AllowedOrigins" :  String, ... ,
    "ExposeHeaders" :  String, ... ,
    "MaxAgeSeconds" : Integer
  }


snippet BrokerNodeGroupInfo-msk-cluster-brokernodegroupinfo
  {
    "BrokerAZDistribution" : String,
    "ClientSubnets" :  String, ... ,
    "InstanceType" : String,
    "SecurityGroups" :  String, ... ,
    "StorageInfo" : StorageInfo
  }


snippet ClientAuthentication-msk-cluster-clientauthentication
  {
    "Tls" : Tls
  }


snippet ConfigurationInfo-msk-cluster-configurationinfo
  {
    "Arn" : String,
    "Revision" : Integer
  }


snippet EBSStorageInfo-msk-cluster-ebsstorageinfo
  {
    "VolumeSize" : Integer
  }


snippet EncryptionAtRest-msk-cluster-encryptionatrest
  {
    "DataVolumeKMSKeyId" : String
  }


snippet EncryptionInfo-msk-cluster-encryptioninfo
  {
    "EncryptionAtRest" : EncryptionAtRest,
    "EncryptionInTransit" : EncryptionInTransit
  }


snippet EncryptionInTransit-msk-cluster-encryptionintransit
  {
    "ClientBroker" : String,
    "InCluster" : Boolean
  }


snippet StorageInfo-msk-cluster-storageinfo
  {
    "EBSStorageInfo" : EBSStorageInfo
  }


snippet Tls-msk-cluster-tls
  {
    "CertificateAuthorityArnList" :  String, ... 
  }


snippet Type-name
  "myDynamoDBTable" : {
     "Type" : "AWS::DynamoDB::Table",
     "Properties" : {
        "KeySchema" : {
           "HashKeyElement": {
              "AttributeName" : "AttributeName1",
              "AttributeType" : "S"
           },
           "RangeKeyElement" : {
              "AttributeName" : "AttributeName2",
              "AttributeType" : "N"
           }
        },
        "ProvisionedThroughput" : {
           "ReadCapacityUnits" : "5",
           "WriteCapacityUnits" : "10"
        },
        "TableName" : "SampleTable"
     }
  }


snippet DataSource-opsworks-app-datasource
  {
    "Arn" : String,
    "DatabaseName" : String,
    "Type" : String
  }


snippet EnvironmentVariable-opsworks-app-environment
  {
    "Key" : String,
    "Secure" : Boolean,
    "Value" : String
  }


snippet SslConfiguration-opsworks-app-sslconfiguration
  {
    "Certificate" : String,
    "Chain" : String,
    "PrivateKey" : String
  }


snippet BlockDeviceMapping-opsworks-instance-blockdevicemapping
  {
    "DeviceName" : String,
    "Ebs" : EbsBlockDevice,
    "NoDevice" : String,
    "VirtualName" : String
  }


snippet EbsBlockDevice-opsworks-instance-ebsblockdevice
  {
    "DeleteOnTermination" : Boolean,
    "Iops" : Integer,
    "SnapshotId" : String,
    "VolumeSize" : Integer,
    "VolumeType" : String
  }


snippet TimeBasedAutoScaling-opsworks-instance-timebasedautoscaling
  {
    "Friday" : {Key : Value, ...},
    "Monday" : {Key : Value, ...},
    "Saturday" : {Key : Value, ...},
    "Sunday" : {Key : Value, ...},
    "Thursday" : {Key : Value, ...},
    "Tuesday" : {Key : Value, ...},
    "Wednesday" : {Key : Value, ...}
  }


snippet ShutdownEventConfiguration-opsworks-layer-lifecycleeventconfiguration-shutdowneventconfiguration
  {
    "DelayUntilElbConnectionsDrained" : Boolean,
    "ExecutionTimeout" : Integer
  }


snippet LifecycleEventConfiguration-opsworks-layer-lifecycleeventconfiguration
  {
    "ShutdownEventConfiguration" : ShutdownEventConfiguration
  }


snippet AutoScalingThresholds-opsworks-layer-loadbasedautoscaling-autoscalingthresholds
  {
    "CpuThreshold" : Double,
    "IgnoreMetricsTime" : Integer,
    "InstanceCount" : Integer,
    "LoadThreshold" : Double,
    "MemoryThreshold" : Double,
    "ThresholdsWaitTime" : Integer
  }


snippet LoadBasedAutoScaling-opsworks-layer-loadbasedautoscaling
  {
    "DownScaling" : AutoScalingThresholds,
    "Enable" : Boolean,
    "UpScaling" : AutoScalingThresholds
  }


snippet Recipes-opsworks-layer-recipes
  {
    "Configure" :  String, ... ,
    "Deploy" :  String, ... ,
    "Setup" :  String, ... ,
    "Shutdown" :  String, ... ,
    "Undeploy" :  String, ... 
  }


snippet VolumeConfiguration-opsworks-layer-volumeconfiguration
  {
    "Encrypted" : Boolean,
    "Iops" : Integer,
    "MountPoint" : String,
    "NumberOfDisks" : Integer,
    "RaidLevel" : Integer,
    "Size" : Integer,
    "VolumeType" : String
  }


snippet ChefConfiguration-opsworks-stack-chefconfiguration
  {
    "BerkshelfVersion" : String,
    "ManageBerkshelf" : Boolean
  }


snippet ElasticIp-opsworks-stack-elasticip
  {
    "Ip" : String,
    "Name" : String
  }


snippet RdsDbInstance-opsworks-stack-rdsdbinstance
  {
    "DbPassword" : String,
    "DbUser" : String,
    "RdsDbInstanceArn" : String
  }


snippet Source-opsworks-stack-source-1
  {
    "Password" : String,
    "Revision" : String,
    "SshKey" : String,
    "Type" : String,
    "Url" : String,
    "Username" : String
  }


snippet Source-opsworks-stack-source
  {
    "Password" : String,
    "Revision" : String,
    "SshKey" : String,
    "Type" : String,
    "Url" : String,
    "Username" : String
  }


snippet StackConfigurationManager-opsworks-stack-stackconfigmanager
  {
    "Name" : String,
    "Version" : String
  }


snippet EngineAttribute-opsworkscm-server-engineattribute
  {
    "Name" : String,
    "Value" : String
  }


snippet CampaignHook-pinpoint-applicationsettings-campaignhook
  {
    "LambdaFunctionName" : String,
    "Mode" : String,
    "WebUrl" : String
  }


snippet Limits-pinpoint-applicationsettings-limits
  {
    "Daily" : Integer,
    "MaximumDuration" : Integer,
    "MessagesPerSecond" : Integer,
    "Total" : Integer
  }


snippet QuietTime-pinpoint-applicationsettings-quiettime
  {
    "End" : String,
    "Start" : String
  }


snippet AttributeDimension-pinpoint-campaign-attributedimension
  {
    "AttributeType" : String,
    "Values" :  String, ... 
  }


snippet CampaignEmailMessage-pinpoint-campaign-campaignemailmessage
  {
    "Body" : String,
    "FromAddress" : String,
    "HtmlBody" : String,
    "Title" : String
  }


snippet CampaignEventFilter-pinpoint-campaign-campaigneventfilter
  {
    "Dimensions" : EventDimensions,
    "FilterType" : String
  }


snippet CampaignHook-pinpoint-campaign-campaignhook
  {
    "LambdaFunctionName" : String,
    "Mode" : String,
    "WebUrl" : String
  }


snippet CampaignSmsMessage-pinpoint-campaign-campaignsmsmessage
  {
    "Body" : String,
    "MessageType" : String,
    "SenderId" : String
  }


snippet EventDimensions-pinpoint-campaign-eventdimensions
  {
    "Attributes" : Json,
    "EventType" : SetDimension,
    "Metrics" : Json
  }


snippet Limits-pinpoint-campaign-limits
  {
    "Daily" : Integer,
    "MaximumDuration" : Integer,
    "MessagesPerSecond" : Integer,
    "Total" : Integer
  }


snippet Message-pinpoint-campaign-message
  {
    "Action" : String,
    "Body" : String,
    "ImageIconUrl" : String,
    "ImageSmallIconUrl" : String,
    "ImageUrl" : String,
    "JsonBody" : String,
    "MediaUrl" : String,
    "RawContent" : String,
    "SilentPush" : Boolean,
    "TimeToLive" : Integer,
    "Title" : String,
    "Url" : String
  }


snippet MessageConfiguration-pinpoint-campaign-messageconfiguration
  {
    "ADMMessage" : Message,
    "APNSMessage" : Message,
    "BaiduMessage" : Message,
    "DefaultMessage" : Message,
    "EmailMessage" : CampaignEmailMessage,
    "GCMMessage" : Message,
    "SMSMessage" : CampaignSmsMessage
  }


snippet MetricDimension-pinpoint-campaign-metricdimension
  {
    "ComparisonOperator" : String,
    "Value" : Double
  }


snippet QuietTime-pinpoint-campaign-schedule-quiettime
  {
    "End" : String,
    "Start" : String
  }


snippet Schedule-pinpoint-campaign-schedule
  {
    "EndTime" : String,
    "EventFilter" : CampaignEventFilter,
    "Frequency" : String,
    "IsLocalTime" : Boolean,
    "QuietTime" : QuietTime,
    "StartTime" : String,
    "TimeZone" : String
  }


snippet SetDimension-pinpoint-campaign-setdimension
  {
    "DimensionType" : String,
    "Values" :  String, ... 
  }


snippet WriteTreatmentResource-pinpoint-campaign-writetreatmentresource
  {
    "MessageConfiguration" : MessageConfiguration,
    "Schedule" : Schedule,
    "SizePercent" : Integer,
    "TreatmentDescription" : String,
    "TreatmentName" : String
  }


snippet AndroidPushNotificationTemplate-pinpoint-pushtemplate-androidpushnotificationtemplate
  {
    "Action" : String,
    "Body" : String,
    "ImageIconUrl" : String,
    "ImageUrl" : String,
    "SmallImageIconUrl" : String,
    "Sound" : String,
    "Title" : String,
    "Url" : String
  }


snippet APNSPushNotificationTemplate-pinpoint-pushtemplate-apnspushnotificationtemplate
  {
    "Action" : String,
    "Body" : String,
    "MediaUrl" : String,
    "Sound" : String,
    "Title" : String,
    "Url" : String
  }


snippet DefaultPushNotificationTemplate-pinpoint-pushtemplate-defaultpushnotificationtemplate
  {
    "Action" : String,
    "Body" : String,
    "Sound" : String,
    "Title" : String,
    "Url" : String
  }


snippet AttributeDimension-pinpoint-segment-attributedimension
  {
    "AttributeType" : String,
    "Values" :  String, ... 
  }


snippet Recency-pinpoint-segment-segmentdimensions-behavior-recency
  {
    "Duration" : String,
    "RecencyType" : String
  }


snippet Behavior-pinpoint-segment-segmentdimensions-behavior
  {
    "Recency" : Recency
  }


snippet Demographic-pinpoint-segment-segmentdimensions-demographic
  {
    "AppVersion" : SetDimension,
    "Channel" : SetDimension,
    "DeviceType" : SetDimension,
    "Make" : SetDimension,
    "Model" : SetDimension,
    "Platform" : SetDimension
  }


snippet Coordinates-pinpoint-segment-segmentdimensions-location-gpspoint-coordinates
  {
    "Latitude" : Double,
    "Longitude" : Double
  }


snippet GPSPoint-pinpoint-segment-segmentdimensions-location-gpspoint
  {
    "Coordinates" : Coordinates,
    "RangeInKilometers" : Double
  }


snippet Location-pinpoint-segment-segmentdimensions-location
  {
    "Country" : SetDimension,
    "GPSPoint" : GPSPoint
  }


snippet SegmentDimensions-pinpoint-segment-segmentdimensions
  {
    "Attributes" : Json,
    "Behavior" : Behavior,
    "Demographic" : Demographic,
    "Location" : Location,
    "Metrics" : Json,
    "UserAttributes" : Json
  }


snippet SourceSegments-pinpoint-segment-segmentgroups-groups-sourcesegments
  {
    "Id" : String,
    "Version" : Integer
  }


snippet Groups-pinpoint-segment-segmentgroups-groups
  {
    "Dimensions" :  SegmentDimensions, ... ,
    "SourceSegments" :  SourceSegments, ... ,
    "SourceType" : String,
    "Type" : String
  }


snippet SegmentGroups-pinpoint-segment-segmentgroups
  {
    "Groups" :  Groups, ... ,
    "Include" : String
  }


snippet SetDimension-pinpoint-segment-setdimension
  {
    "DimensionType" : String,
    "Values" :  String, ... 
  }


snippet DeliveryOptions-pinpointemail-configurationset-deliveryoptions
  {
    "SendingPoolName" : String
  }


snippet ReputationOptions-pinpointemail-configurationset-reputationoptions
  {
    "ReputationMetricsEnabled" : Boolean
  }


snippet SendingOptions-pinpointemail-configurationset-sendingoptions
  {
    "SendingEnabled" : Boolean
  }


snippet Tags-pinpointemail-configurationset-tags
  {
    "Key" : String,
    "Value" : String
  }


snippet TrackingOptions-pinpointemail-configurationset-trackingoptions
  {
    "CustomRedirectDomain" : String
  }


snippet CloudWatchDestination-pinpointemail-configurationseteventdestination-cloudwatchdestination
  {
    "DimensionConfigurations" :  DimensionConfiguration, ... 
  }


snippet DimensionConfiguration-pinpointemail-configurationseteventdestination-dimensionconfiguration
  {
    "DefaultDimensionValue" : String,
    "DimensionName" : String,
    "DimensionValueSource" : String
  }


snippet EventDestination-pinpointemail-configurationseteventdestination-eventdestination
  {
    "CloudWatchDestination" : CloudWatchDestination,
    "Enabled" : Boolean,
    "KinesisFirehoseDestination" : KinesisFirehoseDestination,
    "MatchingEventTypes" :  String, ... ,
    "PinpointDestination" : PinpointDestination,
    "SnsDestination" : SnsDestination
  }


snippet KinesisFirehoseDestination-pinpointemail-configurationseteventdestination-kinesisfirehosedestination
  {
    "DeliveryStreamArn" : String,
    "IamRoleArn" : String
  }


snippet PinpointDestination-pinpointemail-configurationseteventdestination-pinpointdestination
  {
    "ApplicationArn" : String
  }


snippet SnsDestination-pinpointemail-configurationseteventdestination-snsdestination
  {
    "TopicArn" : String
  }


snippet Tags-pinpointemail-dedicatedippool-tags
  {
    "Key" : String,
    "Value" : String
  }


snippet MailFromAttributes-pinpointemail-identity-mailfromattributes
  {
    "BehaviorOnMxFailure" : String,
    "MailFromDomain" : String
  }


snippet Tags-pinpointemail-identity-tags
  {
    "Key" : String,
    "Value" : String
  }


snippet AWS::RDS::DBInstance-rds-database-instance
  {
    "Type" : "AWS::RDS::DBInstance",
    "Properties" : {
        "AllocatedStorage" : String,
        "AllowMajorVersionUpgrade" : Boolean,
        "AssociatedRoles" :  DBInstanceRole, ... ,
        "AutoMinorVersionUpgrade" : Boolean,
        "AvailabilityZone" : String,
        "BackupRetentionPeriod" : Integer,
        "CharacterSetName" : String,
        "CopyTagsToSnapshot" : Boolean,
        "DBClusterIdentifier" : String,
        "DBInstanceClass" : String,
        "DBInstanceIdentifier" : String,
        "DBName" : String,
        "DBParameterGroupName" : String,
        "DBSecurityGroups" :  String, ... ,
        "DBSnapshotIdentifier" : String,
        "DBSubnetGroupName" : String,
        "DeleteAutomatedBackups" : Boolean,
        "DeletionProtection" : Boolean,
        "Domain" : String,
        "DomainIAMRoleName" : String,
        "EnableCloudwatchLogsExports" :  String, ... ,
        "EnableIAMDatabaseAuthentication" : Boolean,
        "EnablePerformanceInsights" : Boolean,
        "Engine" : String,
        "EngineVersion" : String,
        "Iops" : Integer,
        "KmsKeyId" : String,
        "LicenseModel" : String,
        "MasterUsername" : String,
        "MasterUserPassword" : String,
        "MonitoringInterval" : Integer,
        "MonitoringRoleArn" : String,
        "MultiAZ" : Boolean,
        "OptionGroupName" : String,
        "PerformanceInsightsKMSKeyId" : String,
        "PerformanceInsightsRetentionPeriod" : Integer,
        "Port" : String,
        "PreferredBackupWindow" : String,
        "PreferredMaintenanceWindow" : String,
        "ProcessorFeatures" :  ProcessorFeature, ... ,
        "PromotionTier" : Integer,
        "PubliclyAccessible" : Boolean,
        "SourceDBInstanceIdentifier" : String,
        "SourceRegion" : String,
        "StorageEncrypted" : Boolean,
        "StorageType" : String,
        "Tags" :  Tag, ... ,
        "Timezone" : String,
        "UseDefaultProcessorFeatures" : Boolean,
        "VPCSecurityGroups" :  String, ... 
      }
  }


snippet DBClusterRole-rds-dbcluster-dbclusterrole
  {
    "FeatureName" : String,
    "RoleArn" : String,
    "Status" : String
  }


snippet ScalingConfiguration-rds-dbcluster-scalingconfiguration
  {
    "AutoPause" : Boolean,
    "MaxCapacity" : Integer,
    "MinCapacity" : Integer,
    "SecondsUntilAutoPause" : Integer
  }


snippet DBInstanceRole-rds-dbinstance-dbinstancerole
  {
    "FeatureName" : String,
    "RoleArn" : String,
    "Status" : String
  }


snippet ProcessorFeature-rds-dbinstance-processorfeature
  {
    "Name" : String,
    "Value" : String
  }


snippet AWS::RDS::DBParameterGroup-rds-dbparametergroup
  {
    "Type" : "AWS::RDS::DBParameterGroup",
    "Properties" : {
        "Description" : String,
        "Family" : String,
        "Parameters" : {Key : Value, ...},
        "Tags" :  Tag, ... 
      }
  }


snippet OptionSetting-rds-optiongroup-optionconfigurations-optionsettings
  {
    "Name" : String,
    "Value" : String
  }


snippet OptionConfiguration-rds-optiongroup-optionconfigurations
  {
    "DBSecurityGroupMemberships" :  String, ... ,
    "OptionName" : String,
    "OptionSettings" :  OptionSetting, ... ,
    "OptionVersion" : String,
    "Port" : Integer,
    "VpcSecurityGroupMemberships" :  String, ... 
  }


snippet Ingress-rds-security-group-rule
  {
    "CIDRIP" : String,
    "EC2SecurityGroupId" : String,
    "EC2SecurityGroupName" : String,
    "EC2SecurityGroupOwnerId" : String
  }


snippet AWS::RDS::DBSecurityGroup-rds-security-group
  {
    "Type" : "AWS::RDS::DBSecurityGroup",
    "Properties" : {
        "DBSecurityGroupIngress" :  Ingress, ... ,
        "EC2VpcId" : String,
        "GroupDescription" : String,
        "Tags" :  Tag, ... 
      }
  }


snippet LoggingProperties-redshift-cluster-loggingproperties
  {
    "BucketName" : String,
    "S3KeyPrefix" : String
  }


snippet Tag-resource-tags
  {
    "Key" : String,
    "Value" : String
  }


snippet RobotSoftwareSuite-robomaker-robotapplication-robotsoftwaresuite
  {
    "Name" : String,
    "Version" : String
  }


snippet SourceConfig-robomaker-robotapplication-sourceconfig
  {
    "Architecture" : String,
    "S3Bucket" : String,
    "S3Key" : String
  }


snippet RenderingEngine-robomaker-simulationapplication-renderingengine
  {
    "Name" : String,
    "Version" : String
  }


snippet RobotSoftwareSuite-robomaker-simulationapplication-robotsoftwaresuite
  {
    "Name" : String,
    "Version" : String
  }


snippet SimulationSoftwareSuite-robomaker-simulationapplication-simulationsoftwaresuite
  {
    "Name" : String,
    "Version" : String
  }


snippet SourceConfig-robomaker-simulationapplication-sourceconfig
  {
    "Architecture" : String,
    "S3Bucket" : String,
    "S3Key" : String
  }


snippet AliasTarget-route53-aliastarget-1
  {
    "DNSName" : String,
    "EvaluateTargetHealth" : Boolean,
    "HostedZoneId" : String
  }


snippet AliasTarget-route53-aliastarget
  {
    "DNSName" : String,
    "EvaluateTargetHealth" : Boolean,
    "HostedZoneId" : String
  }


snippet AlarmIdentifier-route53-healthcheck-alarmidentifier
  {
    "Name" : String,
    "Region" : String
  }


snippet HealthCheckConfig-route53-healthcheck-healthcheckconfig
  {
    "AlarmIdentifier" : AlarmIdentifier,
    "ChildHealthChecks" :  String, ... ,
    "EnableSNI" : Boolean,
    "FailureThreshold" : Integer,
    "FullyQualifiedDomainName" : String,
    "HealthThreshold" : Integer,
    "InsufficientDataHealthStatus" : String,
    "Inverted" : Boolean,
    "IPAddress" : String,
    "MeasureLatency" : Boolean,
    "Port" : Integer,
    "Regions" :  String, ... ,
    "RequestInterval" : Integer,
    "ResourcePath" : String,
    "SearchString" : String,
    "Type" : String
  }


snippet HealthCheckTag-route53-healthcheck-healthchecktag
  {
    "Key" : String,
    "Value" : String
  }


snippet HostedZoneConfig-route53-hostedzone-hostedzoneconfig
  {
    "Comment" : String
  }


snippet HostedZoneTag-route53-hostedzone-hostedzonetags
  {
    "Key" : String,
    "Value" : String
  }


snippet QueryLoggingConfig-route53-hostedzone-queryloggingconfig
  {
    "CloudWatchLogsLogGroupArn" : String
  }


snippet RecordSet-route53-recordset-1
  {
    "AliasTarget" : AliasTarget,
    "Comment" : String,
    "Failover" : String,
    "GeoLocation" : GeoLocation,
    "HealthCheckId" : String,
    "HostedZoneId" : String,
    "HostedZoneName" : String,
    "MultiValueAnswer" : Boolean,
    "Name" : String,
    "Region" : String,
    "ResourceRecords" :  String, ... ,
    "SetIdentifier" : String,
    "TTL" : String,
    "Type" : String,
    "Weight" : Integer
  }


snippet GeoLocation-route53-recordset-geolocation-1
  {
    "ContinentCode" : String,
    "CountryCode" : String,
    "SubdivisionCode" : String
  }


snippet GeoLocation-route53-recordset-geolocation
  {
    "ContinentCode" : String,
    "CountryCode" : String,
    "SubdivisionCode" : String
  }


snippet AWS::Route53::RecordSet-route53-recordset
  {
    "Type" : "AWS::Route53::RecordSet",
    "Properties" : {
        "AliasTarget" : AliasTarget,
        "Comment" : String,
        "Failover" : String,
        "GeoLocation" : GeoLocation,
        "HealthCheckId" : String,
        "HostedZoneId" : String,
        "HostedZoneName" : String,
        "MultiValueAnswer" : Boolean,
        "Name" : String,
        "Region" : String,
        "ResourceRecords" :  String, ... ,
        "SetIdentifier" : String,
        "TTL" : String,
        "Type" : String,
        "Weight" : Integer
      }
  }


snippet IpAddressRequest-route53resolver-resolverendpoint-ipaddressrequest
  {
    "Ip" : String,
    "SubnetId" : String
  }


snippet TargetAddress-route53resolver-resolverrule-targetaddress
  {
    "Ip" : String,
    "Port" : String
  }


snippet PublicAccessBlockConfiguration-s3-accesspoint-publicaccessblockconfiguration
  {
    "BlockPublicAcls" : Boolean,
    "BlockPublicPolicy" : Boolean,
    "IgnorePublicAcls" : Boolean,
    "RestrictPublicBuckets" : Boolean
  }


snippet VpcConfiguration-s3-accesspoint-vpcconfiguration
  {
    "VpcId" : String
  }


snippet AbortIncompleteMultipartUpload-s3-bucket-abortincompletemultipartupload
  {
    "DaysAfterInitiation" : Integer
  }


snippet AccelerateConfiguration-s3-bucket-accelerateconfiguration
  {
    "AccelerationStatus" : String
  }


snippet AccessControlTranslation-s3-bucket-accesscontroltranslation
  {
    "Owner" : String
  }


snippet AnalyticsConfiguration-s3-bucket-analyticsconfiguration
  {
    "Id" : String,
    "Prefix" : String,
    "StorageClassAnalysis" : StorageClassAnalysis,
    "TagFilters" :  TagFilter, ... 
  }


snippet BucketEncryption-s3-bucket-bucketencryption
  {
    "ServerSideEncryptionConfiguration" :  ServerSideEncryptionRule, ... 
  }


snippet CorsRule-s3-bucket-cors-corsrule
  {
    "AllowedHeaders" :  String, ... ,
    "AllowedMethods" :  String, ... ,
    "AllowedOrigins" :  String, ... ,
    "ExposedHeaders" :  String, ... ,
    "Id" : String,
    "MaxAge" : Integer
  }


snippet CorsConfiguration-s3-bucket-cors
  {
    "CorsRules" :  CorsRule, ... 
  }


snippet DataExport-s3-bucket-dataexport
  {
    "Destination" : Destination,
    "OutputSchemaVersion" : String
  }


snippet DefaultRetention-s3-bucket-defaultretention
  {
    "Days" : Integer,
    "Mode" : String,
    "Years" : Integer
  }


snippet Destination-s3-bucket-destination
  {
    "BucketAccountId" : String,
    "BucketArn" : String,
    "Format" : String,
    "Prefix" : String
  }


snippet EncryptionConfiguration-s3-bucket-encryptionconfiguration
  {
    "ReplicaKmsKeyID" : String
  }


snippet InventoryConfiguration-s3-bucket-inventoryconfiguration
  {
    "Destination" : Destination,
    "Enabled" : Boolean,
    "Id" : String,
    "IncludedObjectVersions" : String,
    "OptionalFields" :  String, ... ,
    "Prefix" : String,
    "ScheduleFrequency" : String
  }


snippet NoncurrentVersionTransition-s3-bucket-lifecycleconfig-rule-noncurrentversiontransition
  {
    "StorageClass" : String,
    "TransitionInDays" : Integer
  }


snippet Transition-s3-bucket-lifecycleconfig-rule-transition
  {
    "StorageClass" : String,
    "TransitionDate" : Timestamp,
    "TransitionInDays" : Integer
  }


snippet Rule-s3-bucket-lifecycleconfig-rule
  {
    "AbortIncompleteMultipartUpload" : AbortIncompleteMultipartUpload,
    "ExpirationDate" : Timestamp,
    "ExpirationInDays" : Integer,
    "Id" : String,
    "NoncurrentVersionExpirationInDays" : Integer,
    "NoncurrentVersionTransition" : NoncurrentVersionTransition,
    "NoncurrentVersionTransitions" :  NoncurrentVersionTransition, ... ,
    "Prefix" : String,
    "Status" : String,
    "TagFilters" :  TagFilter, ... ,
    "Transition" : Transition,
    "Transitions" :  Transition, ... 
  }


snippet LifecycleConfiguration-s3-bucket-lifecycleconfig
  {
    "Rules" :  Rule, ... 
  }


snippet LoggingConfiguration-s3-bucket-loggingconfig
  {
    "DestinationBucketName" : String,
    "LogFilePrefix" : String
  }


snippet MetricsConfiguration-s3-bucket-metricsconfiguration
  {
    "Id" : String,
    "Prefix" : String,
    "TagFilters" :  TagFilter, ... 
  }


snippet LambdaConfiguration-s3-bucket-notificationconfig-lambdaconfig
  {
    "Event" : String,
    "Filter" : NotificationFilter,
    "Function" : String
  }


snippet QueueConfiguration-s3-bucket-notificationconfig-queueconfig
  {
    "Event" : String,
    "Filter" : NotificationFilter,
    "Queue" : String
  }


snippet TopicConfiguration-s3-bucket-notificationconfig-topicconfig
  {
    "Event" : String,
    "Filter" : NotificationFilter,
    "Topic" : String
  }


snippet NotificationConfiguration-s3-bucket-notificationconfig
  {
    "LambdaConfigurations" :  LambdaConfiguration, ... ,
    "QueueConfigurations" :  QueueConfiguration, ... ,
    "TopicConfigurations" :  TopicConfiguration, ... 
  }


snippet FilterRule-s3-bucket-notificationconfiguration-config-filter-s3key-rules
  {
    "Name" : String,
    "Value" : String
  }


snippet S3KeyFilter-s3-bucket-notificationconfiguration-config-filter-s3key
  {
    "Rules" :  FilterRule, ... 
  }


snippet NotificationFilter-s3-bucket-notificationconfiguration-config-filter
  {
    "S3Key" : S3KeyFilter
  }


snippet ObjectLockConfiguration-s3-bucket-objectlockconfiguration
  {
    "ObjectLockEnabled" : String,
    "Rule" : ObjectLockRule
  }


snippet ObjectLockRule-s3-bucket-objectlockrule
  {
    "DefaultRetention" : DefaultRetention
  }


snippet PublicAccessBlockConfiguration-s3-bucket-publicaccessblockconfiguration
  {
    "BlockPublicAcls" : Boolean,
    "BlockPublicPolicy" : Boolean,
    "IgnorePublicAcls" : Boolean,
    "RestrictPublicBuckets" : Boolean
  }


snippet ReplicationDestination-s3-bucket-replicationconfiguration-rules-destination
  {
    "AccessControlTranslation" : AccessControlTranslation,
    "Account" : String,
    "Bucket" : String,
    "EncryptionConfiguration" : EncryptionConfiguration,
    "StorageClass" : String
  }


snippet ReplicationRule-s3-bucket-replicationconfiguration-rules
  {
    "Destination" : ReplicationDestination,
    "Id" : String,
    "Prefix" : String,
    "SourceSelectionCriteria" : SourceSelectionCriteria,
    "Status" : String
  }


snippet ReplicationConfiguration-s3-bucket-replicationconfiguration
  {
    "Role" : String,
    "Rules" :  ReplicationRule, ... 
  }


snippet ServerSideEncryptionByDefault-s3-bucket-serversideencryptionbydefault
  {
    "KMSMasterKeyID" : String,
    "SSEAlgorithm" : String
  }


snippet ServerSideEncryptionRule-s3-bucket-serversideencryptionrule
  {
    "ServerSideEncryptionByDefault" : ServerSideEncryptionByDefault
  }


snippet SourceSelectionCriteria-s3-bucket-sourceselectioncriteria
  {
    "SseKmsEncryptedObjects" : SseKmsEncryptedObjects
  }


snippet SseKmsEncryptedObjects-s3-bucket-ssekmsencryptedobjects
  {
    "Status" : String
  }


snippet StorageClassAnalysis-s3-bucket-storageclassanalysis
  {
    "DataExport" : DataExport
  }


snippet TagFilter-s3-bucket-tagfilter
  {
    "Key" : String,
    "Value" : String
  }


snippet VersioningConfiguration-s3-bucket-versioningconfig
  {
    "Status" : String
  }


snippet AWS::S3::Bucket-s3-bucket
  {
    "Type" : "AWS::S3::Bucket",
    "Properties" : {
        "AccelerateConfiguration" : AccelerateConfiguration,
        "AccessControl" : String,
        "AnalyticsConfigurations" :  AnalyticsConfiguration, ... ,
        "BucketEncryption" : BucketEncryption,
        "BucketName" : String,
        "CorsConfiguration" : CorsConfiguration,
        "InventoryConfigurations" :  InventoryConfiguration, ... ,
        "LifecycleConfiguration" : LifecycleConfiguration,
        "LoggingConfiguration" : LoggingConfiguration,
        "MetricsConfigurations" :  MetricsConfiguration, ... ,
        "NotificationConfiguration" : NotificationConfiguration,
        "ObjectLockConfiguration" : ObjectLockConfiguration,
        "ObjectLockEnabled" : Boolean,
        "PublicAccessBlockConfiguration" : PublicAccessBlockConfiguration,
        "ReplicationConfiguration" : ReplicationConfiguration,
        "Tags" :  Tag, ... ,
        "VersioningConfiguration" : VersioningConfiguration,
        "WebsiteConfiguration" : WebsiteConfiguration
      }
  }


snippet AWS::S3::BucketPolicy-s3-policy
  {
    "Type" : "AWS::S3::BucketPolicy",
    "Properties" : {
        "Bucket" : String,
        "PolicyDocument" : Json
      }
  }


snippet RedirectAllRequestsTo-s3-websiteconfiguration-redirectallrequeststo
  {
    "HostName" : String,
    "Protocol" : String
  }


snippet RedirectRule-s3-websiteconfiguration-routingrules-redirectrule
  {
    "HostName" : String,
    "HttpRedirectCode" : String,
    "Protocol" : String,
    "ReplaceKeyPrefixWith" : String,
    "ReplaceKeyWith" : String
  }


snippet RoutingRuleCondition-s3-websiteconfiguration-routingrules-routingrulecondition
  {
    "HttpErrorCodeReturnedEquals" : String,
    "KeyPrefixEquals" : String
  }


snippet RoutingRule-s3-websiteconfiguration-routingrules
  {
    "RedirectRule" : RedirectRule,
    "RoutingRuleCondition" : RoutingRuleCondition
  }


snippet WebsiteConfiguration-s3-websiteconfiguration
  {
    "ErrorDocument" : String,
    "IndexDocument" : String,
    "RedirectAllRequestsTo" : RedirectAllRequestsTo,
    "RoutingRules" :  RoutingRule, ... 
  }


snippet GitConfig-sagemaker-coderepository-gitconfig
  {
    "Branch" : String,
    "RepositoryUrl" : String,
    "SecretArn" : String
  }


snippet ProductionVariant-sagemaker-endpointconfig-productionvariant
  {
    "AcceleratorType" : String,
    "InitialInstanceCount" : Integer,
    "InitialVariantWeight" : Double,
    "InstanceType" : String,
    "ModelName" : String,
    "VariantName" : String
  }


snippet ContainerDefinition-sagemaker-model-containerdefinition
  {
    "ContainerHostname" : String,
    "Environment" : Json,
    "Image" : String,
    "ModelDataUrl" : String
  }


snippet VpcConfig-sagemaker-model-vpcconfig
  {
    "SecurityGroupIds" :  String, ... ,
    "Subnets" :  String, ... 
  }


snippet NotebookInstanceLifecycleHook-sagemaker-notebookinstancelifecycleconfig-notebookinstancelifecyclehook
  {
    "Content" : String
  }


snippet CognitoMemberDefinition-sagemaker-workteam-cognitomemberdefinition
  {
    "CognitoClientId" : String,
    "CognitoUserGroup" : String,
    "CognitoUserPool" : String
  }


snippet MemberDefinition-sagemaker-workteam-memberdefinition
  {
    "CognitoMemberDefinition" : CognitoMemberDefinition
  }


snippet NotificationConfiguration-sagemaker-workteam-notificationconfiguration
  {
    "NotificationTopicArn" : String
  }


snippet RotationRules-secretsmanager-rotationschedule-rotationrules
  {
    "AutomaticallyAfterDays" : Integer
  }


snippet GenerateSecretString-secretsmanager-secret-generatesecretstring
  {
    "ExcludeCharacters" : String,
    "ExcludeLowercase" : Boolean,
    "ExcludeNumbers" : Boolean,
    "ExcludePunctuation" : Boolean,
    "ExcludeUppercase" : Boolean,
    "GenerateStringKey" : String,
    "IncludeSpace" : Boolean,
    "PasswordLength" : Integer,
    "RequireEachIncludedType" : Boolean,
    "SecretStringTemplate" : String
  }


snippet ProvisioningArtifactProperties-servicecatalog-cloudformationproduct-provisioningartifactproperties
  {
    "Description" : String,
    "DisableTemplateValidation" : Boolean,
    "Info" : Json,
    "Name" : String
  }


snippet ProvisioningParameter-servicecatalog-cloudformationprovisionedproduct-provisioningparameter
  {
    "Key" : String,
    "Value" : String
  }


snippet ProvisioningPreferences-servicecatalog-cloudformationprovisionedproduct-provisioningpreferences
  {
    "StackSetAccounts" :  String, ... ,
    "StackSetFailureToleranceCount" : Integer,
    "StackSetFailureTolerancePercentage" : Integer,
    "StackSetMaxConcurrencyCount" : Integer,
    "StackSetMaxConcurrencyPercentage" : Integer,
    "StackSetOperationType" : String,
    "StackSetRegions" :  String, ... 
  }


snippet DnsConfig-servicediscovery-service-dnsconfig
  {
    "DnsRecords" :  DnsRecord, ... ,
    "NamespaceId" : String,
    "RoutingPolicy" : String
  }


snippet DnsRecord-servicediscovery-service-dnsrecord
  {
    "TTL" : Double,
    "Type" : String
  }


snippet HealthCheckConfig-servicediscovery-service-healthcheckconfig
  {
    "FailureThreshold" : Double,
    "ResourcePath" : String,
    "Type" : String
  }


snippet HealthCheckCustomConfig-servicediscovery-service-healthcheckcustomconfig
  {
    "FailureThreshold" : Double
  }


snippet CloudWatchDestination-ses-configurationseteventdestination-cloudwatchdestination
  {
    "DimensionConfigurations" :  DimensionConfiguration, ... 
  }


snippet DimensionConfiguration-ses-configurationseteventdestination-dimensionconfiguration
  {
    "DefaultDimensionValue" : String,
    "DimensionName" : String,
    "DimensionValueSource" : String
  }


snippet EventDestination-ses-configurationseteventdestination-eventdestination
  {
    "CloudWatchDestination" : CloudWatchDestination,
    "Enabled" : Boolean,
    "KinesisFirehoseDestination" : KinesisFirehoseDestination,
    "MatchingEventTypes" :  String, ... ,
    "Name" : String
  }


snippet KinesisFirehoseDestination-ses-configurationseteventdestination-kinesisfirehosedestination
  {
    "DeliveryStreamARN" : String,
    "IAMRoleARN" : String
  }


snippet Filter-ses-receiptfilter-filter
  {
    "IpFilter" : IpFilter,
    "Name" : String
  }


snippet IpFilter-ses-receiptfilter-ipfilter
  {
    "Cidr" : String,
    "Policy" : String
  }


snippet Action-ses-receiptrule-action
  {
    "AddHeaderAction" : AddHeaderAction,
    "BounceAction" : BounceAction,
    "LambdaAction" : LambdaAction,
    "S3Action" : S3Action,
    "SNSAction" : SNSAction,
    "StopAction" : StopAction,
    "WorkmailAction" : WorkmailAction
  }


snippet AddHeaderAction-ses-receiptrule-addheaderaction
  {
    "HeaderName" : String,
    "HeaderValue" : String
  }


snippet BounceAction-ses-receiptrule-bounceaction
  {
    "Message" : String,
    "Sender" : String,
    "SmtpReplyCode" : String,
    "StatusCode" : String,
    "TopicArn" : String
  }


snippet LambdaAction-ses-receiptrule-lambdaaction
  {
    "FunctionArn" : String,
    "InvocationType" : String,
    "TopicArn" : String
  }


snippet Rule-ses-receiptrule-rule
  {
    "Actions" :  Action, ... ,
    "Enabled" : Boolean,
    "Name" : String,
    "Recipients" :  String, ... ,
    "ScanEnabled" : Boolean,
    "TlsPolicy" : String
  }


snippet S3Action-ses-receiptrule-s3action
  {
    "BucketName" : String,
    "KmsKeyArn" : String,
    "ObjectKeyPrefix" : String,
    "TopicArn" : String
  }


snippet SNSAction-ses-receiptrule-snsaction
  {
    "Encoding" : String,
    "TopicArn" : String
  }


snippet StopAction-ses-receiptrule-stopaction
  {
    "Scope" : String,
    "TopicArn" : String
  }


snippet WorkmailAction-ses-receiptrule-workmailaction
  {
    "OrganizationArn" : String,
    "TopicArn" : String
  }


snippet Template-ses-template-template
  {
    "HtmlPart" : String,
    "SubjectPart" : String,
    "TemplateName" : String,
    "TextPart" : String
  }


snippet AWS::SDB::Domain-simpledb
  {
    "Type" : "AWS::SDB::Domain",
    "Properties" : {
        "Description" : String
      }
  }


snippet AWS::SNS::TopicPolicy-sns-policy
  {
    "Type" : "AWS::SNS::TopicPolicy",
    "Properties" : {
        "PolicyDocument" : Json,
        "Topics" :  String, ... 
      }
  }


snippet Subscription-sns-subscription
  {
    "Endpoint" : String,
    "Protocol" : String
  }


snippet AWS::SNS::Topic-sns-topic
  {
    "Type" : "AWS::SNS::Topic",
    "Properties" : {
        "DisplayName" : String,
        "KmsMasterKeyId" : String,
        "Subscription" :  Subscription, ... ,
        "Tags" :  Tag, ... ,
        "TopicName" : String
      }
  }


snippet AWS::SQS::QueuePolicy-sqs-policy
  {
    "Type" : "AWS::SQS::QueuePolicy",
    "Properties" : {
        "PolicyDocument" : Json,
        "Queues" :  String, ... 
      }
  }


snippet AWS::SQS::Queue-sqs-queues
  {
    "Type" : "AWS::SQS::Queue",
    "Properties" : {
        "ContentBasedDeduplication" : Boolean,
        "DelaySeconds" : Integer,
        "FifoQueue" : Boolean,
        "KmsDataKeyReusePeriodSeconds" : Integer,
        "KmsMasterKeyId" : String,
        "MaximumMessageSize" : Integer,
        "MessageRetentionPeriod" : Integer,
        "QueueName" : String,
        "ReceiveMessageWaitTimeSeconds" : Integer,
        "RedrivePolicy" : Json,
        "Tags" :  Tag, ... ,
        "VisibilityTimeout" : Integer
      }
  }


snippet InstanceAssociationOutputLocation-ssm-association-instanceassociationoutputlocation
  {
    "S3Location" : S3OutputLocation
  }


snippet ParameterValues-ssm-association-parametervalues
  {
    "ParameterValues" :  String, ... 
  }


snippet S3OutputLocation-ssm-association-s3outputlocation
  {
    "OutputS3BucketName" : String,
    "OutputS3KeyPrefix" : String
  }


snippet Target-ssm-association-target
  {
    "Key" : String,
    "Values" :  String, ... 
  }


snippet Targets-ssm-maintenancewindowtarget-targets
  {
    "Key" : String,
    "Values" :  String, ... 
  }


snippet LoggingInfo-ssm-maintenancewindowtask-logginginfo
  {
    "Region" : String,
    "S3Bucket" : String,
    "S3Prefix" : String
  }


snippet MaintenanceWindowAutomationParameters-ssm-maintenancewindowtask-maintenancewindowautomationparameters
  {
    "DocumentVersion" : String,
    "Parameters" : Json
  }


snippet MaintenanceWindowLambdaParameters-ssm-maintenancewindowtask-maintenancewindowlambdaparameters
  {
    "ClientContext" : String,
    "Payload" : String,
    "Qualifier" : String
  }


snippet MaintenanceWindowRunCommandParameters-ssm-maintenancewindowtask-maintenancewindowruncommandparameters
  {
    "Comment" : String,
    "DocumentHash" : String,
    "DocumentHashType" : String,
    "NotificationConfig" : NotificationConfig,
    "OutputS3BucketName" : String,
    "OutputS3KeyPrefix" : String,
    "Parameters" : Json,
    "ServiceRoleArn" : String,
    "TimeoutSeconds" : Integer
  }


snippet MaintenanceWindowStepFunctionsParameters-ssm-maintenancewindowtask-maintenancewindowstepfunctionsparameters
  {
    "Input" : String,
    "Name" : String
  }


snippet NotificationConfig-ssm-maintenancewindowtask-notificationconfig
  {
    "NotificationArn" : String,
    "NotificationEvents" :  String, ... ,
    "NotificationType" : String
  }


snippet Target-ssm-maintenancewindowtask-target
  {
    "Key" : String,
    "Values" :  String, ... 
  }


snippet TaskInvocationParameters-ssm-maintenancewindowtask-taskinvocationparameters
  {
    "MaintenanceWindowAutomationParameters" : MaintenanceWindowAutomationParameters,
    "MaintenanceWindowLambdaParameters" : MaintenanceWindowLambdaParameters,
    "MaintenanceWindowRunCommandParameters" : MaintenanceWindowRunCommandParameters,
    "MaintenanceWindowStepFunctionsParameters" : MaintenanceWindowStepFunctionsParameters
  }


snippet PatchFilter-ssm-patchbaseline-patchfilter
  {
    "Key" : String,
    "Values" :  String, ... 
  }


snippet PatchFilterGroup-ssm-patchbaseline-patchfiltergroup
  {
    "PatchFilters" :  PatchFilter, ... 
  }


snippet PatchSource-ssm-patchbaseline-patchsource
  {
    "Configuration" : String,
    "Name" : String,
    "Products" :  String, ... 
  }


snippet Rule-ssm-patchbaseline-rule
  {
    "ApproveAfterDays" : Integer,
    "ComplianceLevel" : String,
    "EnableNonSecurity" : Boolean,
    "PatchFilterGroup" : PatchFilterGroup
  }


snippet RuleGroup-ssm-patchbaseline-rulegroup
  {
    "PatchRules" :  Rule, ... 
  }


snippet AWS::CloudFormation::Stack-stack
  {
    "Type" : "AWS::CloudFormation::Stack",
    "Properties" : {
        "NotificationARNs" :  String, ... ,
        "Parameters" : {Key : Value, ...},
        "Tags" :  Tag, ... ,
        "TemplateURL" : String,
        "TimeoutInMinutes" : Integer
      }
  }


snippet TagsEntry-stepfunctions-activity-tagsentry
  {
    "Key" : String,
    "Value" : String
  }


snippet TagsEntry-stepfunctions-statemachine-tagsentry
  {
    "Key" : String,
    "Value" : String
  }


snippet EndpointDetails-transfer-server-endpointdetails
  {
    "VpcEndpointId" : String
  }


snippet IdentityProviderDetails-transfer-server-identityproviderdetails
  {
    "InvocationRole" : String,
    "Url" : String
  }


snippet FieldToMatch-waf-bytematchset-bytematchtuples-fieldtomatch-1
  {
    "Data" : String,
    "Type" : String
  }


snippet FieldToMatch-waf-bytematchset-bytematchtuples-fieldtomatch
  {
    "Data" : String,
    "Type" : String
  }


snippet ByteMatchTuple-waf-bytematchset-bytematchtuples
  {
    "FieldToMatch" : FieldToMatch,
    "PositionalConstraint" : String,
    "TargetString" : String,
    "TargetStringBase64" : String,
    "TextTransformation" : String
  }


snippet IPSetDescriptor-waf-ipset-ipsetdescriptors
  {
    "Type" : String,
    "Value" : String
  }


snippet Predicate-waf-rule-predicates
  {
    "DataId" : String,
    "Negated" : Boolean,
    "Type" : String
  }


snippet FieldToMatch-waf-sizeconstraintset-sizeconstraint-fieldtomatch
  {
    "Data" : String,
    "Type" : String
  }


snippet SizeConstraint-waf-sizeconstraintset-sizeconstraint
  {
    "ComparisonOperator" : String,
    "FieldToMatch" : FieldToMatch,
    "Size" : Integer,
    "TextTransformation" : String
  }


snippet SqlInjectionMatchTuple-waf-sqlinjectionmatchset-sqlinjectionmatchtuples
  {
    "FieldToMatch" : FieldToMatch,
    "TextTransformation" : String
  }


snippet WafAction-waf-webacl-action
  {
    "Type" : String
  }


snippet ActivatedRule-waf-webacl-rules
  {
    "Action" : WafAction,
    "Priority" : Integer,
    "RuleId" : String
  }


snippet FieldToMatch-waf-xssmatchset-xssmatchtuple-fieldtomatch
  {
    "Data" : String,
    "Type" : String
  }


snippet XssMatchTuple-waf-xssmatchset-xssmatchtuple
  {
    "FieldToMatch" : FieldToMatch,
    "TextTransformation" : String
  }


snippet ByteMatchTuple-wafregional-bytematchset-bytematchtuple
  {
    "FieldToMatch" : FieldToMatch,
    "PositionalConstraint" : String,
    "TargetString" : String,
    "TargetStringBase64" : String,
    "TextTransformation" : String
  }


snippet FieldToMatch-wafregional-bytematchset-fieldtomatch
  {
    "Data" : String,
    "Type" : String
  }


snippet GeoMatchConstraint-wafregional-geomatchset-geomatchconstraint
  {
    "Type" : String,
    "Value" : String
  }


snippet IPSetDescriptor-wafregional-ipset-ipsetdescriptor
  {
    "Type" : String,
    "Value" : String
  }


snippet Predicate-wafregional-ratebasedrule-predicate
  {
    "DataId" : String,
    "Negated" : Boolean,
    "Type" : String
  }


snippet Predicate-wafregional-rule-predicate
  {
    "DataId" : String,
    "Negated" : Boolean,
    "Type" : String
  }


snippet FieldToMatch-wafregional-sizeconstraintset-fieldtomatch
  {
    "Data" : String,
    "Type" : String
  }


snippet SizeConstraint-wafregional-sizeconstraintset-sizeconstraint
  {
    "ComparisonOperator" : String,
    "FieldToMatch" : FieldToMatch,
    "Size" : Integer,
    "TextTransformation" : String
  }


snippet FieldToMatch-wafregional-sqlinjectionmatchset-fieldtomatch
  {
    "Data" : String,
    "Type" : String
  }


snippet SqlInjectionMatchTuple-wafregional-sqlinjectionmatchset-sqlinjectionmatchtuple
  {
    "FieldToMatch" : FieldToMatch,
    "TextTransformation" : String
  }


snippet Action-wafregional-webacl-action
  {
    "Type" : String
  }


snippet Rule-wafregional-webacl-rule
  {
    "Action" : Action,
    "Priority" : Integer,
    "RuleId" : String
  }


snippet FieldToMatch-wafregional-xssmatchset-fieldtomatch
  {
    "Data" : String,
    "Type" : String
  }


snippet XssMatchTuple-wafregional-xssmatchset-xssmatchtuple
  {
    "FieldToMatch" : FieldToMatch,
    "TextTransformation" : String
  }


snippet AWS::CloudFormation::WaitCondition-waitcondition
  {
    "Type" : "AWS::CloudFormation::WaitCondition",
    "Properties" : {
        "Count" : Integer,
        "Handle" : String,
        "Timeout" : String
      }
  }


snippet AWS::CloudFormation::WaitConditionHandle-waitconditionhandle
  {
    "Type" : "AWS::CloudFormation::WaitConditionHandle",
    "Properties" : {
      }
  }


snippet WorkspaceProperties-workspaces-workspace-workspaceproperties
  {
    "ComputeTypeName" : String,
    "RootVolumeSizeGib" : Integer,
    "RunningMode" : String,
    "RunningModeAutoStopTimeoutInMinutes" : Integer,
    "UserVolumeSizeGib" : Integer
  }


