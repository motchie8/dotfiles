### Apperance ###
# color schema
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'gkeep/iceberg-dark'

# font
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# bar
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_theme='icebergDark'
'''

# resize window
[[plugins]]
repo = 'simeji/winresizer'

### Finder ###
# file finder
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add= '''
    nnoremap <silent>sd :Denite buffer<CR>
    nnoremap <silent>sf :Denite file/rec<CR>
    nnoremap <silent>sg :Denite grep<CR>
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction  
'''

# command line finder
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']

[[plugins]]
repo = 'junegunn/fzf'
build = './install'
rtp = ''

# tree
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nnoremap <silent><Space>t :NERDTreeToggle<CR>
    nnoremap <silent><Space>T :NERDTree<CR>
'''

### Viewer ###
# csv
[[plugins]]
repo = 'chrisbra/csv.vim'

### Features ###
# terminal
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    let g:neoterm_shell = &shell
    let g:neoterm_size = 8
    let g:neoterm_autoscroll = 1
    let g:neoterm_repl_python = &shell
    nnoremap <silent> <Space>C :botright Tnew<CR>:T source venv/bin/activate<CR>
    nnoremap <silent> <Space>c :botright Tnew<CR>
    tnoremap <silent> <ESC> <C-\><C-n>
    tnoremap <silent> jj <C-\><C-n>
    nnoremap <silent> <Space>e :TREPLSendLine<CR>
    vnoremap <silent> <Space>e V:TREPLSendSelection<CR>
'''

# git
[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "tpope/vim-fugitive"

# easymotion
[[plugins]]
repo = "Lokaltog/vim-easymotion"
hook_add = '''
    let g:EasyMotion_do_mapping = 0 
    " nmap F <Plug>(easymotion-overwin-w)
    nmap f <Plug>(easymotion-overwin-f2)
'''

# dotenv
[[plugins]]
repo = "tpope/vim-dotenv"

# autocomplete brackets
[[plugins]]
repo = "jiangmiao/auto-pairs"

# cheetsheet
[[plugins]]
repo = 'sudormrfbin/cheatsheet.nvim'
hook_add = '''
lua <<EOF
require'cheatsheet'.setup {
    -- Whether to show bundled cheatsheets
    -- For generic cheatsheets like default, unicode, nerd-fonts, etc
    -- bundled_cheatsheets = {
    --     enabled = {},
    --     disabled = {},
    -- },
    bundled_cheatsheets = true,

    -- For plugin specific cheatsheets
    -- bundled_plugin_cheatsheets = {
    --     enabled = {},
    --     disabled = {},
    -- }
    bundled_plugin_cheatsheets = true,

    -- For bundled plugin cheatsheets, do not show a sheet if you
    -- don't have the plugin installed (searches runtimepath for
    -- same directory name)
    include_only_installed_plugins = true,

    -- Key mappings bound inside the telescope window
    telescope_mappings = {
        ['<CR>'] = require('cheatsheet.telescope.actions').select_or_fill_commandline,
        ['<A-CR>'] = require('cheatsheet.telescope.actions').select_or_execute,
        ['<C-Y>'] = require('cheatsheet.telescope.actions').copy_cheat_value,
        ['<C-E>'] = require('cheatsheet.telescope.actions').edit_user_cheatsheet,
    }
}
EOF
'''
[[plugins]]
repo = 'nvim-lua/popup.nvim'
[[plugins]]
repo = 'nvim-lua/plenary.nvim'
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'

# Snippet
[[plugins]]
repo = 'honza/vim-snippets'

# IDE
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
# on_i = 1
merged = '0'
hook_add = '''

    nmap <silent> CocAction CocActionAsync
    " add default extensions
    let g:coc_global_extensions = ['coc-lists', 'coc-highlight', 'coc-json', 'coc-yaml', 'coc-pyright', 'coc-jedi', 'coc-cfn-lint', 'coc-sh', 'coc-rls', 'coc-rust-analyzer', '@yaegassy/coc-pysen', 'coc-tsserver', 'coc-eslint', 'coc-prettier', 'coc-react-refactor']

    " TextEdit might fail if hidden is not set.
    set hidden

    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup
    
    " Give more space for displaying messages.
    set cmdheight=2
    
    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=50
    
    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c
    
    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif
    
    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
    
    " Use <c-space> to trigger completion.
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif
    
    " Make <CR> auto-select the first completion item and notify coc.nvim to
    " format on enter, <cr> could be remapped by other vim plugin
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
    
    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    
    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    
    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    
    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
      else
        execute '!' . &keywordprg . " " . expand('<cword>')
      endif
    endfunction
    
    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')
    
    " Symbol renaming.
    nmap <Space>rn <Plug>(coc-rename)
    
    " Formatting selected code.
    xmap <Space>F  <Plug>(coc-format-selected)
    nmap <Space>F  <Plug>(coc-format-selected)
    
    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder.
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end
    
    " Applying codeAction to the selected region.
    " Example: `<Space>aap` for current paragraph
    " nnoremap <silent><nowait> <Space>a  :<C-u>CocAction<cr>
    " xmap <Space>a  <Plug>(coc-codeaction-selected)
    " nmap <Space>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <Space>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <Space>qf  <Plug>(coc-fix-current)
    
    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)
    
    " Remap <C-f> and <C-b> for scroll float windows/popups.
    if has('nvim-0.4.0') || has('patch-8.2.0750')
      nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
      inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
      inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
      vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    endif
    
    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of language server.
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)
    
    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')
    
    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)
    
    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
    
    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
    
    " Mappings for CoCList
    " " Show all diagnostics.
    " nnoremap <silent><nowait> <Space>a  :<C-u>CocList diagnostics<cr>
    " " Manage extensions.
    " nnoremap <silent><nowait> <Space>e  :<C-u>CocList extensions<cr>
    " " Show commands.
    " nnoremap <silent><nowait> <Space>c  :<C-u>CocList commands<cr>
    " " Find symbol of current document.
    " nnoremap <silent><nowait> <Space>o  :<C-u>CocList outline<cr>
    " " Search workspace symbols.
    " nnoremap <silent><nowait> <Space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    " nnoremap <silent><nowait> <Space>j  :<C-u>CocNext<CR>
    " " Do default action for previous item.
    " nnoremap <silent><nowait> <Space>k  :<C-u>CocPrev<CR>
    " " Resume latest coc list.
    " nnoremap <silent><nowait> <Space>p  :<C-u>CocListResume<CR>
'''
